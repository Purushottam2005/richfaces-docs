<?xml version="1.0" encoding="UTF-8"?>
<section>
  <sectioninfo>
    <keywordset>
      <keyword>calendar</keyword>
    </keywordset>
  </sectioninfo>

  <table>
    <title>Component identification parameters</title>

    <tgroup cols="2">
      <thead>
        <row>
          <entry>Name</entry>

          <entry>Value</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>component-type</entry>

          <entry>org.richfaces.Calendar</entry>
        </row>

        <row>
          <entry>component-class</entry>

          <entry>org.richfaces.component.html.HtmlCalendar</entry>
        </row>

        <row>
          <entry>component-family</entry>

          <entry>org.richfaces.Calendar</entry>
        </row>

        <row>
          <entry>renderer-type</entry>

          <entry>org.richfaces.CalendarRenderer</entry>
        </row>

        <row>
          <entry>tag-class</entry>

          <entry>org.richfaces.taglib.CalendarTag</entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <section>
    <title>Creating the Component with a Page Tag</title>

    <para>To create the simplest variant on the page use the following syntax:</para>


    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="xml">...
      &lt;rich:calendar popup="false"/&gt;
...</programlisting>
  </section>

  <section>
    <title>Creating the Component Dynamically Using Java</title>

    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="java"><![CDATA[import org.richfaces.component.html.HtmlCalendar; 	
...
HtmlCalendar myCalendar = new HtmlCalendar();
...
]]></programlisting>
  </section>

  <section>
    <title>Details of Usage</title>
    <para>The <emphasis>
        <property>&quot;popup&quot;</property>
      </emphasis> attribute defines calendar representation mode on a page. If it&apos;s &quot;true&quot;
      the calendar is represented on a page as an input field and a button. Clicking on the button
      calls the calendar popup as it&apos;s shown on the picture below. </para>
    <figure>
      <title>Using the <emphasis><property>&quot;popup&quot;</property></emphasis> attribute</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/calendar.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>There are three button-related attributes:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>
            <property>&quot;buttonLabel&quot;</property>
          </emphasis> defines a label for the button</para>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <para><emphasis>
            <property>&quot;buttonIcon&quot;</property>
          </emphasis> defines an icon for the button</para>
      </listitem>
    </itemizedlist>
    <itemizedlist>
      <listitem>
        <para><emphasis>
            <property>&quot;buttonIconDisabled&quot;</property>
          </emphasis> defines an icon for the disabled state of the button</para>
      </listitem>
    </itemizedlist>
    <para>The <emphasis>
        <property>&quot;direction&quot;</property>
      </emphasis> and <emphasis>
        <property>&quot;jointPoint&quot;</property>
      </emphasis> attributes are used for defining aspects of calendar appearance.</para>
    <para>The possible values for the <emphasis>
        <property>&quot;direction&quot;</property>
      </emphasis> are: </para>
    <itemizedlist>
      <listitem>top-left - a calendar drops to the top and left</listitem>
      <listitem>top-right - a calendar drops to the top and right</listitem>
      <listitem>bottom-left - a calendar drops to the bottom and left</listitem>
      <listitem>bottom-right - a calendar drops to the bottom and right</listitem>
      <listitem>auto - smart positioning activation</listitem>
    </itemizedlist>
    <para> By default, the <emphasis>
        <property>&quot;direction&quot;</property>
    </emphasis> attribute is set to &quot;bottom-right&quot;.</para>
    <para>The possible values for the <emphasis>
        <property>&quot;jointPoint&quot;</property>
      </emphasis> are: </para>
    <itemizedlist>
      <listitem>top-left - a calendar docked to the top-left point of the button element</listitem>
      <listitem>top-right - a calendar docked to the top-right point of the button element</listitem>
      <listitem>bottom-left - a calendar docked to the bottom-left point of the button element</listitem>
      <listitem>bottom-right - a calendar docked to the bottom-right point of the button element</listitem>
      <listitem>auto - smart positioning activation</listitem>
    </itemizedlist>
    <para> By default, the <emphasis>
        <property>&quot;jointPoint&quot;</property>
    </emphasis> attribute is set to &quot;bottom-left&quot;.</para>
    <para>The <emphasis role="bold">
        <property>&lt;rich:calendar&gt;</property>
      </emphasis> component provides to use <emphasis>
        <property>&quot;header&quot;</property>
      </emphasis> facet. For example, you can add following scrolling elements to the facet:
      {currentMonthControl}, {nextMonthControl}, {nextYearControl}, {previousYearControl},
      {previousMonthControl}.</para>
    <para>Simple example is placed below.</para>
    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="xml">...
      &lt;f:facet name="header"&gt;
            &lt;f:verbatim&gt;
                  {previousMonthControl} | {nextMonthControl}					
            &lt;/f:verbatim&gt;
      &lt;/f:facet&gt;
...</programlisting>
    <para>It&apos;s possible to define <emphasis>
        <property>&quot;footer&quot;</property>
      </emphasis> facet and replace in it (in the same way how it was described for <emphasis>
        <property>&quot;header&quot;</property>
      </emphasis> facet), for example, following today bar elements: {todayControl},
      {selectedDateControl}, {helpControl}.</para>
    <para>Also you can use <emphasis>
        <property>&quot;optionalHeader&quot;</property>
      </emphasis> and <emphasis>
        <property>&quot;optionalFooter&quot;</property>
      </emphasis> facets. These facets define the top and the bottom elements of the calendar. They
      are not attached to the control parts of the calendar. You can replace in them any content.</para>
    <para>The <emphasis role="bold">
        <property>&lt;rich:calendar&gt;</property>
      </emphasis> component provides the possibility to use <emphasis>
        <property>&quot;weekNumber&quot;</property>
      </emphasis> and <emphasis>
        <property>&quot;weekDay&quot;</property>
      </emphasis> facets. For example, using these facets you can change text style for the elements
      of the calendar as it&apos;s shown in the example below:</para>
    <para>
      <emphasis role="bold">Example:</emphasis>
    </para>
    <programlisting role="xml">...
      &lt;f:facet name="weekNumber"&gt;
            &lt;h:outputText style="font-weight: bold;" value="{weekNumber}" /&gt;
      &lt;/f:facet&gt;
...</programlisting>

    <para>The <emphasis role="bold">
        <property>&lt;rich:calendar&gt;</property>
      </emphasis> component provides the possibility to use a special data model to define data for
      element rendering. Data model includes two major interfaces: </para>

    <itemizedlist>
      <listitem>CalendarDataModel</listitem>
      <listitem>CalendarDataModelItem</listitem>
    </itemizedlist>

    <para><emphasis role="bold">CalendarDataModel</emphasis> provides the following function:</para>
    <itemizedlist>
      <listitem>CalendarDataModelItem[] getData(Date[]);</listitem>
    </itemizedlist>

    <para>This method is called when it&apos;s necessary to represent the next block of
      CalendarDataItems. It happens during navigation to the next (previous) month or in any other
      case when calendar renders. This method is called in <emphasis><property>&quot;Ajax&quot;</property></emphasis> mode when the
      calendar renders a new page. </para>

    <para><emphasis role="bold">CalendarDataModelItem</emphasis> provides the following function:</para>
    <itemizedlist>
      <listitem>Date getDate() - returns date from the item. Default implementation returns date.</listitem>
      <listitem>Boolean isEnabled() - returns <emphasis><property>&quot;true&quot;</property></emphasis> if date is
        <emphasis><property>&quot;selectable&quot;</property></emphasis> on the calendar. Default implementation returns
        &quot;true&quot;.</listitem>
      <listitem>String getStyleClass() - returns string appended to the style class for the date
        span. For example it could be &quot;relevant holyday&quot;. It means that the class
        could be defined like the &quot;rich-cal-day-relevant-holyday&quot; one. Default
        implementation returns empty string.</listitem>
      <listitem>Object getData() - returns any additional payload that must be JSON-serializable
        object. It could be used in the custom date representation on the calendar (inside the
        custom facet).</listitem>
    </itemizedlist>

  </section>

  <section>
    <title>JavaScript API</title>
    <table>
      <title>JavaScript API</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry>Function</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          
          <row>
            <entry>selectDate(date)</entry>
            
            <entry>Select the date specified.  If the date isn&apos;t in current month - performs request to select</entry>
          </row>
          
          <row>
            <entry>isDateEnabled(date)</entry>
            
            <entry>Check if given date is selectable</entry>
          </row>
          
          <row>
            <entry>enableDate(date)</entry>
            
            <entry>Enables date cell control on the calendar</entry>
          </row>
          
          <row>
            <entry>disableDate(date)</entry>
            
            <entry>Disables date cell control on the calendar</entry>
          </row>
          
          <row>
            <entry>enableDates(date[])</entry>
            
            <entry>Enables dates cell controls set on the calendar</entry>
          </row>
          
          <row>
            <entry>disableDates(date[])</entry>
            
            <entry>Disables dates cell controls set on the calendar</entry>
          </row>
          
          <row>
            <entry>nextMonth()</entry>
            
            <entry>Navigate to next month</entry>
          </row>
          
          <row>
            <entry>nextYear()</entry>
            
            <entry>Navigate to next year</entry>
          </row>
          
          <row>
            <entry>prevMonth()</entry>
            
            <entry>Navigate to previous month </entry>
          </row>
          
          <row>
            <entry>prevYear()</entry>
            
            <entry>Navigate to previous year</entry>
          </row>
          
          <row>
            <entry>today()</entry>
            
            <entry>Select today date</entry>
          </row>
          
          <row>
            <entry>getSelectedDate()</entry>
            
            <entry>Return currently selected date</entry>
          </row>
          
          <row>
            <entry>Object getData()</entry>
            
            <entry>Return additional data for the date</entry>
          </row>
          
          <row>
            <entry>enable()</entry>
            
            <entry>enables calendar</entry>
          </row>
          
          <row>
            <entry>disable()</entry>
            
            <entry>disables calendar</entry>
          </row>
          
          <row>
            <entry>getCurrentMonth()</entry>
            
            <entry>Returns number of the month currently being viewed</entry>
          </row>
          
          <row>
            <entry>getCurrentYear()</entry>
            
            <entry>Returns number of the year currently being viewed</entry>
          </row>
          
          <row>
            <entry>doCollapse()</entry>

            <entry>Collapse calendar  element</entry>
          </row>

          <row>
            <entry>doExpand()</entry>

            <entry>Expand calendar element</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </section>


  <!--section>
    <title>Look-and-Feel Customization</title>

    <para>As this component is just a wrapper for its children its provide the only
      &quot;rich-panel-menu&quot; class for wrapper div element. To redefine appearance of
      particular panel menus, it&apos;s possible to define your own CSS class. And then just
      define it in the components class attribute. </para>

  </section-->

</section>
