<?xml version="1.0" encoding="UTF-8"?>
<section>
    <sectioninfo>
        <keywordset>
            <keyword>rich:orderingList</keyword>
            <keyword>orderingList</keyword>
        </keywordset>
    </sectioninfo>
    <table>
        <title>Component identification parameters</title>

        <tgroup cols="2">
            <thead>
                <row>
                    <entry>Name</entry>

                    <entry>Value</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>component-type</entry>

                    <entry>org.richfaces.OrderingList</entry>
                </row>
                <row>
                    <entry>component-class</entry>

                    <entry>org.richfaces.component.html.HtmlOrderingList</entry>
                </row>
                <row>
                    <entry>component-family</entry>

                    <entry>org.richfaces.OrderingList</entry>
                </row>
                <row>
                    <entry>renderer-type</entry>

                    <entry>org.richfaces.OrderingListRenderer</entry>
                </row>
                <row>
                    <entry>tag-class</entry>

                    <entry>org.richfaces.taglib.OrderingListTagHandler</entry>
                </row>
            </tbody>
        </tgroup>
    </table>
    <section>
        <title>Creating the Component with a Page Tag</title>
        <para>Here is a simple example as it could be used on a page: </para>

        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<rich:orderingList value="#{bean.list}" var="list">
        <rich:column>
            <f:facet name="header">
	    <h:outputText value="Name" />
            </f:facet>
            <h:inputText value="#{item.name}" />
        </rich:column>
<rich:orderingList>
...]]></programlisting>
    </section>
    <section>
        <title>Creating the Component Dynamically Using Java</title>

        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="JAVA"><![CDATA[import org.richfaces.component.html.HtmlOrderingList;
...	
HtmlOrderingList myOrderingList = new HtmlOrderingList();
...]]></programlisting>
    </section>
    <section>
        <title>Details of Usage</title>

        <!--maintenance of component  orderingList-->

        <para>The <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> component consists of <itemizedlist>
                <listitem><property>Item list</property> element that displays a list of items. It
                    has three different representations for a single element: common, selected,
                    active. Combination of these states is possible.</listitem>
                <listitem>
                    <property>Ordering controls set</property>
                </listitem>
            </itemizedlist>
        </para>

        <!-- attributes of component  orderingList -->

        <para> The <emphasis>
                <property> &quot;value&quot;</property>
            </emphasis> and <emphasis>
                <property>&quot;var&quot; </property>
            </emphasis> attributes are used to access the values of a list. </para>

        <para>The <emphasis>
                <property>&quot;selection&quot; </property>
            </emphasis> attribute is bound to a list, which stores a set of indexes for rows
            selected. If the index from a set is out of bounds, it should be ignored. </para>
        <para>Controls rendering is based on the <emphasis>
                <property>&quot;controlsType&quot; </property>
            </emphasis> attribute. Possible types are button, link, none.</para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<rich:orderingList value="#{bean.simpleItems}" var="item" selection="#{bean.selection}" controlsType="button">
        <rich:column>
            <f:facet name="header">
                    <h:outputText value="Cars" />
            </f:facet>
                  <h:outputText value="#{item}" />
        </rich:column>
</rich:orderingList>
...]]></programlisting>

        <para> The <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> component allows to use <emphasis>
                <property>&quot;caption&quot;</property>
            </emphasis>, <emphasis>
                <property>&quot;header&quot;</property>
            </emphasis> and <emphasis>
                <property>&quot;footer&quot; </property>
            </emphasis> facets. </para>

        <!-- ADD SCREENSHOT-->

        <para>Simple example is placed below.</para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<rich:orderingList value="#{bean.simpleItems}" var="item" controlsType="button" selection="#{bean.selection}">
        <f:facet name="caption"><h:outputText value="Caption Facet" /></f:facet>
        <f:facet name="header"><h:outputText value="Header Facet" /></f:facet>
        <h:outputText value="#{item}" />
        <rich:column>
            <f:facet name="header">
	    <h:outputText value="Cars" />
            </f:facet>
            <h:outputText value="#{item.name}" />
        </rich:column>
                <rich:column>
            <f:facet name="header">
	    <h:outputText value="Price" />
            </f:facet>
            <h:outputText value="#{item.price}" />
        </rich:column>
        <f:facet name="footer"><h:outputText value="Footer Facet" /></f:facet>
</rich:orderingList>
...]]></programlisting>

        <!-- ordering control set-->
        <para>The <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> component provides the possibility to use <property>ordering controls
            set</property>, which performs reordering. Every control has possibility to be disabled. </para>
        <para>
            <emphasis>
                <property> &quot;topControl&quot; </property>
            </emphasis>, <emphasis>
                <property>&quot;topControlDisabled&quot;</property>
            </emphasis> , <emphasis>
                <property> &quot;bottomControl&quot;</property>
            </emphasis> , <emphasis>
                <property> &quot;bottomControlDisabled&quot; </property>
            </emphasis>, <emphasis>
                <property> &quot;upControl&quot; </property>
            </emphasis>, <emphasis>
                <property> &quot;upControlDisabled&quot; </property>
            </emphasis>, <emphasis>
                <property> &quot;downControl&quot;</property>
            </emphasis> , <emphasis>
                <property> &quot;downControlDisabled&quot; </property>
            </emphasis> facets are used to replaces the default control with facets content. </para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<rich:orderingList value="#{bean.simpleItems}" var="item" controlsType="button" selection="#{bean.selection}">
        <f:facet name="topControl">
            <h:outputText value="Move to top">
        </f:facet>
            <f:facet name="upControl">
            <h:outputText value="Move up">
        </f:facet>
            <f:facet name="downControl">
            <h:outputText value="Move down">
        </f:facet>
            <f:facet name="bottomControl">
            <h:outputText value="Move to bottom">
        </f:facet>
<rich:orderingList>
...]]></programlisting>

        <para>The position of the controls relatively to a list could be customized with <itemizedlist>
                <listitem>
                    <emphasis>
                        <property>&quot;controlsPosition&quot;</property>
                    </emphasis> attribute. Possible values: <itemizedlist>
                        <listitem>left - controls could be rendered to the left side of a list</listitem>
                        <listitem>right(default) - controls could be rendered to the right side of a
                            list </listitem>
                        <listitem>top - controls could be rendered above the list </listitem>
                        <listitem>bottom - controls could be rendered below the list </listitem>
                    </itemizedlist>
                </listitem>

                <listitem><emphasis>
                        <property> &quot;controlsHorizontalAlign&quot;</property>
                    </emphasis> attribute. Possible values: <itemizedlist>
                        <listitem>left - controls could be rendered to the left side of a list</listitem>
                        <listitem>right(default) - controls could be rendered to the right side of a
                            list</listitem>
                        <listitem>center - controls could be centered</listitem>

                    </itemizedlist>
                </listitem>

                <listitem><emphasis>
                        <property> &quot;controlsVerticalAlign&quot;</property>
                    </emphasis> attribute. Possible values: <itemizedlist>
                        <listitem>top - controls could be rendered aligned to top side of a list </listitem>
                        <listitem>bottom - controls could be rendered aligned to bottom side of a
                            list </listitem>
                        <listitem>center(default) - controls could be rendered centered relatively
                            to a list </listitem>

                    </itemizedlist>
                </listitem>

                <listitem><emphasis>
                        <property>&quot;controlsLayout&quot;</property>
                    </emphasis> attribute. Possible values: <itemizedlist>
                        <listitem>inline - controls defined one by one in line </listitem>
                        <listitem>block - controls defined in column </listitem>
                        <listitem/>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </para>

        <para>The <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> component has a possibility to hide any of the controls by pairs using
            following attributes: <itemizedlist>
                <listitem>
                    <emphasis>
                        <property>&quot;orderControlsVisible&quot;</property>
                    </emphasis> attribute may have two values: true or false. If false
                    <property>Up</property> and <property>Down</property> controls couldn't be
                    displayed.</listitem>
                <listitem>
                    <emphasis>
                        <property>&quot;fastOrderControlsVisible&quot;</property>
                    </emphasis> attribute may have two values: true or false. If false
                    <property>Top</property> and <property>Bottom</property> controls couldn't be
                    displayed.</listitem>
            </itemizedlist>
        </para>

        <para>The component provides possibility to be customized using templating. The
            customization could be performed by a layout definition nested into the component. 5
            elements are provided to be defined inside template: {list}, {topControl},
            {bottomControl}, {downCotrol}, {upControl}. <para>The example is placed below.</para>
        </para>
        <para>Example:</para>
        <programlisting role="XML"><![CDATA[...
<rich:orderingList>
        <h:panelGrid columns="2" columnClasses="class1 class2">
            <h:outputText value="{list}"/>
                <h:panelGroup>
                    <h:outputText value="{topControl}"/>
                    <h:outputText value="{upControl}"/>
                    <h:outputText value="{downControl}"/>
                    <h:outputText value="{bottomControl}"/>
                </h:panelGroup>
        </h:panelGrid>
</rich:orderingList>
...]]>
        </programlisting>
        <!--para>The <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> component provides the possibility to be customized using templating. The
            customization could be performed by layout definition nested to component.</para>
        <para>5 elements could be provided to be defined inside template (all standard controls
            should also possible to use inside): list, topcontrol, bottomControl, downCotrol,
            upControl.</para>
        <para>The markup defined in the initial picture could be defined as in the following
            example.</para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<rich:orderingList>
...
	<h:panelGrid columns="2" columnClasses="class1 class2">
			<h:outputText value="{list}"/>
			<h:panelGroup>
				<h:outputText value="{topControl}"/>
				<h:outputText value="{upControl}"/>
				<h:outputText value="{downControl}"/>
				<h:outputText value="{bottomControl}"/>
			</h:panelGroup>
		</h:panelGrid>
	</rich:orderingList>
...]]></programlisting-->
    </section>

    <table>
        <title>Keyboard usage for elements selection</title>
        <tgroup cols="2">
            <thead>
                <row>
                    <entry>Keys and combinations </entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <!--Sorting API -->
                <row>
                    <entry>CTRL+click</entry>
                    <entry>Described in selection behaviour requirement</entry>
                </row>
                <row>
                    <entry>SHIFT+click</entry>
                    <entry>Described in selection behaviour requirement</entry>
                </row>
                <row>
                    <entry>CTRL+A</entry>
                    <entry>Selects all elements inside the list if some active element is already
                        present in a list</entry>
                </row>
                <row>
                    <entry>Space</entry>
                    <entry>Inverts selection on the active element</entry>
                </row>
                <row>
                    <entry>Up, Down arrows</entry>
                    <entry>Changes the active elements to the next or previous in a list</entry>
                </row>
            </tbody>
        </tgroup>
    </table>


    <table>
        <title>Keyboard usage for elements reordering</title>
        <tgroup cols="2">
            <thead>
                <row>
                    <entry>Keys and combinations </entry>
                    <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <!--Sorting API -->
                <row>
                    <entry>Top</entry>
                    <entry>Moves selected set to the top of a list</entry>
                </row>
                <row>
                    <entry>Bottom</entry>
                    <entry>Moves selected set to the bottomof a list</entry>
                </row>
                <row>
                    <entry>CTRL+Up arrow</entry>
                    <entry>Moves selected item to one position upper</entry>
                </row>
                <row>
                    <entry>CTRL+Down arrow</entry>
                    <entry>Moves selected item to one position lower</entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <para>All the changes uses the same rules that defined in requirement for ordering with
        controls.</para>

    <section>
        <title>JavaScript API</title>
        <para> Controls are accessible for developer on client-side using controls attribute of
            JavaScript component instance. The value of the attribute is an associative array of
            controls keyed by the following strings: <property>top</property>,
            <property>up</property>, <property>down</property>, <property>bottom</property>.</para>
        <table>
            <title>JavaScript API</title>
            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>Function</entry>
                        <entry>Description</entry>
                        <entry>Element</entry>
                    </row>
                </thead>
                <tbody>
                    <!--Sorting API -->
                    <row>
                        <entry>doSortAscending()</entry>
                        <entry>Sort items in the list ascending</entry>
                        <entry>Component</entry>
                    </row>
                    <row>
                        <entry>doSortDescending()</entry>
                        <entry>Sort items in the list descending</entry>
                        <entry>Component</entry>
                    </row>
                    <row>
                        <entry>doSort()</entry>
                        <entry>Invert current sorting</entry>
                        <entry>Component</entry>
                    </row>
                    <!--Controls common API -->
                    <row>
                        <entry>doHide()</entry>
                        <entry>Hide ordering control</entry>
                        <entry>Any Ordering control</entry>
                    </row>
                    <row>
                        <entry>doShow()</entry>
                        <entry>Show ordering control</entry>
                        <entry>Any Ordering control</entry>
                    </row>
                    <row>
                        <entry>isShown()</entry>
                        <entry>Check if current control is shown</entry>
                        <entry>Any Ordering control</entry>
                    </row>
                    <row>
                        <entry>doEnable()</entry>
                        <entry>Enable ordering control</entry>
                        <entry>Any Ordering control</entry>
                    </row>
                    <row>
                        <entry>doDisable()</entry>
                        <entry>Disable ordering control</entry>
                        <entry>Any Ordering control</entry>
                    </row>
                    <row>
                        <entry>isEnabled()</entry>
                        <entry>Check if current control is enabled</entry>
                        <entry>Any Ordering control</entry>
                    </row>
                    <!--List managing API -->
                    <row>
                        <entry>moveUp()</entry>
                        <entry>Move up selected item in the list</entry>
                        <entry>Any Item</entry>
                    </row>
                    <row>
                        <entry>moveDown()</entry>
                        <entry>Move down selected item in the list</entry>
                        <entry>Any Item</entry>
                    </row>
                    <row>
                        <entry>moveTop()</entry>
                        <entry>Move top selected item in the list</entry>
                        <entry>Any Item</entry>
                    </row>
                    <row>
                        <entry>moveBottom()</entry>
                        <entry>Move bottom selected item in the list</entry>
                        <entry>Any Item</entry>
                    </row>
                    <row>
                        <entry>getSelection()</entry>
                        <entry>Return currently selected item</entry>
                        <entry>Any Item</entry>
                    </row>
                    <row>
                        <entry>getItems()</entry>
                        <entry>Return the collection of all items</entry>
                        <entry>Any Item</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>

    <section>
        <title>Look-and-Feel Customization</title>
        <para>For skinnability implementation, the components use a <emphasis>
                <property>style class redefinition method.</property>
            </emphasis> Default style classes are mapped on <emphasis>
                <property>skin parameters.</property>
            </emphasis></para>
        <para>There are two ways to redefine the appearance of all <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> components at once: <itemizedlist>
                <listitem>Redefine the corresponding skin parameters</listitem>
                <listitem> Add to your style sheets style classes used by a <emphasis role="bold">
                        <property>&lt;rich:orderingList&gt;</property>
                    </emphasis> component</listitem>
            </itemizedlist>
        </para>
    </section>
    <section>
        <title>Definition of Custom Style Classes</title>

        <para>On the screenshot there are classes names that define styles for component elements.</para>

        <!-- ADD SCREENSHOT -->

        <table>
            <title>Classes names that define a rows representations</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Class name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>rich-ordering-list-row</entry>
                        <entry>Defines a default class for any item row</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-list-row-selected</entry>
                        <entry>Defines class to be added to selected item rows</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-list-row-active</entry>
                        <entry>Defines class to be added to active item rows</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-list-cell-disabled</entry>
                        <entry>Defines a class for row in disabled state</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <table>
            <title>Classes names that define a cells representations</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Class name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>rich-ordering-list-item-cell</entry>
                        <entry>Defines a default class for any item cell</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-list-item-cell-selected</entry>
                        <entry>Defines class to be added to selected item cells</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-list-item-cell-active</entry>
                        <entry>Defines class to be added to active item cells</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-list-cell-disabled</entry>
                        <entry>Defines a class for cell in disabled state</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <table>
            <title>Classes names that define controls representations</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Class name</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>rich-ordering-controls</entry>
                        <entry>Could be applied to the whole group of the controls.</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-control-top</entry>
                        <entry>Defines class for Top control</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-control-bottom</entry>
                        <entry>Defines class for Bottom control</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-control-up</entry>
                        <entry>Defines class for Up control</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-control-down</entry>
                        <entry>Defines class for Down control</entry>
                    </row>
                    <row>
                        <entry>rich-ordering-control-disabled</entry>
                        <entry>Defines a class for any control in a disabled state</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>In order to redefine styles for all <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> components on a page using CSS, it's enough to create classes with the same
            names and define necessary properties in them. </para>
        <para>To change styles of particular <emphasis role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> components, define your own style classes in the corresponding <emphasis
                role="bold">
                <property>&lt;rich:orderingList&gt;</property>
            </emphasis> component attributes.</para>
    </section>
</section>
