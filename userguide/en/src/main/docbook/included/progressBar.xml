<?xml version="1.0" encoding="UTF-8"?>
<section>
    <sectioninfo>
        <keywordset>
            <keyword>rich:progressBar</keyword>
            <keyword>progressBar</keyword>
        </keywordset>
    </sectioninfo>
    <table>
        <title>Component identification parameters</title>
        
        <tgroup cols="2">
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Value</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>component-type</entry>
                    <entry>org.richfaces.ProgressBar</entry>
                </row>
                <!--row>
                    <entry>component-class</entry>
                    <entry></entry>
                </row-->
                <row>
                    <entry>component-family</entry>
                    <entry>org.richfaces.ProgressBar</entry>
                </row>
                <row>
                    <entry>renderer-type</entry>
                    <entry>org.richfaces.renderkit.ProgressBarRenderer</entry>
                </row>
                <row>
                    <entry>tag-class</entry>
                    <entry>org.richfaces.taglib.ProgressBarTag</entry>
                </row>
            </tbody>
        </tgroup>
    </table>
    <section>
        <title>Creating the Component with a Page Tag</title>
        <para>Here is a simple example of how the component can be used on a page: </para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<progressBar:progressBar value="#{bean.incValue1}"/>
...]]></programlisting>
    </section>
    <section>
        <title>Creating the Component Dynamically Using Java</title>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="JAVA"><![CDATA[import org.richfaces.component.html.progressBar;
...	
HtmlColumns myColumns = new progressBar();
...]]></programlisting>
    </section>
    <!-- Start  Details of Usage-->
    <section>
        <title>Details of Usage</title>
        <para>    
            As it was mentioned above, the <emphasis role="bold"><property>&lt;rich:progressBar&gt;</property>  </emphasis>
            component displays the status of the ongoing process.  The component has a number of key attributes. 
        </para>
        <para>     
            The <emphasis><property>&quot;value&quot;</property></emphasis> attribute sets the current value of the process. Status of the process is calculated basing on  <property> &quot;value&quot;</property> attribute.  
        </para>     
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...	
<rich:progressBar	
        value="#{bean.incValue}" >
</rich:progressBar>
...]]></programlisting>
        <para> The <emphasis role="bold"><property>&lt;rich:progressBar&gt;</property>  </emphasis> starts and finishes rendering its state being governed by   <emphasis><property>&quot;minValue&quot;</property></emphasis> (default value â€“ &quot;0&quot;) 
            and <emphasis><property>&quot;maxValue&quot;</property></emphasis>  (default value is &quot;100&quot;) attributes relatively.  See the following example.</para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>      
        
        <programlisting role="XML"><![CDATA[...
<rich:progressBar value="#{bean.incValue}" 
        minValue="50"
        maxValue="400"/>
...]]> </programlisting>   
  <para> The <emphasis><property>&quot;interval&quot;</property></emphasis>attribute defines the frequency of status polling. Polling is active while the component is operational. </para>   
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        
 <programlisting role="XML"><![CDATA[...
<rich:progressBar value="#{bean.incValue}" " id="progrs" interval="900"/>
...]]> </programlisting>     
        <para> The <emphasis><property>&quot;parameters&quot;</property></emphasis>attribute allows to send some
            dynamical data to the component which is displayed in the informational part.
            Parameters can be passed through <emphasis><property>&quot;parameters&quot;</property></emphasis> attribute, or from component control.</para>   
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<rich:progressBar progressVar="progress" parameters="param1:'1'"  >
		<h:outputText="{param1} task #{progress} %"/>
</rich:progressBar>
...]]> </programlisting>     
        <para>
            The   <emphasis><property> &quot;label&quot;</property></emphasis>  attribute is responsible for displaying informational 
            data on the progress bar, if it&apos;s not displayed using  children components. 
            If this attribute is not set and the children components are not used either, no textual information 
            regarding ongoing process will be indicated. 
            In order to indicate the current status you need to pass the value to this attribute. Please  see an example.
        </para>         
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...	
<rich:progressBar value="#{bean.incValue}" id="progrs" label="{value}%" >
</rich:progressBar>
...]]></programlisting>
 
        <para> In order to display textual and numerical information on the progress bar (as it was said above this can be aslo performed using <emphasis><property> &quot;label&quot;</property></emphasis> attribute ) you can also  use this code: 
        </para>       
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<h:outputText value="{value}%" ></h:outputText>
...]]></programlisting>        

        <para>
     The component can also employ  <emphasis><property> &quot;initial&quot;</property></emphasis> and <emphasis><property> &quot;complete&quot;</property></emphasis>
     facets to display the states of the process: <emphasis><property> &quot;initial&quot;</property></emphasis> facet is displayed when the progress value is less or equal to <emphasis><property> &quot;minValue&quot;</property></emphasis>
     , and the  <emphasis><property> &quot;complete&quot;</property></emphasis> facet is shown when the value is greater or equal to <emphasis><property> &quot;maxValue&quot;</property></emphasis>. Please see an example below.  
        </para>
        <para>
            <emphasis role="bold">Example:</emphasis>
        </para>
        <programlisting role="XML"><![CDATA[...
<progressBar:progressBar value="#{bean.incValue1}" >
    <f:facet name="initial">
        <h:outputText value="Process not started"></h:outputText>
    </f:facet>
    <f:facet name="complete">
        <h:outputText value="Process completed"></h:outputText>
    </f:facet>
</progressBar:progressBar> 
 ...]]> </programlisting>       
        <para> However, the usage of these facets is optional. If you omit them nothing will be displayed.
        </para>
        <para>The <emphasis role="bold"><property>&lt;rich:progressBar&gt;</property>  </emphasis> component can be used in two modes: Ajax (default) and Client.  In order to define the mode you need to  use <emphasis><property>&quot;mode&quot;</property></emphasis> attribute. 
        </para>   
        <itemizedlist>
             <listitem>
                 <para><property>Ajax</property> - polling is activated when the component is enabled to check its value. </para>
             </listitem>
            <listitem>
                <para><property>Client</property> - component updates after its value changed through JavaScript API. </para>
            </listitem>
         </itemizedlist>
    </section>
    <!-- End. Details of Usage-->
    
    <!-- JavaScript API-->  
 <section>
        <title>JavaScript API</title>
        <table> 
            <title>JavaScript API</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Function</entry>
                        <entry>Description</entry>
                      
                    </row>
                </thead>
                <tbody>
                    <!--Sorting API -->
                    <row>
                        <entry>enable()</entry>
                        <entry>Begins polling for ajax mode </entry>
             
                    </row>
                    <row>
                        <entry>disable()</entry>
                        <entry>Stops polling for ajax mode</entry>
          
                    </row>
                    
                    <row>
                        <entry>setValue(value)</entry>
                        <entry>Updates the progress of the process</entry>
                        
                    </row>
                    <row>
                        <entry>setLabel(label)</entry>
                        <entry>Update the label for the process</entry>
                        
                    </row>
                    
                    
                    
                    
                </tbody>
            </tgroup>
        </table>
    </section>
    <!-- End of JavaScript API-->   
    
    <!-- Look-and-Feel Customization-->  
    
    <section>
        <title>Look-and-Feel Customization</title>
        <para>For skinnability implementation, the components use a <emphasis>
            <property>style class redefinition method.</property>
        </emphasis> Default style classes are mapped on <emphasis>
            <property>skin parameters.</property>
        </emphasis></para>
        <para>There are two ways to redefine the appearance of all <emphasis role="bold">
            <property>&lt;rich:progressBar&gt;</property>
        </emphasis> components at once: <itemizedlist>
            <listitem>Redefine the corresponding skin parameters</listitem>
            <listitem> Add to your style sheets style classes used by a <emphasis role="bold">
                <property>&lt;rich:progressBar&gt;</property>
            </emphasis> component</listitem>
        </itemizedlist>
        </para>
    </section>
       
    <!-- End of Look-and-Feel Customization-->  
    
    
</section>
