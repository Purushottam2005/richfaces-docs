<?xml version='1.0' encoding='UTF-8'?>
<section>
<sectioninfo>
<keywordset>
<keyword>on-keypress suggestion</keyword>
<keyword>rich:suggestionBox</keyword>
<keyword>HtmlSuggestionBox</keyword>
</keywordset>
</sectioninfo>
  <section>
     <table>
	  <title>Component identification parameters</title>
      <tgroup cols="2">
	  <thead>
            <row>
                  <entry>Name</entry>
                  <entry>Value</entry>
            </row>
        </thead>
        <tbody>
          <row>
            <entry>component-type</entry>
            <entry>org.richfaces.SuggestionBox</entry>
          </row>
          <row>
            <entry>component-class</entry>
            <entry>org.richfaces.component.html.HtmlSuggestionBox</entry>
          </row>
          <row>
            <entry>component-family</entry>
            <entry>org.richfaces.SuggestionBox</entry>
          </row>
          <row>
            <entry>renderer-type</entry>
            <entry>org.richfaces.SuggestionBoxRenderer</entry>
		  </row>
		  <row>
			<entry>tag-class</entry>
            <entry>org.richfaces.taglib.SuggestionBoxTag</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section>
    <title>Creating the Component with a Page Tag</title>
    <para>To create it on a page, use the following syntax: </para>
    <programlisting role="XML"><![CDATA[...
		<h:inputText value="#{bean.property}" id="suggest"/>
         <rich:suggestionbox for="suggest" suggestionAction="#{bean.autocomplete}" 
           var="suggest">
		   <h:column>
		   <h:outputText value="#{suggest.text}"/>	
		   </h:column>
		 </rich:suggestionbox>
...
]]></programlisting>
<para>Here is the <emphasis role="italic"><property>bean.autocomplete</property></emphasis>
 method that returns the collection to pop up:</para>
<programlisting role="JAVA"><![CDATA[public List autocomplete(Object event) {
		String pref = event.toString();
		//collecting some data that begins with "pref" letters.
        ...
		return result;
	}
]]></programlisting>
  </section>
  <section>
    <title>Creating the Component Dynamically Using Java</title>
    <programlisting role="JAVA"><![CDATA[...
org.richfaces.component.html.HtmlSuggestionBox myList = new org.richfaces.component.html.HtmlSuggestionBox();
...
]]></programlisting>
  </section>
  <section>
    <title>Details of Usage</title>
    <para>As it is shown in the example above, the main component attribute are:</para>
<itemizedlist>
        <listitem>
          <emphasis 
role="italic"><property>&quot;for&quot;</property></emphasis><para>The attribute where there is an input component which activation causes a suggestion activation</para>
        </listitem>
        <listitem>
          <emphasis 

role="italic"><property>&quot;suggestionAction&quot;</property></emphasis><para> is an accepting parameter of a SuggestionEvent type that returns as a result a collection for rendering in a tool tip window.</para>
		 </listitem>
		 <listitem>
          <emphasis 

role="italic"><property>&quot;var&quot;</property></emphasis> <para>
		 a collection name that provides access for inputting into a table in a popup</para>
        </listitem>
      </itemizedlist>
<para>There are also two size attributes (<emphasis 

role="italic"><property>&quot;width&quot;</property></emphasis> and <emphasis 

role="italic"><property>&quot;height&quot;</property></emphasis>) that are obligatory for the suggestion component. The attributes have initial Defaults but should be specified manually in order to be changed.</para>
<para>The <property>suggestionBox</property> component, as it is shown on the screenshot, could get any collection for an output and outputs it in a tooltip window the same as a custom dataTable (in several columns)</para>
<programlisting role="XML"><![CDATA[<rich:suggestionbox for="test"
        suggestionAction="#{bean.autocomplete}" var="cit" fetchValue="#{cit.text}">
		<h:column>
			<h:outputText value="#{cit.label}"/>
		</h:column>
		<h:column>
			<h:outputText value="#{cit.text}"/>
		</h:column>
</rich:suggestionbox>
]]></programlisting>
<para>It looks on the page in the following way:</para>
    <figure>
      <title>SuggestionBox with tooltip window</title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/suggestionbox2.gif"/>
        </imageobject>
</mediaobject>
    </figure>
	<para>When some string is chosen input receives the corresponding value from the second column containing <property>#{cit.text}</property></para>
	<para>There is also one more important attribute named <emphasis 

role="italic"><property>&quot;tokens&quot;</property></emphasis> that specifies separators after which a set of some characters sequence is defined as a new prefix beginning from this separator and not from the string beginning.</para>
	<para><emphasis role="bold">Example:</emphasis></para>
    <programlisting role="XML"><![CDATA[...
	<rich:suggestiobox for="test" suggestionAction="#{bean.autocomplete}" var="cit" 
	    selfRendered="true" tokens=","> 
		<h:column>
		<h:outputText value="#{cit.text}"/>
		</h:column>
	</rich:suggestionbox>
...
]]></programlisting>
<para>This example shows that when a city is chosen and a comma and first letter character are input,
AJAX request is called again, but it submits a value starting from the last token:</para>
    <figure>
      <title>SuggestionBox with chosen word</title>
<mediaobject> 
        <imageobject>
            <imagedata fileref="images/suggestionbox3.gif"/>
        </imageobject>
</mediaobject>
    </figure>
	<para>For a multiple definition use either &quot;,.; &quot; syntax as a value for tokens or link a parameter to some bean property transmitting separators collection.</para>
	<para>The component also encompasses <emphasis 
role="italic"><property>&quot;layout&quot;</property></emphasis> and <emphasis 
role="italic"><property>&quot;style&quot;</property></emphasis> attributes corresponding to dataTable
 ones for a table appearing in popup (for additional information, read JSF Reference) and custom 
 attribute managing AJAX requests sending (for additional information, see <ulink url="https://ajax4jsf.dev.java.net">ajax4jsf.dev.java.net</ulink>).</para>
	<para>In addition to these attributes common for AJAX action components and limiting requests
	 quantity and frequency, <property>suggestionBox</property> has one more its own attribute limiting
	  requests (the <emphasis role="italic"><property>&quot;minChars&quot;</property></emphasis> attribute). The attribute defines characters quantity inputted into a field after which AJAX requests are called to perform suggestion.</para>
	</section>
</section>