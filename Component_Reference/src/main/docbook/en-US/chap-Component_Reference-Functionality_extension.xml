<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Functionality_extension">
	<title>Functionality extension</title>
	<para>
		Read this chapter for details on miscellaneous components that provide extended functionality to web applications.
	</para>
	
	<section id="sect-Component_Reference-Functionality_extension-richcomponentControl">
		<title><sgmltag>&lt;rich:componentControl&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:componentControl&gt;</sgmltag> behavior allows JavaScript API functions to be called on target components. The functions are called after defined events are triggered on the component to with the <sgmltag>&lt;rich:componentControl&gt;</sgmltag> behavior is attached. Initialization variants and activation events can be customized, and parameters can be passed to the target component.
		</para>
		
		<section id="sect-Component_Reference-richcomponentControl-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>operation</varname> attribute is required to attach JavaScript functions to the parent component, along with either the <varname>target</varname> or <varname>selector</varname> attributes. Use the <varname>operation</varname> attribute to specify the JavaScript API function to perform. Use the <varname>target</varname> attribute to define the <varname>id</varname> identifier of the target component, or use the <varname>selector</varname> attribute to define a number of target components through the use of valid jQuery selectors.
			</para>
			<para>
				Use the <varname>event</varname> attribute to specify the event that triggers the JavaScript API function call if it is different from the default triggering event for the parent component.
			</para>
			<example id="exam-Component_Reference-richcomponentControl-richcomponentControl_basic_usage">
				<title><sgmltag>&lt;rich:componentControl&gt;</sgmltag> basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcomponentControl-richcomponentControl_basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example contains a single command button, which when clicked shows the modal panel with the identifier <literal>ccModalPanelID</literal>.
				</para>
			</example>
		</section>

		<!--
		<section id="sect-Component_Reference-richcomponentControl-Attaching_to_a_component">
			<title>Attaching to a component</title>
			<para>
				The <varname>attachTo</varname> attribute can be used to attach the event to a component other than the parent component. If no <varname>attachTo</varname> attribute is supplied, the <sgmltag>&lt;rich:componentControl&gt;</sgmltag> component's parent is used, as in <xref linkend="exam-Component_Reference-richcomponentControl-richcomponentControl_basic_usage" />.
			</para>
			<example id="exam-Component_Reference-richcomponentControl-Attaching_richcomponentControl_to_a_component">
				<title>Attaching <sgmltag>&lt;rich:componentControl&gt;</sgmltag> to a component</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcomponentControl-Attaching_richcomponentControl_to_a_component.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					In the example, the <literal>click</literal> event of the component with the identifier <literal>ccCalendarID</literal> will trigger the <literal>Expand</literal> operation for the component with the identifier <literal>doExpandCalendarID</literal>.
				</para>
			</example>
		</section>
		-->
		
		<section id="sect-Component_Reference-richcomponentControl-Passing_parameters_to_API_methods">
			<title>Passing parameters to API methods</title>
			<para>
				The operation can receive parameters through nested <sgmltag>&lt;f:param&gt;</sgmltag> elements.
			</para>
			<example id="exam-Component_Reference-richcomponentControl-Using_parameters">
				<title>Using parameters</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcomponentControl-Using_parameters-1.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				To group multiple parameters for a function, use the <sgmltag>&lt;rich:hashParam&gt;</sgmltag> component to create a hash map. Refer to <xref linkend="sect-Component_Reference-Functionality_extension-richhashParam" /> for details.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richcomponentControl-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-type</parameter>: <classname>org.richfaces.behavior.ComponentControlBehavior</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-id</parameter>: <classname>org.richfaces.behavior.ComponentControlBehavior</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.ComponentControlHandler</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-class</parameter>: <classname>org.richfaces.component.behavior.ComponentControlBehavior</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-class</parameter>: <classname>org.richfaces.renderkit.html.ToggleControlRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

    <section id="sect-Component_Reference-Functionality_extension-richfocus">
        <title><sgmltag>&lt;rich:focus&gt;</sgmltag></title>
        <para>
            The <sgmltag>&lt;rich:focus&gt;</sgmltag> component allows to focus components on a page. It is intented to be used with any input field.
        </para>
        
        <section id="sect-Component_Reference-richfocus-Placement">
            <title>Placement</title>
	        <para>
	        	The component will behave differently when placed:
	    	</para>
	    	<itemizedlist>
	            <listitem>
	                <para>
	                    in a form - defines behavior for components in the given form 
	                </para>
	            </listitem>
	            <listitem>
	                <para>
	                    in a view (outside of forms) - defines behavior for components in all forms in the view
	                </para>
	            </listitem>
	    	</itemizedlist>
	    	<para>
	    		There can be only one focus per form.
	    	</para>
	    	<para>
	    		If both, form- and view-based focuses are defined, a form one takes a priority. 
	    	</para>
    	</section>
    	
    	<section id="sect-Component_Reference-richfocus-Applying_focus">
            <title>Applying Focus</title>
	        <para>
	        	A focus is applied each time it is rendered - either on form submission or after AJAX request. Only focuses inside a form which is submitted at a time are applied.
	    	</para>
	    	<para>
	    		You can turn focusing after AJAX request off by setting <varname>ajaxRendered</varname> attribute to <varname>false</varname>.
	    	</para>
    	</section>
    	
    	<section id="sect-Component_Reference-richfocus-Validation_aware">
            <title>Validation-Aware</title>
	        <para>
	        	The <sgmltag>&lt;rich:focus&gt;</sgmltag> component reflects results of validation of components in a view. Focus is given to a first input component in a page which is invalid. 
	    	</para>
	    	<para>
	    		If no component is invalid, then first component in the form will be focused.
	    	</para>
	    	<para>
	    		The order of input components is determined on client-side and it reflects <varname>tabindex</varname> and position in a page. You can prioritize focusing of specific component by increasing its tabindex.
	    	</para>
	    	<para>
	    		You can turn validation awareness off by setting <varname>validationAware</varname> attribute to <varname>false</varname>.  
	    	</para>
    	</section>
    	
    	<section id="sect-Component_Reference-richfocus-Preserving_focus">
            <title>Preserving Focus</title>
	        <para>
	        	Focus can be configured to keep focus on input component which has been focused before sending JSF request (using either AJAX or form submission).
	    	</para>
	    	<example id="exam-Component_Reference-richfocus-richfocus_preserving_focus">
                <title><sgmltag>&lt;rich:focus&gt;</sgmltag> preserving focus</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richfocus-richfocus_preserving_focus.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    In the example above, everytime user hits Search (or hits enter), the focus is given back to query input after the request.
                </para>
            </example>
	    	<para>
	    		This configuration will take a priority over any other focus setup.
	    	</para>
    	</section>
    	
    	<section id="sect-Component_Reference-richfocus-Delaying_focus">
            <title>Delaying Focus</title>
	        <para>
	        	In certain situation, a focus needs to be applied with a delay - once suitable conditions are met.
	    	</para>
	    	<para>
	    		By configuring a focus with attribute <varname>delayed</varname> to <varname>true</varname>, the focus won't be applied on initial page request.
	    	</para>
	    	<para>
	    		Then it is possible to call <varname>applyFocus()</varname> JavaScript API method in order to let the focus apply.
	    	</para>
    	</section>
    	
    	<section id="sect-Component_Reference-richfocus-Focus_Manager">
            <title>Focus Manager</title>
	        <para>
	        	For situation when no of the options above helps you to achieve focus behavior you would like to use, you can use server-side component <varname>FocusManager</varname>. 
	    	</para>
	    	<para>
	    		A component to focus chosen by <varname>FocusManager</varname> will take a priority over any other configuration.
	    	</para>
	    	<example id="exam-Component_Reference-richfocus-Focus_Manager">
                <title><sgmltag>&lt;rich:focus&gt;</sgmltag> preserving focus</title>
                <programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richfocus-Focus_Manager.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
    	</section>
        
        <section id="sect-Component_Reference-richfocus-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Focus</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIFocus</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Focus</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.FocusRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

    <section id="sect-Component_Reference-Functionality_extension-richhotKey">
        <title><sgmltag>&lt;rich:hotKey&gt;</sgmltag></title>
        <para>
            The <sgmltag>&lt;rich:hotKey&gt;</sgmltag> component allows to register hot keys for the page or particular elements and to define client-side processing functions for these keys.
        </para>
        
        <section id="sect-Component_Reference-richhotKey-Basic_usage">
            <title>Basic usage</title>
            <para>
                There are two ways to register <sgmltag>&lt;rich:hotKey&gt;</sgmltag>:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        place it anywhere on the page. In this case the <sgmltag>&lt;rich:hotKey&gt;</sgmltag> component is attached to the whole page. This is default scenario.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        attach it to the specific elements by defining <varname>selector</varname> attribute. This attribute uses syntax of the jQuery Selectors (superset of CSS selectors defined by W3C consortium) and additionally it expands JSF component IDs to client-side IDs (see a VDL documentation for the <varname>selector</varname> attribute). 
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                The <varname>key</varname> attribute defines the hot key itself, which is processed by the component. 
            </para>
            <para>
                The key sequences can be defined using a "<code>+</code>" key separator. The key sequence modifiers needs to be defined in an alphabetical order, e.g. <code>alt+ctrl+shift</code>. 
            </para>
            <para>
                The hot key processing can be disabled by setting <varname>rendered</varname> to <code>false</code>. 
            </para>
            
            <example id="exam-Component_Reference-richhotkey-richhotkey_basic_usage">
                <title><sgmltag>&lt;rich:hotKey&gt;</sgmltag> basic usage</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richhotkey-richhotkey_basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    The example contains <sgmltag>&lt;rich:hotKey&gt;</sgmltag> which handles <code>Ctrl+Z</code> key sequence on the whole page. When the key sequence is pressed, the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> is displayed.
                </para>
            </example>
        </section>
        
        <section id="sect-Component_Reference-richhotKey-Event_processing">
            <title>Event processing</title>
            <para>
                The <varname>enabledInInput</varname> attribute enables the hot key event processing when form inputs are focused. This attribute is <code>false</code> by default.
            </para>
            <para>
                The <varname>preventDefault</varname> attribute specifies whether the hot key binding should prevent default browser-specific actions to be taken (e.g. <code>Ctrl+A</code> hot key selecting all available text, Ctrl+B opening bookmarks bar, etc.). This attribute has default value <code>true</code>.
            </para>
        </section>
        
        <note>
            <title>Cross-browser support for preventing default actions</title>
            <para>
                Even though RichFaces instructs browser prevent default action, browser implementations does not support preventing browser's native actions for selected key combinations. 
            </para>
            <para>
                Althought the inability to prevent default action is not usual, you may experience that both programatically-defined action and browser's native action are triggered (e.g. native popup appears).   
            </para>
            <para>
                To keep application accessible, it is convenient to do not depend on hot keys or hot key combinations heavily. Best practice is using hot key only as shortcut for given action. 
            </para>
        </note>
        
        <section id="sect-Component_Reference-richhotKey-Event_handlers">
            <title>Event handlers</title>
            <para>
                The following event handlers could be used to trigger client-side behaviors or to invoke javascript directly:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <varname>keydown</varname> (default event) is fired when the hot key sequence is initiated (the keys are down)
                    </para> 
                </listitem>
                <listitem>
                    <para>
                        <varname>keyup</varname> is fired when the hot key sequence is finished (the keys are up)
                    </para>
                </listitem>
            </itemizedlist>
            
            <example id="exam-Component_Reference-richhotKey-richhotkKey_event_handlers">
                <title><sgmltag>&lt;rich:hotKey&gt;</sgmltag> event handlers</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richhotkey-richhotkKey_event_handlers.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>

        <note>
            <title>Hot Key in Editor</title>
            <para>
                The <sgmltag>&lt;rich:editor&gt;</sgmltag> uses <sgmltag>&lt;iframe&gt;</sgmltag> for the editable area.
            </para>
            <para>
                The <sgmltag>&lt;iframe&gt;</sgmltag> doesn't allow to propagate events outside of <sgmltag>&lt;rich:editor&gt;</sgmltag>,
                making <sgmltag>&lt;rich:hotKey&gt;</sgmltag> unusable for handling events from <sgmltag>&lt;rich:editor&gt;</sgmltag>.
            </para>
            <para>
                The CKEditor specific event handling mechanism could be used instead.
            </para>
        </note>
        
        <section id="sect-Component_Reference-richhotKey-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.HotKey</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIHotKey</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.HotKey</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.HotKeyRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
    </section>

	<section id="sect-Component_Reference-Functionality_extension-richhashParam">
		<title><sgmltag>&lt;rich:hashParam&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:hashParam&gt;</sgmltag> component allows client-side parameters to be grouped into a hash map. The hash map can then be passed to the client JavaScript API functions of any RichFaces component.
		</para>

		<section id="sect-Component_Reference-richhashParam-Basic_usage">
			<title>Basic usage</title>
			<para>
				Nest parameter tags in the <sgmltag>&lt;rich:hashParam&gt;</sgmltag> component to group them in the hash map. The hash map itself can then be passed as a function parameter.
			</para>
			<example id="exam-Component_Reference-richhashParam-richhashParam">
				<title><sgmltag>&lt;rich:hashParam&gt;</sgmltag></title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richhashParam-richhashParam.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example illustrates the use of the <sgmltag>&lt;rich:hashParam&gt;</sgmltag> component to group multiple parameters into a hash map. The parameters are passed through to the <function>show</function> function pop-up panel with the <literal>popupPanel</literal> identifier.
				</para>
			</example>
		</section>
	
		<section id="sect-Component_Reference-richhashParam-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.HashParam</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIHashParam</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.HashParam</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.HashParamRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.HashParamTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<!--
	<section id="sect-Component_Reference-Functionality_extension-richgmap">
		<title><sgmltag>&lt;rich:gmap&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	
	<section id="sect-Component_Reference-Functionality_extension-richvirtualEarth">
		<title><sgmltag>&lt;rich:virtualEarth&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	-->
    
</chapter>

