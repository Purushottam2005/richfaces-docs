<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Validation">
	<title>Validation</title>
	<para>
		JavaServer Faces 2 provides built-in support for bean validation as per the Java Specification Request JSR-303 standard. As such, containers must validate model objects. Validation is performed at different application tiers according to annotation-based constraints. Refer to <ulink url="http://jcp.org/en/jsr/detail?id=303">http://jcp.org/en/jsr/detail?id=303</ulink> for further details on the JSR-303 specification.
	</para>
	<para>
		<xref linkend="exam-Component_Reference-Validation-JSR-303_validation_annotations" /> shows an example JSF managed bean. The bean includes JSR-303 annotations for validation. Validation annotations defined in this way are registered on components bound to the bean properties, and validation is triggered in the <emphasis>Process Validation</emphasis> phase.
	</para>
	<example id="exam-Component_Reference-Validation-JSR-303_validation_annotations">
		<title>JSR-303 validation annotations</title>
		<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-Validation-JSR-303_validation_annotations.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
	</example>
	<note>
		<title>Requirements</title>
		<para>
			Bean validation in both JavaServer Faces and RichFaces requires the <emphasis>JSR-303</emphasis> implementation. The implementation is bundled with <productname>JEE 6 Application Server</productname>.
		</para>
		<para>
			If using <productname>Tomcat</productname> or another simple servlet container, add the <filename>validation-api</filename> Java Archive and a validation provider (such as <productname>Hibernate Validator</productname>) to your application libraries.
		</para>
	</note>
	
	<section id="sect-Component_Reference-Validation-richvalidator">
		<title><sgmltag>&lt;rich:validator&gt;</sgmltag> client-side validation</title>
		<para>
			The validation built in to JavaServer Faces 2 occurs on the server side. The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior adds client-side validation to a control based on registered server-side validators. It provides this validation without the need to reproduce the server-side annotations. The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior triggers all client validator annotations listed in the relevant managed bean.
		</para>

		<section id="sect-Component_Reference-richvalidator-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior is added as a child element to any input control. The value of the input control must reference a managed bean. The content of the input control validates on the client-side based on registered server-side validators included in the managed bean.
			</para>
			<example id="exam-Component_Reference-richvalidator-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richvalidator-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<note>
				<title>JSF validation tags</title>
				<para>
					JSF validation tags, such as <sgmltag>&lt;f:validateLength&gt;</sgmltag> and <sgmltag>&lt;f:validateDoubleRange&gt;</sgmltag> tags, can be declared alongside <sgmltag>&lt;rich:validator&gt;</sgmltag> behaviors. However, because this duplicates the validation processes at both the view and model level, it is not recommended.
				</para>
			</note>
		</section>

		<section id="sect-Component_Reference-richvalidator-Messages_from_client-side_validators">
			<title>Messages from client-side validators</title>
			<para>
				Use the <sgmltag>&lt;rich:message&gt;</sgmltag> and <sgmltag>&lt;rich:messages&gt;</sgmltag> components to display validation messages. The <varname>for</varname> attribute of the <sgmltag>&lt;rich:message&gt;</sgmltag> component references the <varname>id</varname> identifier of the input control being validated.
			</para>
			<example id="exam-Component_Reference-richvalidator-Messages">
				<title>Messages</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richvalidator-Messages.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					Failed validation checks are reported using <sgmltag>&lt;rich:message&gt;</sgmltag> components. The validation annotations in the managed bean are outlined in <xref linkend="exam-Component_Reference-Validation-JSR-303_validation_annotations" />.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-richvalidator-Messages.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							Failed validation checks are reported using <sgmltag>&lt;rich:message&gt;</sgmltag> components.
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>

		<section id="sect-Component_Reference-richvalidator-Validation_triggers">
			<title>Validation triggers</title>
			<para>
				Use the <varname>event</varname> attribute to specify which event on the input control triggers the validation process. By default, the <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior triggers validation when the input control is changed (<code>event="change"</code>).
			</para>
			<example id="exam-Component_Reference-richvalidator-Validation_triggers">
				<title>Validation triggers</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richvalidator-Validation_triggers.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The <varname>event</varname> attribute is changed to the <literal>keyup</literal> event, such that validation takes place after each key press.
				</para>
			</example>
		</section>

		<section id="sect-Component_Reference-richvalidator-Ajax_fall-backs">
			<title>Ajax fall-backs</title>
			<para>
				If no client-side validation method exists for a registered server-side validator, Ajax fall-back is used. The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior invokes all available client-side validators. If all the client-side validators return valid, RichFaces performs an Ajax request to invoke the remaining validators on the server side.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richvalidator-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-type</parameter>: <classname>org.richfaces.ClientValidatorRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-id</parameter>: <classname>org.richfaces.behavior.ClientValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.ClientValidatorHandler</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-class</parameter>: <classname>org.ajax4jsf.component.behavior.ClientValidatorImpl</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-class</parameter>: <classname>org.richfaces.renderkit.html.ClientValidatorRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<!-- <rich:graphValidator> -->
	<section id="sect-Component_Reference-Validation-richgraphValidator">
		<title><sgmltag>&lt;rich:graphValidator&gt;</sgmltag> object validation</title>
		<para>
			The <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> component is used to wrap a set of input components related to one object. The object defined by the <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> component can then be completely validated. The validation includes all object properties, even those which are not bound to the individual form components. Validation performed in this way allows for cross-field validation in complex forms.
		</para>
		<note>
			<title>Validation without model updates</title>
			<para>
				The <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> component performs a <methodname>clone()</methodname> method on the referenced bean instance during the validation phase. The cloned object is validated and triggers any required validation messages. As such, the model object remains clean, and the lifecycle is interrupted properly after the <emphasis>Process Validations</emphasis> phase. 
			</para>
			<para>
				Ensure the referenced object implements the <interfacename>Cloneable</interfacename> interface, and allows a deep clone if required.
			</para>
		</note>
		
		<section id="sect-Component_Reference-richgraphValidator-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> element must wrap all the input controls that are required to validate the object. The <varname>value</varname> attribute names the bean for the validating object.
			</para>
			<example id="exam-Component_Reference-richgraphValidator-Basic_usage">
				<title>Basic usage</title>
				<para>
					The example demonstrates a simple form for changing a password. The two entered passwords must match, so a <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> component is used for cross-field validation.
				</para>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richgraphValidator-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The input controls validate against the following bean:
				</para>
				<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richgraphValidator-Basic_usage.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					When validation occurs, the whole object is validated against the annotation contstraints. The <varname>@AssertTrue</varname> annotation relies on the <methodname>isPasswordsEqual()</methodname> function to check whether the two entered passwords are equal.
				</para>
				<para>
					If the entered passwords do not match, an error message is displayed:
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-richgraphValidator-Basic_usage.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							Failed validation checks are reported using <sgmltag>&lt;rich:message&gt;</sgmltag> components.
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richgraphValidator-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.GraphValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIGraphValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.GraphValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.GraphValidatorHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
	</section>

</chapter>

