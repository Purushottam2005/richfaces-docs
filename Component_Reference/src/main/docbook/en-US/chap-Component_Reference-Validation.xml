<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Validation">
	<title>Validation</title>
	<para>
		JavaServer Faces 2 provides built-in support for bean validation as per the Java Specification Request JSR-303 standard. As such, containers must validate model objects. Validation is performed at different application tiers according to annotation-based constraints. Refer to <ulink url="http://jcp.org/en/jsr/detail?id=303">http://jcp.org/en/jsr/detail?id=303</ulink> for further details on the JSR-303 specification.
	</para>
	<para>
		<xref linkend="exam-Component_Reference-Validation-JSR-303_validation_annotations" /> shows an example JSF managed bean. The bean includes JSR-303 annotations for validation. Validation annotations defined in this way are registered on components bound to the bean properties, and validation is triggered in the <emphasis>Process Validation</emphasis> phase.
	</para>
	<example id="exam-Component_Reference-Validation-JSR-303_validation_annotations">
		<title>JSR-303 validation annotations</title>
		<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Validation-JSR-303_validation_annotations.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
	</example>
	<para>
		However, this built-in validation is only applied on the server side. RichFaces Client-Side Validation provides validation on the client side without the need to reproduce the server-side annotations. RichFaces Client-Side Validation consists of the <sgmltag>&lt;rich:validator&gt;</sgmltag> and <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> behaviors. 
	</para>
	<note>
		<title>Requirements</title>
		<para>
			Bean validation in both JavaServer Faces and RichFaces requires the <emphasis>JSR-303</emphasis> implementation. The implementation is bundled with <productname>JEE 6 Application Server</productname>.
		</para>
		<para>
			If using <productname>Tomcat</productname> or another simple servlet container, add the <filename>validation-api</filename> Java Archive and a validation provider (such as <productname>Hibernate Validator</productname>) to your application libraries.
		</para>
	</note>
	
	<section id="sect-Component_Reference-Validation-richvalidator">
		<title><sgmltag>&lt;rich:validator&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior adds client-side validation to a control based on registered server-side validators. The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior triggers all client validator annotations listed in the relevant managed bean.
		</para>

		<section id="sect-Component_Reference-richvalidator-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior is added as a child element to any input control. The value of the input control must reference a managed bean. The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior validates the content of the input control on the client-side based on registered server-side validators included in the managed bean.
			</para>
			<example id="exam-Component_Reference-richvalidator-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richvalidator-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior is added to an <sgmltag>&lt;h:inputText&gt;</sgmltag> control. The validator uses the registered server-side validators included in the managed bean referenced by the input control.
				</para>
			</example>
		</section>

		<section id="sect-Component_Reference-richvalidator-Messages_from_client-side_validators">
			<title>Messages from client-side validators</title>
			<para>
				Use the <sgmltag>&lt;rich:message&gt;</sgmltag> and <sgmltag>&lt;rich:messages&gt;</sgmltag> components to display validation messages. The <varname>for</varname> attribute of the <sgmltag>&lt;rich:message&gt;</sgmltag> component references the <varname>id</varname> identifier of the input control being validated.
			</para>
			<example id="exam-Component_Reference-richvalidator-Messages">
				<title>Messages</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richvalidator-Messages.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					Failed validation checks are reported using <sgmltag>&lt;rich:message&gt;</sgmltag> components. The validation annotations in the managed bean are outlined in <xref linkend="exam-Component_Reference-Validation-JSR-303_validation_annotations" />.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-richvalidator-Messages.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							Failed validation checks are reported using <sgmltag>&lt;rich:message&gt;</sgmltag> components.
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>

		<section id="sect-Component_Reference-richvalidator-Validation_triggers">
			<title>Validation triggers</title>
			<para>
				Use the <varname>event</varname> attribute to specify which event on the input control triggers the validation process. By default, the <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior triggers validation when the input control is changed (<code>event="change"</code>).
			</para>
			<example id="exam-Component_Reference-richvalidator-Validation_triggers">
				<title>Validation triggers</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richvalidator-Validation_triggers.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The <varname>event</varname> attribute is changed to the <literal>keyup</literal> event, such that validation takes place after each key press.
				</para>
			</example>
		</section>

		<section id="sect-Component_Reference-richvalidator-Fall-backs">
			<title>Fall-backs</title>
			<para>
				If no client-side validation method exists for a registered server-side validator, Ajax fall-back is used. The <sgmltag>&lt;rich:validator&gt;</sgmltag> behavior invokes all available client-side validators. If all the client-side validators return valid, RichFaces performs an Ajax request to invoke the remaining validators on the server side.
			</para>
			<note>
				<title>JSF client-side validators</title>
				<para>
					JSF client-side validators, such as <sgmltag>&lt;f:validateLength&gt;</sgmltag> and <sgmltag>&lt;f:validateDoubleRange&gt;</sgmltag> validators, can be declared alongside <sgmltag>&lt;rich:validator&gt;</sgmltag> behaviors. However, because this duplicates the validation processes at both the view and model level, it is not recommended.
				</para>
			</note>
		</section>
		
		<section id="sect-Component_Reference-richvalidator-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.validator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.Htmlvalidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.validator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.validatorRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.validatorTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<section id="sect-Component_Reference-Validation-richgraphValidator">
		<title><sgmltag>&lt;rich:graphValidator&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> behavior is used to wrap a group of input components for overall validation with Hibernate Validators. <!--This is different from the <sgmltag>&lt;rich:beanValidator&gt;</sgmltag> component, which is used as a child element to individual input components.-->
		</para>
		
		<section id="sect-Component_Reference-richgraphValidator-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>summary</varname> attribute is used for displaying messages about validation errors.
			</para>
			<example id="exam-Component_Reference-richgraphValidator-richgraphValidator_example">
				<title><sgmltag>&lt;rich:graphValidator&gt;</sgmltag> example</title>
				<para>
					This example shows the validation of a simple form, containing the user's name, email, and age. The <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> behavior wraps the input components to validate them together.
				</para>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richgraphValidator-richgraphValidator_example-0.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The accompanying bean contains the validation data:
				</para>
				<programlisting language="Java" role="JAVA"><xi:include href="extras/exam-Component_Reference-ValidationBean.js" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richgraphValidator_example-richgraphValidator_example_result">
						<title><sgmltag>&lt;rich:graphValidator&gt;</sgmltag> example result</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richgraphValidator-richgraphValidator_example_result.png" format="PNG" width="444" />
							</imageobject>
							<textobject>
								<para>
									The result of the <sgmltag>&lt;rich:graphValidator&gt;</sgmltag> example: three text entry fields with corresponding validation messages.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richgraphValidator-Bean_values">
			<title>Bean values</title>
			<para>
				The optional <varname>value</varname> attribute can be used to define a value bound to the bean. The bean properties are then validated again <emphasis>after</emphasis> the model has been updated.
			</para>
			<example id="exam-Component_Reference-richgraphValidator-Using_the_value_attribute">
				<title>Using the <varname>value</varname> attribute</title>
			
	<programlisting language="XML" role="XML">
	<xi:include href="extras/exam-Component_Reference-richgraphValidator-Using_the_value_attribute.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Using_the_value_attribute-Result_from_using_the_value_attribute">
						<title>Result from using the <varname>value</varname> attribute</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richgraphValidator-Result_from_using_the_value_attribute.png" format="PNG" width="444" />
							</imageobject>
							<textobject>
								<para>
									The result from the example of using the <varname>value</varname> attribute with <sgmltag>&lt;rich:graphValidator&gt;</sgmltag>. The values in the number spinners need to validate before being stored.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richgraphValidator-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.graphValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlgraphValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.graphValidator</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.graphValidatorRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.graphValidatorTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

</chapter>

