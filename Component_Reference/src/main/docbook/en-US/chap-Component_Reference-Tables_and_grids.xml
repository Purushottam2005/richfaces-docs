<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Tables_and_grids">
	<title>Tables and grids</title>
	<!--  In development notification  -->
	<important>
		<title>Documentation in development</title>
		<para>
			Some concepts covered in this chapter may refer to the previous version of <productname>Richfaces</productname>, version 3.3.3. This chapter is scheduled for review to ensure all information is up to date.
		</para>
	</important>
	<para>
		This chapter covers all components related to the display of tables and grids.
	</para>
	
	<!--<a4j:repeat>-->
	<section id="sect-Component_Reference-Actions-a4jrepeat">
		<title><sgmltag>&lt;a4j:repeat&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component is used to iterate changes through a repeated collection of components. It allows specific rows of items to be updated without sending Ajax requests for the entire collection. The <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component forms the basis for many of the tabular components detailed in <xref linkend="chap-Component_Reference-Tables_and_grids" />.
		</para>
		
		<section id="sect-Component_Reference-a4jrepeat-Basic_usage">
			<title>Basic usage</title>
			<para>
				The contents of the collection are determined using Expression Language (<acronym>EL</acronym>). The data model for the contents is specified with the <varname>value</varname> attribute. The <varname>var</varname> attribute names the object to use when iterating through the collection. This object is then referenced in the relevant child components. <xref linkend="exam-Component_Reference-a4jrepeat-a4jrepeat_example" /> shows how to use <sgmltag>&lt;a4j:repeat&gt;</sgmltag> to maintain a simple table.
			</para>
			<example id="exam-Component_Reference-a4jrepeat-a4jrepeat_example">
				<title><sgmltag>&lt;a4j:repeat&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jrepeat-a4jrepeat_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					Each row of a table contains two cells: one showing the item code, and the other showing the item price. The table is generated by iterating through items in the <code>repeatBeans.items</code> data model.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jrepeat-Limited_views_and_partial_updates">
			<title>Limited views and partial updates</title>
			<para>
				The <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component uses other attributes common to iteration components, such as the <varname>first</varname> attribute for specifying the first item for iteration, and the <varname>rows</varname> attribute for specifying the number of rows of items to display.
			</para>
			<para>
				Specific cells, rows, and columns can be updated without sending Ajax requests for the entire collection. Components that cause the change can specify which part of the table to update through the <varname>render</varname> attribute. The <varname>render</varname> attribute specifies which part of a table to update:
			</para>
			<variablelist>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>cellId</replaceable></code></term>
					<listitem>
						<para>
							Update the cell with an identifier of <replaceable>cellId</replaceable> within the row that contains the current component.
						</para>
						<para>
							Instead of a specific identifier, the <replaceable>cellId</replaceable> reference could be a variable: <code><varname>render</varname>=#{<replaceable>bean.cellToUpdate</replaceable>}</code>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:<replaceable>rowId</replaceable></code></term>
					<listitem>
						<para>
							Update the row with an identifier of <replaceable>rowId</replaceable> within the table with an identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=<replaceable>rowId</replaceable></code>.
						</para>
						<para>
							Instead of a specific identifier, the <replaceable>tableId</replaceable> of <replaceable>rowId</replaceable> references could be variables: <code><varname>render</varname>=<replaceable>tableId</replaceable>:#{<replaceable>bean.rowToUpdate</replaceable>}</code>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:<replaceable>rowId</replaceable>:<replaceable>cellId</replaceable></code></term>
					<listitem>
						<para>
							Update the cell with an identifier of <replaceable>cellId</replaceable>, within the row with and identifier of <replaceable>rowId</replaceable>, within the table with an identifier of <replaceable>tableId</replaceable>.
						</para>
						<para>
							Instead of a specific identifier, any of the references could be variables: <code><varname>render</varname>=<replaceable>tableId</replaceable>:#{<replaceable>bean.rowToUpdate</replaceable>}:<replaceable>cellId</replaceable></code>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Alternatively, keywords can be used with the <varname>render</varname> attribute:
			</para>
			<variablelist>
				<varlistentry>
					<term><code><varname>render</varname>=@column</code></term>
					<listitem>
						<para>
							Update the column that contains the current component.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=@row</code></term>
					<listitem>
						<para>
							Update the row that contains the current component.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:@body</code></term>
					<listitem>
						<para>
							Update the body of the table with the identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=@body</code> instead.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:@header</code></term>
					<listitem>
						<para>
							Update the header of the table with the identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=@header</code> instead.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:@footer</code></term>
					<listitem>
						<para>
							Update the footer of the table with the identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=@footer</code> instead.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sect-Component_Reference-a4jrepeat-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.ajax4jsf.Repeat</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.HtmlAjaxRepeat</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Data</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.components.RepeatRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:column>-->
	<section id="sect-Component_Reference-Tables_and_grids-richcolumn">
		<title><sgmltag>&lt;rich:column&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:column&gt;</sgmltag> component facilitates columns in a table. It supports merging columns and rows, sorting, filtering, and customized skinning.
		</para>
		
		<section id="sect-Component_Reference-richcolumn-Basic_usage">
			<title>Basic usage</title>
			<para>
				In general usage, the <sgmltag>&lt;rich:column&gt;</sgmltag> component is used in the same was as the JavaServer Faces (<acronym>JSF</acronym>) <sgmltag>&lt;h:column&gt;</sgmltag> component. It requires no extra attributes for basic usage, as shown in <xref linkend="exam-Component_Reference-richcolumn-Basic_column_example" />.
			</para>
			<example id="exam-Component_Reference-richcolumn-Basic_column_example">
				<title>Basic column example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumn-Basic_column_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Basic_column_example-Basic_column_example">
						<title>Basic column example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumn-Basic_column_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the basic column example, displaying a table with a header row and four columns.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richcolumn-Spanning_columns">
			<title>Spanning columns</title>
			<para>
				Columns can be merged by using the <varname>colspan</varname> attribute to specify how many normal columns to span. The <varname>colspan</varname> attribute is used in conjunction with the <varname>breakBefore</varname> attribute on the next column to determine how the merged columns are laid out. <xref linkend="exam-Component_Reference-richcolumn-Column_spanning_example" />.
			</para>
			<example id="exam-Component_Reference-richcolumn-Column_spanning_example">
				<title>Column spanning example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumn-Column_spanning_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Column_spanning_example-Column_spanning_example">
						<title>Column spanning example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumn-Column_spanning_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the column spanning example, showing the first column (the state flag column) spanning a width of three columns, with the others broken onto the following line.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richcolumn-Spanning_rows">
			<title>Spanning rows</title>
			<para>
				Similarly, the <varname>rowspan</varname> attribute can be used to merge and span rows. Again the <varname>breakBefore</varname> attribute needs to be used on related <sgmltag>&lt;rich:column&gt;</sgmltag> components to define the layout. <xref linkend="exam-Component_Reference-richcolumn-Row_spanning_example" /> and the resulting <xref linkend="figu-Component_Reference-Complex_headers_using_column_groups-Complex_headers_using_column_groups" /> show the first column of the table spanning three rows.
			</para>
			<example id="exam-Component_Reference-richcolumn-Row_spanning_example">
				<title>Row spanning example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumn-Row_spanning_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Row_spanning_example-Row_spanning_example">
						<title>Row spanning example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumn-Row_spanning_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the row spanning example, showing the first column of the table spanning three rows.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
			<para>
				For details on filtering and sorting columns, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" /> and <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richcolumn-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Column</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlColumn</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Column</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.renderkit.CellRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ColumnTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richcolumn-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:column&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
	</section>
	
	<!--<rich:columnGroup>-->
	<section id="sect-Component_Reference-Tables_and_grids-richcolumnGroup">
		<title><sgmltag>&lt;rich:columnGroup&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> component combines multiple columns in a single row to organize complex parts of a table. The resulting effect is similar to using the <varname>breakBefore</varname> attribute of the <sgmltag>&lt;rich:column&gt;</sgmltag> component, but is clearer and easier to follow in the source code.
		</para>
		<section id="sect-Component_Reference-richcolumnGroup-Complex_headers">
			<title>Complex headers</title>
			<para>
				The <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> can also be used to create complex headers in a table. <xref linkend="exam-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups" /> and the resulting <xref linkend="figu-Component_Reference-Complex_headers_using_column_groups-Complex_headers_using_column_groups" /> demonstrate how complex headers can be achieved.
			</para>
			<example id="exam-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups">
				<title>Complex headers using column groups</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Complex_headers_using_column_groups-Complex_headers_using_column_groups">
						<title>Complex headers using column groups</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A table with a complex header, where three of the columns are grouped together under a common title.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richcolumnGroup-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.ColumnGroup</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlColumnGroup</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.ColumnGroup</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ColumnGroupRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ColumnGroupTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richcolumnGroup-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
	</section>
	
	<!-- Removed -->
	<!--<rich:columns>-->
	<!--
	<section id="sect-Component_Reference-Tables_and_grids-richcolumns">
		<title><sgmltag>&lt;rich:columns&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:columns&gt;</sgmltag> component allows for dynamic sets of columns for tables. Columns and rows can be merged, and the look and feel can be highly customized. The component gets a list from a data model and creates a corresponding set of columns in a <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. The <sgmltag>&lt;rich:columns&gt;</sgmltag> component also supports <literal>header</literal> and <literal>footer</literal> facets.
		</para>
		<section id="sect-Component_Reference-richcolumns-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;rich:columns&gt;</sgmltag> component requires the <varname>value</varname> attribute, which points to the data model; the <varname>var</varname> attribute, which holds the current variable for the collection of data; and the <varname>index</varname> attribute, which holds the current counter. The <varname>id</varname> attribute is used for when the individuals rows require identifiers for Ajax events.
			</para>
			<example id="exam-Component_Reference-richcolumns-Basic_columns_example">
				<title>Basic columns example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumns-Basic_columns_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richcolumns-Customizing_the_view">
			<title>Customizing the view</title>
			<para>
				The output can be customized to display specific columns and rows. The <varname>columns</varname> attribute specifies the number of columns. The <varname>rowspan</varname> attribute specifies the number of rows to display; if the attribute is set to <literal>0</literal>, all remaining rows in the table are displayed. The <varname>begin</varname> and <varname>end</varname> attributes are used to specify the first and last zero-based iteration items to display in the table. Columns can be adjusted using the <varname>colspan</varname>, <varname>rowspan</varname>, and <varname>breakBefore</varname> attributes the same as with the <sgmltag>&lt;rich:column&gt;</sgmltag> component.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richcolumns-Using_richcolumns_and_richcolumn_together">
			<title>Using <sgmltag>&lt;rich:columns&gt;</sgmltag> and <sgmltag>&lt;rich:column&gt;</sgmltag> together</title>
			<para>
				The <sgmltag>&lt;rich:columns&gt;</sgmltag> component can be used alongside one or more <sgmltag>&lt;rich:column&gt;</sgmltag> components.
			</para>
			<example id="exam-Component_Reference-richcolumns-Using_richcolumns_and_richcolumn_together">
				<title>Using <sgmltag>&lt;rich:columns&gt;</sgmltag> and <sgmltag>&lt;rich:column&gt;</sgmltag> together</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumns-Using_richcolumns_and_richcolumn_together.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				For details on filtering and sorting columns, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" /> and <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richcolumns-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Column</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ColumnsTagHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richcolumns-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:columns&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
	</section>
	-->
	
	<!-- TODO not in M2 -->
	<!--
	<section id="sect-Component_Reference-Tables_and_grids-richdataFilterSlider">
		<title><sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag></title>
		<itemizedlist>
			<listitem>
				<para>
					<parameter>component-type</parameter>: <classname>org.richfaces.DataFilterSlider</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlDataFilterSlider</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-family</parameter>: <classname>org.richfaces.DataFilterSlider</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>renderer-type</parameter>: <classname>org.richfaces.DataFilterSliderRenderer</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.dataFilterSliderTag</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> components is a slider control that can be used for filtering data in a table. The range and increment of the slider control are defined using the <varname>startRange</varname>, <varname>endRange</varname>, and <varname>increment</varname> attributes.
		</para>
		<para>
			The slider is bound to a <classname>UIData</classname> component specified with the <varname>for</varname> attribute. The <varname>forValRef</varname> attribute refers to the <varname>value</varname> attribute used by the target component, and the <varname>filterBy</varname> attribute specifies which object member to filter according to the slider.
		</para>
		<para>
			The <varname>handleValue</varname> attribute keeps the current handle position on the slider control; filtering is based on this value. The <varname>storeResults</varname> attribute allows the <sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> component to keep the target <classname>UIData</classname> component in session.
		</para>
		<para>
			The event defined with the <varname>submitOnSlide</varname> attribute is triggered when the handle value on the slider is changed.
		</para>
		<example id="exam-Component_Reference-richdataFilterSlider-richdataFilterSlider_example">
			<title><sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> example</title>
			
<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-Tables_and_grids-richdataFilterSlider_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
			<blockquote>
				<figure id="figu-Component_Reference-richdataFilterSlider_example-richdataFilterSlider_example">
					<title><sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> example</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-richdataFilterSlider-richdataFilterSlider_example.png" format="PNG" />
						</imageobject>
						<textobject>
							<para>
								A table of car details, filtered using a slider.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</blockquote>
		</example>
	</section>
	-->
	
	<!--<rich:dataGrid>-->
	<section id="sect-Component_Reference-Tables_and_grids-richdataGrid">
		<title><sgmltag>&lt;rich:dataGrid&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component is used to arrange data objects in a grid. Values in the grid can be updated dynamically from the data model, and Ajax updates can be limited to specific rows. The component supports <literal>header</literal>, <literal>footer</literal>, and <literal>caption</literal> facets.
		</para>
		<para>
			The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component is similar in function to the JavaServer Faces <sgmltag>&lt;h:panelGrid&gt;</sgmltag> component. However, the <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component additionally allows iteration through the data model rather than just aligning child components in a grid layout.
		</para>
		<figure id="figu-Component_Reference-richdataGrid-The_richdataGrid_component">
			<title>The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richdataGrid-The_richdataGrid_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component displaying four elements in two columns, with a <literal>header</literal> facet, and <literal>footer</literal> facet containing a data-scrolling component.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richdataGrid-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component requires the <varname>value</varname> attribute, which points to the data model, and the <varname>var</varname> attribute, which holds the current variable for the collection of data.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richdataGrid-Customizing_the_grid">
			<title>Customizing the grid</title>
			<para>
				 The number of columns for the grid is specifed with the <varname>columns</varname> attribute, and the number of elements to layout among the columns is determined with the <varname>elements</varname> attribute. The <varname>first</varname> attribute references the zero-based element in the data model from which the grid starts.
			</para>
			<example id="exam-Component_Reference-richdataGrid-richdataGrid_example">
				<title><sgmltag>&lt;rich:dataGrid&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richdataGrid-richdataGrid_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richdataGrid_example-richdataGrid_example">
						<title><sgmltag>&lt;rich:dataGrid&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richdataGrid-richdataGrid_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> example, with the <literal>header</literal> facet, <literal>footer</literal> facet, and first element annotated.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<!--  TODO
		<section id="sect-Component_Reference-richdataGrid-Multiple-page_grids">
			<title>Multiple-page grids</title>
			<para>
				The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component can be used with the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component to display multiple pages of grids. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richdataScroller" /> for details on the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component.
			</para>
		</section>
		-->
		
		<section id="sect-Component_Reference-richdataGrid-Patial_updates">
			<title>Patial updates</title>
			<para>
				As <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> the component is based on the <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component, it can be partially updated with Ajax. Refer to <xref linkend="sect-Component_Reference-a4jrepeat-Limited_views_and_partial_updates" /> for details on partially updating the <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richdataGrid-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.DataGrid</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlDataGrid</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.DataGrid</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.DataGridRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.DataGridTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richdataGrid-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
	</section>
	
	<!--<rich:dataScroller>-->
	<section id="sect-Component_Reference-Tables_and_grids-richdataScroller">
		<title><sgmltag>&lt;rich:dataScroller&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component is used for navigating through multiple pages of tables or grids.
		</para>
		<figure id="figu-Component_Reference-richdataScroller-The_richdataScroller_component">
			<title>The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richdataScroller-The_richdataScroller_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component with a <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component contained in the <literal>footer</literal> facet.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richdataScroller-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> must be placed in the <literal>footer</literal> facet of the table or grid it needs to control. Alternatively, use the <varname>for</varname> attribute to bind the parent table or grid to the scroller.
			</para>
			<para>
				The bound table or grid should also have the <varname>rows</varname> attribute defined to limit the number of rows per page.
			</para>
			<para>
				The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component must be re-rendered whenever a filter changes on the bound table, so that the scroller matches the current model for the table.
			</para>
			<example id="exam-Component_Reference-richdataScroller-Basic_usage">
			   <title>Basic usage</title>
			   <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richdataScroller-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richdataScroller-Appearance_and_interactivity">
			<title>Appearance and interactivity</title>
			<para>
				The <varname>page</varname> attribute is a value-binding attribute used to define and save the current page number.
			</para>
			<para>
				The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component provides a range of controllers for scrolling through tables and grids:
			</para>
			<variablelist>
				<varlistentry>
					<term>Controls for scrolling by a specific amount</term>
					<listitem>
						<para>
							The component includes controls for switching to the first page, the last page, the next page, and the previous page, as well as controls for fast-forwarding or rewinding by a set amount. Use the <varname>fastStep</varname> attribute to set the number of pages to skip when fast-forwarding or rewinding.
						</para>
						<para>
							The appearance of these controls can be customized using the following facets: <literal>first</literal>, <literal>last</literal>, <literal>next</literal>, <literal>previous</literal>, <literal>fastforward</literal>, and <literal>rewind</literal>. Additionally, there are facets for the controls' disabled states: <literal>first_disabled</literal>, <literal>last_disabled</literal>, <literal>next_disabled</literal>, <literal>previous_disabled</literal>, <literal>fastforward_disabled</literal>, and <literal>rewind_disabled</literal>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Page controls</term>
					<listitem>
						<para>
							The component also features a series of numbered controls to jump to a specific page. Use the <varname>maxPages</varname> attribute to limit the number of page controls that appear. The current page control is highlighted.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The <varname>pageIndexVar</varname> and <varname>pagesVar</varname> attributes are request-scope variables for the current page and the total number of pages. Use these attributes with the <literal>pages</literal> facet to provide information about the pages of the table, as shown in <xref linkend="exam-Component_Reference-richdataScroller-pages_facet" />.
			</para>
			<example id="exam-Component_Reference-richdataScroller-pages_facet">
				<title><literal>pages</literal> facet</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richdataScroller-pages_facet.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
			   To add optional separators between controls, define the separators with the <literal>controlsSeparator</literal> facet.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richdataScroller-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.DataScroller</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlDataScroller</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.DataScroller</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.DataScrollerRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.DataScrollerTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:dataTable>-->
	<section id="sect-Component_Reference-Tables_and_grids-richdataTable">
		<title><sgmltag>&lt;rich:dataTable&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component is used to render a table, including the table's header and footer. It works in conjunction with the <sgmltag>&lt;rich:column&gt;</sgmltag> and <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> components to list the contents of a data model.
		</para>
		<note>
			<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component does not include extended table features, such as data scrolling, row selection, and column reordering. These features are available as part of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component; refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richextendedDataTable" /> for further details.
			</para>
		</note>
		
		<section id="sect-Component_Reference-richdataTable-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>value</varname> attribute points to the data model, and the <varname>var</varname> attribute specifies a variable to use when iterating through the data model.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richdataTable-Customizing_the_table">
			<title>Customizing the table</title>
			<para>
				 The <varname>first</varname> attribute specifies which item in the data model to start from, and the <varname>rows</varname> attribute specifies the number of items to list. The <literal>header</literal>, <literal>footer</literal>, and <literal>caption</literal> facets can be used to display text, and to customize the appearance of the table through skinning. demonstrates a simple table implementation.
			</para>
			<example id="exam-Component_Reference-richdataTable-richdataTable_example">
				<title><sgmltag>&lt;rich:dataTable&gt;</sgmltag> example</title>
			
	<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-Tables_and_grids-richdataTable_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richdataTable_example-richdataTable_example">
						<title><sgmltag>&lt;rich:dataTable&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richdataTable_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A data table made using the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
			<para>
				For details on filtering and sorting data tables, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" /> and <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richdataTable-Partial_updates">
			<title>Partial updates</title>
			<para>
				As <sgmltag>&lt;rich:dataTable&gt;</sgmltag> the component is based on the <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component, it can be partially updated with Ajax. Refer to <xref linkend="sect-Component_Reference-a4jrepeat-Limited_views_and_partial_updates" /> for details on partially updating the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richdataTable-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.DataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.DataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.DataTableRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.DataTableTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richdataTable.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
		
	</section>
	
	<!--<rich:extendedDataTable>-->
	<section id="sect-Component_Reference-Tables_and_grids-richextendedDataTable">
		<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component builds on the functionality of the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component, adding features such as data scrolling, row and column selection, and rearranging of columns.
		</para>
		<para>
			The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component includes the following attributes not included in the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<varname>frozenColumns</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>height</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>noDataLabel</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>onselectionchange</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>selectedClass</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>selection</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>selectionMode</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>tableState</varname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component does <emphasis>not</emphasis> include the following attributes available with the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<varname>columns</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>columnsWidth</varname>
				</para>
			</listitem>
		</itemizedlist>
		<section id="sect-Component_Reference-richextendedDataTable-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic use of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component requires the <varname>value</varname> and <varname>var</varname> attributes, the same as with the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richdataTable" /> for details.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richextendedDataTable-Table_appearance">
			<title>Table appearance</title>
			<para>
				The <varname>height</varname> attribute defines the height of the table on the page. This is set to <literal>100%</literal> by default. The width of the table can be set by using the <varname>width</varname> attribute. As with the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component, the look of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can be customized and skinned using the <literal>header</literal>, <literal>footer</literal>, and <literal>caption</literal> facets.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richextendedDataTable-Extended_features">
			<title>Extended features</title>
			<example id="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example">
				<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-Tables_and_grids-richextendedDataTable_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richextendedDataTable_example-richextendedDataTable_example">
						<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-richextendedDataTable_example.png" format="PNG" width="444" />
							</imageobject>
							<textobject>
								<para>
									A data table made using the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component. It features scrolling data, column sorting, and a column filter.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
			<para>
				<xref linkend="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example" /> shows an example extended data table. The implementation features a scrolling data table, selection of one or more rows, sorting by columns, grouping by column, and a filter on the <guilabel>Name</guilabel> column.
			</para>
			
			<section id="sect-Component_Reference-richextendedDataTable-Row_selection">
				<title>Row selection</title>
				<para>
					Row selection is determined by the <varname>selectionMode</varname> attribute. Setting the attribute to <literal>none</literal> allows for no row selection capability. Setting the <varname>selectionMode</varname> attribute to <literal>single</literal> allows the user to select a single row at a time using the mouse. With the <varname>selectionMode</varname> attribute set to <literal>multi</literal>, the user can select multiple rows by holding down the <keycap function="shift">Shift</keycap> or <keycap function="control">Ctrl</keycap> keys while clicking. The <varname>selection</varname> attribute points to the object that tracks which rows are selected. <xref linkend="figu-Component_Reference-richextendedDataTable-Selecting_multiple_rows" /> shows the table from the example with multiple rows selected.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Selecting_multiple_rows">
					<title>Selecting multiple rows</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Selecting_multiple_rows.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								The example table with rows numbered 1, 2, 3, and 5 selected.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			
			<section id="sect-Component_Reference-richextendedDataTable-Filtering">
				<title>Filtering</title>
				<para>
					<!--
					The example uses the <literal>filter</literal> facet of the <sgmltag>&lt;rich:column&gt;</sgmltag> component to display the text field.
					-->
					A user can type their criteria into the text field to customize the filter of the column below. For full details on filtering tables, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" />.
				</para>
			</section>
			
			<section id="sect-Component_Reference-richextendedDataTable-Sorting">
				<title>Sorting</title>
				<!--
				<para>
					When hovering the mouse over a column header, a menu button appears to the right-hand side, as shown in <xref linkend="figu-Component_Reference-richextendedDataTable-Column_menu" />. This menu allows the user to sort the contents of the column, group the table by the column, or hide and show columns.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Column_menu">
					<title>Column menu</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Column_menu.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								The menu for sorting, grouping, and hiding or showing columns.
							</para>
						</textobject>
					</mediaobject>
				</figure>
				-->
				<para>
					<!--
					Each column can allow sorting by setting the <sgmltag>&lt;rich:column&gt;</sgmltag> component's <varname>sortable</varname> attribute to <literal>true</literal>.
					-->
					Each column can be used to sort the contents of the table. The value of the data model to sort by is specified with the <varname>sortBy</varname> attribute. Columns can be quickly sorted either ascending or descending by clicking on the directional icon next to the column title. The directional icons are defined in each <sgmltag>&lt;rich:column&gt;</sgmltag> component with the <varname>sortIconAscending</varname> and <varname>sortIconDescending</varname> attributes, for ascending and descending icons respectively. For full details on sorting tables, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
				</para>
			</section>
			
			<!--
			<section id="sect-Component_Reference-richextendedDataTable-Grouping">
				<title>Grouping</title>
				<para>
					Grouping the table's entries by a column will organize the table into collapsible sections, as shown in <xref linkend="figu-Component_Reference-richextendedDataTable-Grouping_table_entries_by_column" />.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Grouping_table_entries_by_column">
					<title>Grouping table entries by column</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Grouping_table_entries_by_column.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								A table with entries grouped by the <guilabel>Group</guilabel> column.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			
			<section id="sect-Component_Reference-richextendedDataTable-Hiding_columns">
				<title>Hiding columns</title>
				<para>
					The checkboxes in the column menu under the <guisubmenu>Columns</guisubmenu> sub-menu will hide or show the respective columns, as shown in <xref linkend="figu-Component_Reference-richextendedDataTable-Hiding_columns" />.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Hiding_columns">
					<title>Hiding columns</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Hiding_columns.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								The <guilabel>Date</guilabel> and <guilabel>Group</guilabel> columns are hidden from the table.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			-->
			
			<section id="sect-Component_Reference-richextendedDataTable-Rearranging_columns">
				<title>Rearranging columns</title>
				<para>
					Columns in a <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can be rearranged by the user by dragging each column to a different position. The <varname>label</varname> attribute for the <sgmltag>&lt;rich:column&gt;</sgmltag> component is displayed during dragging, as shown in
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Dragging_columns">
					<title>Dragging columns</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Dragging_columns.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								Dragging the <guilabel>Name</guilabel> column rearranges the order of the columns.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			
			<section id="sect-Component_Reference-richextendedDataTable-Saving_the_state">
				<title>Saving the state</title>
				<para>
					Once the contents of the table have been rearranged and customized by the user, the <varname>tableState</varname> attribute can be used to preserve the customization so it can be restored later. The <varname>tableState</varname> attribute points to a backing-bean property which can in turn be saved to a database separate from standard JSF state-saving mechanisms.
				</para>
			</section>
			
		</section>
		
		<section id="sect-Component_Reference-richextendedDataTable-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.ExtendedDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlExtendedDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.ExtendedDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ExtendedDataTableRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ExtendedDataTableTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richextendedDataTable-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richextendedDataTable.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<!--  TODO
	<section id="sect-Component_Reference-Tables_and_grids-richsubTable">
		<title><sgmltag>&lt;rich:subTable&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	 -->
	
	<!--<rich:list>-->
	<section id="sect-Component_Reference-Tables_and_grids-richlist">
		<title><sgmltag>&lt;rich:list&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:list&gt;</sgmltag> component renders a list of items. The list can be an numerically ordered list, an un-ordered bullet-point list, or a data definition list. The component uses a data model for managing the list items, which can be updated dynamically.
		</para>
		
		<section id="sect-Component_Reference-richlist-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>var</varname> attribute names a variable for iterating through the items in the data model. The items to iterate through are determined with the <varname>value</varname> attribute by using EL (Expression Language).
			</para>
		</section>
		
		<section id="sect-Component_Reference-richlist-Type_of_list">
			<title>Type of list</title>
			<para>
				By default, the list is displayed as an un-ordered bullet-point list. The <varname>type</varname> attribute is used to specify different list types:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>unordered</literal></term>
					<listitem>
						<para>
							The default presentation. The list is presented as a series of bullet-points, similar to the <sgmltag>&lt;ul&gt;</sgmltag> HTML element.
						</para>
						<figure id="figu-Component_Reference-richlist-Unordered_list">
							<title>Unordered list</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/figu-Component_Reference-richlist-Unordered_list.png" format="PNG" />
								</imageobject>
								<textobject>
									<para>
										A list of cars displayed in a list with bullet points.
									</para>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ordered</literal></term>
					<listitem>
						<para>
							The list is presented as a numbered series of items, similar to the <sgmltag>&lt;ol&gt;</sgmltag> HTML element.
						</para>
						<figure id="figu-Component_Reference-richlist-Ordered_list">
							<title>Ordered list</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/figu-Component_Reference-richlist-Ordered_list.png" format="PNG" />
								</imageobject>
								<textobject>
									<para>
										A list of cars displayed in a numbered list.
									</para>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>definitions</literal></term>
					<listitem>
						<para>
							The list is presented as a series of data definitions. Part of the data model, specified as the term, is listed prominently. The other associated data is listed after each term.
						</para>
						<figure id="figu-Component_Reference-richlist-Data_definition_list">
							<title>Data definition list</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/figu-Component_Reference-richlist-Data_definition_list.png" format="PNG" />
								</imageobject>
								<textobject>
									<para>
										A list of cars with their price and mileage displayed as a data definition.
									</para>
								</textobject>
							</mediaobject>
						</figure>
						<para>
							The term is marked using the <literal>term</literal> facet. The facet is required for all definition lists. Use of the facet is shown in <xref linkend="exam-Component_Reference-richlist-Data_definition_list" />.
						</para>
						<example id="exam-Component_Reference-richlist-Data_definition_list">
							<title>Data definition list</title>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richlist-Data_definition_list.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</example>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<!--
		<section id="sect-Component_Reference-richlist-Bullet_point_type">
			<title>Bullet point type</title>
			<para>
				The <varname>type</varname> attribute refers to the appearance of the bullet points. The values of the attribute correspond to the <varname>type</varname> parameter for the <sgmltag>&lt;ul&gt;</sgmltag> HTML element:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>circle</literal></term>
					<listitem>
						<para>
							Displays an unfilled circle as a bullet point.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>disc</literal></term>
					<listitem>
						<para>
							Displays a filled disc as a bullet point.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>square</literal></term>
					<listitem>
						<para>
							Displays a square as a bullet point.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		-->
		
		<!--
		<section id="sect-Component_Reference-richdataOrderedList-Numeration_type">
			<title>Numeration type</title>
			<para>
				The <varname>type</varname> attribute defines the appearance of the numerating list markers for the list. The possible values for the <varname>type</varname> attribute are as follows:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>A</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>A</wordasword>, <wordasword>B</wordasword>, <wordasword>C</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>a</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>a</wordasword>, <wordasword>b</wordasword>, <wordasword>c</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>I</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>I</wordasword>, <wordasword>II</wordasword>, <wordasword>III</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>i</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>i</wordasword>, <wordasword>ii</wordasword>, <wordasword>iii</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>1</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>1</wordasword>, <wordasword>2</wordasword>, <wordasword>3</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		-->
		
		<section id="sect-Component_Reference-richlist-Bullet_and_numeration_appearance">
			<title>Bullet and numeration appearance</title>
			<para>
				The appearance of bullet points for unordered lists or numeration for ordered lists can be customized through CSS, using the <property>list-style-type</property> property.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richlist-Customizing_the_list">
			<title>Customizing the list</title>
			<para>
				The <varname>first</varname> attribute specifies which item in the data model to start from, and the <varname>rows</varname> attribute specifies the number of items to list. The <varname>title</varname> attribute is used for a floating tool-tip. <xref linkend="exam-Component_Reference-richlist-richlist_example" /> shows a simple example using the <sgmltag>&lt;rich:list&gt;</sgmltag> component.
			</para>
			<example id="exam-Component_Reference-richlist-richlist_example">
				<title><sgmltag>&lt;rich:list&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richlist-richlist_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richlist-richlist_example">
						<title><sgmltag>&lt;rich:list&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richlist-Unordered_list.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A list of cars displayed in a list with bullet points.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richlist-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.List</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlList</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.List</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ListRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ListTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richlist-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richlist.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<section id="sect-Component_Reference-Tables_and_grids-Table_filtering">
		<title>Table filtering</title>
		<!--  In development notification  -->
		<important>
			<title>Documentation in development</title>
			<para>
				This section is currently under development. Any features it describes may not be available in the current release of RichFaces.
			</para>
		</important>

		<para>
			Tables entries can be filtered by the user through either the basic method built in to the <sgmltag>&lt;rich:column&gt;</sgmltag> component, or by defining external filters. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richcolumn" /> for details on using the <sgmltag>&lt;rich:column&gt;</sgmltag> component in tables.
		</para>
		<section id="sect-Component_Reference-Table_filtering-Basic_filtering">
			<title>Basic filtering</title>
			<para>
				The built-in filtering abilities of the <sgmltag>&lt;rich:column&gt;</sgmltag> component allow the user to enter text as a filtering value. The table displays only those entries that begin with the filter value.
			</para>
			<para>
				Set the <varname>filterValue</varname> attribute to point to the value used to filter the column. This can be either an initial filtering value on the page, or a value binding on the server. The <varname>filterValue</varname> value is then used with the JavaScript <function>startsWith()</function> method to filter the column entries based on the data specified with the <varname>filterBy</varname> attribute. Expressions in the <varname>filterBy</varname> attribute must refer to the variable declared in the table's <varname>var</varname> attribute, which is used to fill the contents of the table.
			</para>
			<para>
				The filter is processed and the table is rendered when the <literal>onblur</literal> event occurs for the column. This can be changed by defining a different event with the <varname>filterEvent</varname> attribute. For example, to implement live updating such that the filter refreshes after every keystroke, set <code>filterEvent="keyup"</code>.
			</para>
			<example id="exam-Component_Reference-Table_filtering-Basic_filtering">
				<title>Basic filtering</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_filtering-Basic_filtering.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses the basic filtering method on both columns in the table.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-Table_filtering-Basic_filtering.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A table of state capitals filtered by states beginning with the letter "<wordasword>n</wordasword>".
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>
		<section id="sect-Component_Reference-Table_filtering-External_filtering">
			<title>External filtering</title>
			<para>
				If you require more advanced filtering using custom functions or expressions, use the external filtering properties of the <sgmltag>&lt;rich:column&gt;</sgmltag> component.
			</para>
			<para>
				Use the <varname>filterExpression</varname> attribute to define an expression that can be evaluated as a boolean value. The expression checks if each table entry satisfies the filtering condition when the table is rendered.
			</para>
			<para>
				Use the <varname>filterMethod</varname> attribute to define a method binding. The method needs to accept an object as a parameter and return a boolean value. Similar to the <varname>filterExpression</varname> attribute, the table is rendered only with those entries that satisfy the filtering condition. By defining a custom filtering method, you can implement complex business logic to filter a table.
			</para>
			<example id="exam-Component_Reference-Table_filtering-External_filtering">
				<title>External filtering</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_filtering-External_filtering.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses a filter expression on the first column and a filter method on the second column.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-Table_filtering-External_filtering.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A table of state capitals filtered by states beginning with the letter "<wordasword>a</wordasword>", further filtered to those states in the GMT-5 time zone.
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>
	</section>
	
	<section id="sect-Component_Reference-Tables_and_grids-Table_sorting">
		<title>Table sorting</title>
		<!--  In development notification  -->
		<important>
			<title>Documentation in development</title>
			<para>
				This section is currently under development. Any features it describes may not be available in the current release of RichFaces.
			</para>
		</important>

		<para>
			Tables entries can be sorted by the user through either the basic method built in to the <sgmltag>&lt;rich:column&gt;</sgmltag> component, or by defining external sorting algorithms. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richcolumn" /> for details on using the <sgmltag>&lt;rich:column&gt;</sgmltag> component in tables.
		</para>
		<note>
			<title>Sorting non-English tables</title>
			<para>
				To sort a table whose contents are not in English, add the <literal>org.richfaces.datatableUsesViewLocale</literal> context parameter to the project's <filename>web.xml</filename> settings file. Set the value of the context parameter to <literal>true</literal>.
			</para>
		</note>

		<section id="sect-Component_Reference-Tables_and_grids-Basic_sorting">
			<title>Basic sorting</title>
			<para>
				The built-in sorting functionality of the <sgmltag>&lt;rich:column&gt;</sgmltag> component allows a user to click the header of a column to sort it in ascending or descending order.
			</para>
			<para>
				Set the <varname>sortBy</varname> attribute to indicate which value to use when sorting the column. Expressions in the <varname>sortBy</varname> attribute must refer to the variable declared in the table's <varname>var</varname> attribute, which is used to fill the contents of the table.
			</para>
			<example id="exam-Component_Reference-Table_sorting-Basic_sorting">
				<title>Basic sorting</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_sorting-Basic_sorting.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses the basic sorting method on both columns in the table.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-Table_sorting-Basic_sorting.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A table of state capitals sorted alphabetically by state.
						</para>
					</textobject>
				</mediaobject>
			</example>
			<para>
				Use the <varname>sortOrder</varname> attribute to set how the table's contents are sorted when it is first loaded. By default, the value of the <varname>sortOrder</varname> attribute is <literal>unsorted</literal>, so that table entries appear in the order the are contained in the data model. Use <code>sortOrder="ascending"</code> to sort the entries in ascending alphabetical or numerical order. Use <code>sortOrder="descending"</code> to sort the entries in descending alphabetical or numerical order. The <varname>sortOrder</varname> attribute can also be used to externally set the sort order of a table when using the external sorting method; refer to <xref linkend="sect-Component_Reference-Table_sorting-External_sorting" /> for details.
			</para>
			<para>
				Use the <varname>sortMode</varname> attribute to determine how multiple columns are sorted. By default, the value of the <varname>sortMode</varname> attribute is <literal>single</literal>, so tables are only sorted by a single column. Each time the header of a column is clicked the entire table is re-sorted according to that column. Set <code>sortMode="multiple"</code> to allow tables to be sorted by a primary column, then by a secondary column, and so on.
			</para>
		</section>

		<section id="sect-Component_Reference-Table_sorting-External_sorting">
			<title>External sorting</title>
			<para>
				If you require more advanced sorting using custom functions or expressions, use the external sorting properties of the <sgmltag>&lt;rich:column&gt;</sgmltag> component.
			</para>
			<para>
				Deactivate the built-in sorting by setting <code>selfSorted="false"</code> for the <sgmltag>&lt;rich:column&gt;</sgmltag> component. You can then bind the <varname>sortOrder</varname> attribute to bean properties and manage the sorting order externally.
			</para>
			<example id="exam-Component_Reference-Table_sorting-External_sorting">
				<title>External sorting</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_sorting-External_sorting.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses an external control to manage the table's sorting.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-Table_sorting-External_sorting.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A table of vehicle details, sorted using an external control.
						</para>
					</textobject>
				</mediaobject>
			</example>
			<para>
				When using the <code>sortMode="multiple"</code> configuration, set the priority by which columns are sorted with the <varname>sortPriorities</varname> attribute.
			</para>
			<para>
				Use the <varname>sortExpression</varname> attribute to define a bean property to use for sorting the column. The expression checks each table entry against the sorting expression during rendering.
			</para>
		</section>
	</section>

</chapter>

