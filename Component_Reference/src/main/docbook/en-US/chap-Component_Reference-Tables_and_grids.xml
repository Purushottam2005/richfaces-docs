<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Tables_and_grids">
	<title>Tables and grids</title>
	<para>
		This chapter covers all components related to the display of tables and grids.
	</para>

	<!--<a4j:repeat>-->
	<section id="sect-Component_Reference-Actions-a4jrepeat">
		<title><sgmltag>&lt;a4j:repeat&gt;</sgmltag></title>
		<para>
			The non-visual <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component is used to iterate through a data model. The component renders child content for every iteration according to the current object data.
		</para>
		<para>
			The <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component extends the standard <classname>UIRepeat</classname> component to allow partial updates within iterations while sending Ajax requests. The component acts as a base for all the data iteration components detailed in this chapter.
		</para>

		<section id="sect-Component_Reference-a4jrepeat-Basic_usage">
			<title>Basic usage</title>
			<para>
				The contents of the collection are determined using Expression Language (<acronym>EL</acronym>). The data model for the contents is specified with the <varname>value</varname> attribute. The <varname>var</varname> attribute names the object to use when iterating through the collection. This object is then referenced in the relevant child components. <xref linkend="exam-Component_Reference-a4jrepeat-a4jrepeat_example" /> shows how to use <sgmltag>&lt;a4j:repeat&gt;</sgmltag> to maintain a simple table.
			</para>
			<example id="exam-Component_Reference-a4jrepeat-a4jrepeat_example">
				<title><sgmltag>&lt;a4j:repeat&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jrepeat-a4jrepeat_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					Each row of a table contains two cells: one showing the item code, and the other showing the item price. The table is generated by iterating through items in the <code>repeatBeans.items</code> data model.
				</para>
			</example>
		</section>

		<section id="sect-Component_Reference-a4jrepeat-Limited_views_and_partial_updates">
			<title>Limited views and partial updates</title>
			<para>
				The <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component uses other attributes common to iteration components, such as the <varname>first</varname> attribute for specifying the first item for iteration, and the <varname>rows</varname> attribute for specifying the number of rows of items to display.
			</para>
			<para>
				Specific cells, rows, and columns can be updated without sending Ajax requests for the entire collection. Components that cause the change can specify which part of the table to update through the <varname>render</varname> attribute. The <varname>render</varname> attribute specifies which part of a table to update. The updated parts relate to where the action component is placed relative to the table:
			</para>
			<variablelist>
				<varlistentry>
					<term>Action components inside the table</term>
					<listitem>
						<para>
							Use <code><varname>render</varname>=<replaceable>componentID</replaceable></code> where the component identified by <replaceable>componentID</replaceable> is in the same row as the action component. The action component updates the single specified component, as demonstrated in <xref linkend="exam-Component_Reference-a4jrepeat-Update_a_single_component" />.
						</para>
						<example id="exam-Component_Reference-a4jrepeat-Update_a_single_component">
							<title>Update a single component</title>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jrepeat-Update_a_single_component.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</example>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Action components outside the table</term>
					<listitem>
						<para>
							Use <code><varname>render</varname>=<replaceable>tableId</replaceable>:<replaceable>rowId</replaceable>:<replaceable>cellId</replaceable></code> to specify the cell to update. The action component updates the cell with an identifier of <replaceable>cellId</replaceable>, which is within the row with an identifier of <replaceable>rowId</replaceable>, which is within the table with an identifier of <replaceable>tableId</replaceable>.
						</para>
						<para>
							Instead of a specific identifier, any of the references could be variables, as demonstrated in <xref linkend="exam-Component_Reference-a4jrepeat-Use_variables_to_specify_references" />.
						</para>
						<example id="exam-Component_Reference-a4jrepeat-Use_variables_to_specify_references">
							<title>Use variables to specify references</title>
							<programlisting><varname>render</varname>=<replaceable>tableId</replaceable>:@rows(<replaceable>bean.rowToUpdate</replaceable>):<replaceable>cellId</replaceable></programlisting>
							<para>
								The <function>@rows</function> function accepts a collection of row keys to be updated.
                                Similarly the <varname>table@body</varname> shorthand can be used to specify that the entire table body should be updated.
							</para>
						</example>
					</listitem>
				</varlistentry>
			</variablelist>

			<!-- component specific
			<para>
				Alternatively, keywords can be used with the <varname>render</varname> attribute:
			</para>
			<variablelist>
				<varlistentry>
					<term><code><varname>render</varname>=@column</code></term>
					<listitem>
						<para>
							Update the column that contains the current component.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=@row</code></term>
					<listitem>
						<para>
							Update the row that contains the current component.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:@body</code></term>
					<listitem>
						<para>
							Update the body of the table with the identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=@body</code> instead.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:@header</code></term>
					<listitem>
						<para>
							Update the header of the table with the identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=@header</code> instead.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code><varname>render</varname>=<replaceable>tableId</replaceable>:@footer</code></term>
					<listitem>
						<para>
							Update the footer of the table with the identifier of <replaceable>tableId</replaceable>. Alternatively, if the current component is contained within the table, use <code><varname>render</varname>=@footer</code> instead.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			-->
		</section>

		<section id="sect-Component_Reference-a4jrepeat-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Repeat</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIRepeat</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Data</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.RepeatRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.html.RepeatHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<!--<rich:dataTable>-->
	<section id="sect-Component_Reference-Tables_and_grids-richdataTable">
		<title><sgmltag>&lt;rich:dataTable&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component is used to render a table, including the table's caption. It works in conjunction with the <sgmltag>&lt;rich:column&gt;</sgmltag> and <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> components to list the contents of a data model.
		</para>
		<note>
			<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component does not include extended table features, such as data scrolling (including lazy Ajax loading), row selection, and column reordering. These features are available as part of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component; refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richextendedDataTable" /> for further details.
			</para>
		</note>

		<section id="sect-Component_Reference-richdataTable-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>value</varname> attribute points to the data model, and the <varname>var</varname> attribute specifies a variable to use when iterating through the data model.
			</para>
			<para>
				In addition, the table requires a set of <sgmltag>&lt;rich:column&gt;</sgmltag> components to define the content of the table.
			</para>
		</section>

		<section id="sect-Component_Reference-richdataTable-Customizing_the_table">
			<title>Customizing the table</title>
			<para>
				 The <varname>first</varname> attribute specifies which item in the data model to start from, and the <varname>rows</varname> attribute specifies the number of items to list. The <literal>header</literal>, <literal>footer</literal>, and <literal>caption</literal> facets can be used to display text, and to customize the appearance of the table through skinning. demonstrates a simple table implementation.
			</para>
            <para>
				 The <varname>keepSaved</varname> attribute defines whether this iteration component will reset saved children's state before rendering. By default, the state is reset if there are no faces messages with severity error or higher.
			</para>
			<example id="exam-Component_Reference-richdataTable-richdataTable_example">
				<title><sgmltag>&lt;rich:dataTable&gt;</sgmltag> example</title>

	<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-Tables_and_grids-richdataTable_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richdataTable_example-richdataTable_example">
						<title><sgmltag>&lt;rich:dataTable&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richdataTable_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A data table made using the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
			<para>
				For details on filtering and sorting data tables, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" /> and <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
			</para>
		</section>

		<section id="sect-Component_Reference-richdataTable-Partial_updates">
			<title>Partial updates</title>
			<para>
				As <sgmltag>&lt;rich:dataTable&gt;</sgmltag> the component is based on the <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component, it can be partially updated with Ajax. Refer to <xref linkend="sect-Component_Reference-a4jrepeat-Limited_views_and_partial_updates" /> for details on partially updating the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component.
			</para>
			<para>
				The <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component supports master-detail markup with collapsible sub-table sections. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richcollapsibleSubTable" /> for full details on using the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component.
			</para>
			<para>
				Use the <varname>rows</varname> attribute to specify the number of rows to show at a time. The table is then presented in pages of rows. Pages can be navigated by using a control such as the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richdataScroller" /> for full details on using the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component.
			</para>
		</section>

		<section id="sect-Component_Reference-richdataTable-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>expandAllSubTables()</function></term>
		         <listitem>
		            <para>
		               Expand any sub-tables contained in the data table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>collapseAllSubTables()</function></term>
		         <listitem>
		            <para>
		               Collapse any sub-tables contained in the data table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>switchSubTable(subtableId)</function></term>
		         <listitem>
		            <para>
		               Switch the expanded or collapsed state of any sub-tables contained in the data table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>filter(columnId, newFilterValue, [isClearPreviousFilters])</function></term>
		         <listitem>
		            <para>
		               Filter the table based on the column specified with the <parameter>columnId</parameter> parameter. Use the <parameter>newFilterValue</parameter> parameter as the filter value. The optional <parameter>isClearPreviousFilters</parameter> parameter is a boolean value which, if set to <literal>true</literal>, will clear any previous filters applied to the table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>sort(columnId, [direction], [isClearPreviousSorting])</function></term>
		         <listitem>
		            <para>
		               Sort the table based on the column specified with the <parameter>columnId</parameter> parameter. The option <parameter>direction</parameter> parameter specifies whether to sort in ascending or descending order. The optional <parameter>isClearPreviousSorting</parameter> parameter is a boolean value which, if set to <literal>true</literal>, will clear any previous sorting applied to the table.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>

		<section id="sect-Component_Reference-richdataTable-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.DataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Data</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.DataTableRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.DataTableHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richdataTable.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>

	</section>

	<!--<rich:column>-->
	<section id="sect-Component_Reference-Tables_and_grids-richcolumn">
		<title><sgmltag>&lt;rich:column&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:column&gt;</sgmltag> component facilitates columns in a table. It supports merging columns and rows, sorting, filtering, and customized skinning.
		</para>

		<section id="sect-Component_Reference-richcolumn-Basic_usage">
			<title>Basic usage</title>
			<para>
				In general usage, the <sgmltag>&lt;rich:column&gt;</sgmltag> component is used in the same was as the JavaServer Faces (<acronym>JSF</acronym>) <sgmltag>&lt;h:column&gt;</sgmltag> component. It requires no extra attributes for basic usage, as shown in <xref linkend="exam-Component_Reference-richcolumn-Basic_column_example" />.
			</para>
			<example id="exam-Component_Reference-richcolumn-Basic_column_example">
				<title>Basic column example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumn-Basic_column_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Basic_column_example-Basic_column_example">
						<title>Basic column example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumn-Basic_column_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the basic column example, displaying a table with a header row and four columns.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>

		<section id="sect-Component_Reference-richcolumn-Spanning_columns">
			<title>Spanning columns</title>
			<para>
				Columns can be merged by using the <varname>colspan</varname> attribute to specify how many normal columns to span. The <varname>colspan</varname> attribute is used in conjunction with the <varname>breakRowBefore</varname> attribute on the next column to determine how the merged columns are laid out. <xref linkend="exam-Component_Reference-richcolumn-Column_spanning_example" />.
			</para>
			<example id="exam-Component_Reference-richcolumn-Column_spanning_example">
				<title>Column spanning example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumn-Column_spanning_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Column_spanning_example-Column_spanning_example">
						<title>Column spanning example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumn-Column_spanning_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the column spanning example, showing the first column (the state flag column) spanning a width of three columns, with the others broken onto the following line.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>

		<section id="sect-Component_Reference-richcolumn-Spanning_rows">
			<title>Spanning rows</title>
			<para>
				Similarly, the <varname>rowspan</varname> attribute can be used to merge and span rows. Again the <varname>breakRowBefore</varname> attribute needs to be used on related <sgmltag>&lt;rich:column&gt;</sgmltag> components to define the layout. <xref linkend="exam-Component_Reference-richcolumn-Row_spanning_example" /> and the resulting <xref linkend="figu-Component_Reference-Complex_headers_using_column_groups-Complex_headers_using_column_groups" /> show the first column of the table spanning three rows.
			</para>
			<example id="exam-Component_Reference-richcolumn-Row_spanning_example">
				<title>Row spanning example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumn-Row_spanning_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Row_spanning_example-Row_spanning_example">
						<title>Row spanning example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumn-Row_spanning_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the row spanning example, showing the first column of the table spanning three rows.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
			<para>
				For details on filtering and sorting columns, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" /> and <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
			</para>
		</section>

		<section id="sect-Component_Reference-richcolumn-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Column</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIColumn</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Column</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<!-- TODO not in CR1
		<section id="sect-Component_Reference-richcolumn-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:column&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
		-->
	</section>

	<!--<rich:columnGroup>-->
	<section id="sect-Component_Reference-Tables_and_grids-richcolumnGroup">
		<title><sgmltag>&lt;rich:columnGroup&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> component combines multiple columns in a single row to organize complex parts of a table. The resulting effect is similar to using the <varname>breakRowBefore</varname> attribute of the <sgmltag>&lt;rich:column&gt;</sgmltag> component, but is clearer and easier to follow in the source code.
		</para>
		<section id="sect-Component_Reference-richcolumnGroup-Complex_headers">
			<title>Complex headers</title>
			<para>
				The <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> can also be used to create complex headers in a table. <xref linkend="exam-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups" /> and the resulting <xref linkend="figu-Component_Reference-Complex_headers_using_column_groups-Complex_headers_using_column_groups" /> demonstrate how complex headers can be achieved.
			</para>
			<example id="exam-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups">
				<title>Complex headers using column groups</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-Complex_headers_using_column_groups-Complex_headers_using_column_groups">
						<title>Complex headers using column groups</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richcolumnGroup-Complex_headers_using_column_groups.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A table with a complex header, where three of the columns are grouped together under a common title.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>

		<section id="sect-Component_Reference-richcolumnGroup-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.ColumnGroup</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIColumnGroup</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.ColumnGroup</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ColumnGroupRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<!-- TODO not in CR1
		<section id="sect-Component_Reference-richcolumnGroup-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:columnGroup&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
		-->
	</section>

	<!-- Removed -->
	<!--<rich:columns>-->
	<!--
	<section id="sect-Component_Reference-Tables_and_grids-richcolumns">
		<title><sgmltag>&lt;rich:columns&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:columns&gt;</sgmltag> component allows for dynamic sets of columns for tables. Columns and rows can be merged, and the look and feel can be highly customized. The component gets a list from a data model and creates a corresponding set of columns in a <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. The <sgmltag>&lt;rich:columns&gt;</sgmltag> component also supports <literal>header</literal> and <literal>footer</literal> facets.
		</para>
		<section id="sect-Component_Reference-richcolumns-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;rich:columns&gt;</sgmltag> component requires the <varname>value</varname> attribute, which points to the data model; the <varname>var</varname> attribute, which holds the current variable for the collection of data; and the <varname>index</varname> attribute, which holds the current counter. The <varname>id</varname> attribute is used for when the individuals rows require identifiers for Ajax events.
			</para>
			<example id="exam-Component_Reference-richcolumns-Basic_columns_example">
				<title>Basic columns example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumns-Basic_columns_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>

		<section id="sect-Component_Reference-richcolumns-Customizing_the_view">
			<title>Customizing the view</title>
			<para>
				The output can be customized to display specific columns and rows. The <varname>columns</varname> attribute specifies the number of columns. The <varname>rowspan</varname> attribute specifies the number of rows to display; if the attribute is set to <literal>0</literal>, all remaining rows in the table are displayed. The <varname>begin</varname> and <varname>end</varname> attributes are used to specify the first and last zero-based iteration items to display in the table. Columns can be adjusted using the <varname>colspan</varname>, <varname>rowspan</varname>, and <varname>breakRowBefore</varname> attributes the same as with the <sgmltag>&lt;rich:column&gt;</sgmltag> component.
			</para>
		</section>

		<section id="sect-Component_Reference-richcolumns-Using_richcolumns_and_richcolumn_together">
			<title>Using <sgmltag>&lt;rich:columns&gt;</sgmltag> and <sgmltag>&lt;rich:column&gt;</sgmltag> together</title>
			<para>
				The <sgmltag>&lt;rich:columns&gt;</sgmltag> component can be used alongside one or more <sgmltag>&lt;rich:column&gt;</sgmltag> components.
			</para>
			<example id="exam-Component_Reference-richcolumns-Using_richcolumns_and_richcolumn_together">
				<title>Using <sgmltag>&lt;rich:columns&gt;</sgmltag> and <sgmltag>&lt;rich:column&gt;</sgmltag> together</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcolumns-Using_richcolumns_and_richcolumn_together.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				For details on filtering and sorting columns, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" /> and <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
			</para>
		</section>

		<section id="sect-Component_Reference-richcolumns-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;rich:columns&gt;</sgmltag> component uses the same style classes and skin parameters as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richdataTable-Style_classes_and_skin_parameters" /> for details.
			</para>
		</section>
	</section>
	-->

	<!--<rich:collapsibleSubTable>-->
	<section id="sect-Component_Reference-Tables_and_grids-richcollapsibleSubTable">
		<title><sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component acts as a child element to a <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. The <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component iterates through the child collections in the currently iterated object to create master-detail tables.
		</para>
		<para>
			Additionally, the detail part of the table can be collapsed or expanded through different modes. The <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component works with the <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component, which expands and collapses the sub-tables.
		</para>

		<section id="sect-Component_Reference-richcollapsibleSubTable-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component requires the same basic attributes as the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. The <varname>value</varname> attribute points to the collection, and the <varname>var</varname> attribute specifies a variable to use when iterating through the collection.
			</para>
			<para>
				In addition, the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component typically needs a corresponding <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component to allow expanding and collapsing. Declare the <varname>id</varname> identifier on the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> element so that the <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component can reference it. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richcollapsibleSubTableToggler" /> for details on the <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component.
			</para>
			<example id="exam-Component_Reference-richcollapsibleSubTable-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcollapsibleSubTable-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The resulting tables contains multiple sub-tables, grouping the list of cars by vendor. Each sub-table can be expanded or collapsed using the toggle with the vendor's name. The screenshot shows all sub-tables collapsed except for the sub-table for Ford cars.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-richcollapsibleSubTable-Basic_usage.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A data table containing multiple collapsible sub-tables.
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>

		<section id="sect-Component_Reference-richcollapsibleSubTable-Expanding_and_collapsing_the_sub-table">
			<title>Expanding and collapsing the sub-table</title>
			<para>
				Use the boolean <varname>expanded</varname> attribute to control the current state of the sub-table.
			</para>
			<para>
				The switching mode for performing submissions is determined by the <code>expandMode</code> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							The default setting. Expansion of the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component performs a common submission, completely re-rendering the page.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							Expansion of the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component performs an Ajax form submission, and the content of the data table is rendered.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							Expansion of the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component updates the data table on the client side.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="sect-Component_Reference-richcollapsibleSubTable-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.CollapsibleSubTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UICollapsibleSubTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Data</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.CollapsibleSubTableRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.CollapsibleSubTableHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richcollapsibleSubTable-Style_classes">
			<title>Style classes</title>
			<xi:include href="skinning/tabl-richcollapsibleSubTable.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>

		<section id="sect-Component_Reference-Tables_and_grids-richcollapsibleSubTableToggler">
			<title><sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component provides a toggle control for the user to expand and collapse sub-tables.
			</para>

			<section id="sect-Component_Reference-richcollapsibleSubTableToggler-Basic_usage">
				<title>Basic usage</title>
				<para>
					The <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component requires the <varname>for</varname> attribute. The <varname>for</varname> attribute references the <varname>id</varname> identifier of the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component to control.
				</para>
				<para>
					Refer to <xref linkend="exam-Component_Reference-richcollapsibleSubTable-Basic_usage" /> for an example using the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component. In the example, the toggle control is placed in a column that spans the width of the table. Output text next to the toggle control displays the car vendor's name for that sub-table.
				</para>
			</section>

			<section id="sect-Component_Reference-richcollapsibleSubTableToggler-Appearance">
				<title>Appearance</title>
				<para>
					The icons and labels of the <sgmltag>&lt;rich:collapsibleSubTableToggler&gt;</sgmltag> component can be customized. Use the <varname>collapsedIcon</varname> and <varname>expandedIcon</varname> attributes to specify icons for the toggler when it is collapsed and expanded respectively. Use the <varname>collapsedLabel</varname> and <varname>expandedLabel</varname> attributes to specify labels for the toggler when it is collapsed and expanded respectively.
				</para>
			</section>

			<section id="sect-Component_Reference-richcollapsibleSubTableToggler-Reference_data">
				<title>Reference data</title>
				<itemizedlist>
					<listitem>
						<para>
							<parameter>component-type</parameter>: <classname>org.richfaces.CollapsibleSubTableToggler</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-class</parameter>: <classname>org.richfaces.component.UICollapsibleSubTableToggler</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-family</parameter>: <classname>org.richfaces.CollapsibleSubTableToggler</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>renderer-type</parameter>: <classname>org.richfaces.CollapsibleSubTableTogglerRenderer</classname>
						</para>
					</listitem>
				</itemizedlist>
			</section>

			<section id="sect-Component_Reference-richcollapsibleSubTableToggler-Style_classes_and_skin_parameters">
				<title>Style classes and skin parameters</title>
				<xi:include href="skinning/vlst-richcollapsibleSubTableToggler.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
			</section>
		</section>
	</section>

	<!--<rich:extendedDataTable>-->
	<section id="sect-Component_Reference-Tables_and_grids-richextendedDataTable">
		<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component builds on the functionality of the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component, adding features such as scrolling for the table body (both horizontal and vertical), Ajax loading for vertical scrolling, frozen columns, row selection, and rearranging of columns. It also supports all the basic table features such as sorting, filtering, and paging using the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component.
		</para>
		<para>
			The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component includes the following main attributes not included in the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<varname>clientRows</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>frozenColumns</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>height</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>onselectionchange</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>selectedClass</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>selection</varname>
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>selectionMode</varname>
				</para>
			</listitem>
		</itemizedlist>

		<note>
			<title>Complex sub-tables</title>
			<para>
				Due to the complex mark-up involved in the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component, it does not support the use of the <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component. The <sgmltag>&lt;rich:collapsibleSubTable&gt;</sgmltag> component is only available with the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component.
			</para>
			<para>
				Similarly, complex row and column spanning using the <varname>breakRowBefore</varname>, <varname>colSpan</varname>, and <varname>rowSpan</varname> attributes is also not available with the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component.
			</para>
		</note>

		<section id="sect-Component_Reference-richextendedDataTable-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic use of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component requires the <varname>value</varname> and <varname>var</varname> attributes, the same as with the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. In addition, a set of columns must be included to define the table content. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richdataTable" /> for details.
			</para>
		</section>

		<section id="sect-Component_Reference-richextendedDataTable-Table_appearance">
			<title>Table appearance</title>
			<para>
				As with the <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component, the look of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can be customized using the <literal>header</literal> and <literal>footer</literal> facets.
			</para>
		</section>

		<section id="sect-Component_Reference-richextendedDataTable-Extended_features">
			<title>Extended features</title>
			<example id="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example">
				<title><sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> example</title>
				<para>
					This example <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component demonstrates horizontal and vertical scrolling and frozen columns. Each feature is detailed in this section.
				</para>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-Tables_and_grids-richextendedDataTable_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-richextendedDataTable_example.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A data table made using the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component. It features horizontal and vertical scrolling and frozen columns.
						</para>
					</textobject>
				</mediaobject>
			</example>

			<section id="sect-Component_Reference-richextendedDataTable-Scrolling">
				<title>Scrolling</title>
				<para>
					The example table shown in <xref linkend="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example" /> features both horizontal and vertical scrolling. Scrolling occurs automatically when the contents of the table exceed the dimensions specified with the <varname>height</varname> and <varname>width</varname> attributes. Headers and footers remain in place and visible when the table is scrolled.
				</para>
				<para>
					Large tables can use Ajax "lazy" loading to cache data on the client during scrolling. Use the <varname>clientRows</varname> attribute to specify the number of rows to load. The specified number of rows are loaded on the initial rendering and with every vertical scroll. If the <varname>clientRows</varname> attribute is not specified, all the rows are loaded on the client without the use of Ajax.
				</para>
				<para>
					In addition to Ajax scrolling, the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can also be used with the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component in the same way as a regular <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. If both the <varname>clientRows</varname> and <varname>rows</varname> attributes are included, Ajax loading occurs as defined by the <varname>clientRows</varname> attribute, but the loading is limited to the current table page as determined by the <varname>rows</varname> attribute. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richdataScroller" /> for full details on using the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component.
				</para>
			</section>

			<section id="sect-Component_Reference-richextendedDataTable-Frozen_columns">
				<title>Frozen columns</title>
				<para>
					The example table shown in <xref linkend="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example" /> has the first two columns frozen so that they remain visible if the user scrolls horizontally through the table. Note that the horizontal scrollbar does not encompass these frozen columns. To freeze columns, use the <varname>frozenColumns</varname> attribute to specify the number of columns on the left-hand side of the table to freeze.
				</para>
			</section>

			<section id="sect-Component_Reference-richextendedDataTable-Row_selection">
				<title>Row selection</title>
				<para>
					Row selection is determined by the <varname>selectionMode</varname> attribute. Setting the attribute to <literal>none</literal> allows for no row selection capability. The example table shown in <xref linkend="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example" /> does not allow row selection.
				</para>
				<para>
					Setting the <varname>selectionMode</varname> attribute to <literal>single</literal> allows the user to select a single row at a time using the mouse. With the <varname>selectionMode</varname> attribute set to <literal>multiple</literal>, the user can select multiple rows. Holding down the <keycap function="control">Ctrl</keycap> key while clicking selects additional rows with each click. Holding down the <keycap function="shift">Shift</keycap> key while clicking selects all the rows in a range.
				</para>
				<para>
					The <varname>selection</varname> attribute points to a collection of objects. It holds the <varname>rowKey</varname> identifiers to track which rows are selected. <xref linkend="exam-Component_Reference-richextendedDataTable-Selecting_multiple_rows" /> shows how to implement multiple row selection in the same table from <xref linkend="exam-Component_Reference-richextendedDataTable-richextendedDataTable_example" />.
				</para>
				<example id="exam-Component_Reference-richextendedDataTable-Selecting_multiple_rows">
					<title>Selecting multiple rows</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richextendedDataTable-Selecting_multiple_rows.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The accompanying <classname>ExtSelectionBean</classname> bean handles which rows are selected. The rows are identified by their <varname>rowKey</varname> identifiers.
					</para>
					<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richextendedDataTable-Selecting_multiple_rows.java" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Selecting_multiple_rows.png" format="PNG" />
						</imageobject>
						<textobject>
							<para>
								The example table with the first, second, third, and fifth rows selected.
							</para>
						</textobject>
					</mediaobject>
				</example>
			</section>

			<!--
			<section id="sect-Component_Reference-richextendedDataTable-Grouping">
				<title>Grouping</title>
				<para>
					Grouping the table's entries by a column will organize the table into collapsible sections, as shown in <xref linkend="figu-Component_Reference-richextendedDataTable-Grouping_table_entries_by_column" />.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Grouping_table_entries_by_column">
					<title>Grouping table entries by column</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Grouping_table_entries_by_column.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								A table with entries grouped by the <guilabel>Group</guilabel> column.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>

			<section id="sect-Component_Reference-richextendedDataTable-Hiding_columns">
				<title>Hiding columns</title>
				<para>
					The checkboxes in the column menu under the <guisubmenu>Columns</guisubmenu> sub-menu will hide or show the respective columns, as shown in <xref linkend="figu-Component_Reference-richextendedDataTable-Hiding_columns" />.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Hiding_columns">
					<title>Hiding columns</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Hiding_columns.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								The <guilabel>Date</guilabel> and <guilabel>Group</guilabel> columns are hidden from the table.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>
			-->

			<section id="sect-Component_Reference-richextendedDataTable-Rearranging_columns">
				<title>Rearranging columns</title>
				<para>
					Columns in a <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can be rearranged by the user by dragging each column to a different position. A graphical representation of the column is displayed during dragging. <xref linkend="figu-Component_Reference-richextendedDataTable-Dragging_columns" /> illustrates the <guilabel>Price</guilabel> column being dragged to a new location. The small blue arrow indicates where the column will be moved to if it is dropped in the current position. <xref linkend="figu-Component_Reference-richextendedDataTable-Rearranged_columns" /> shows the result of dragging the <guilabel>Price</guilabel> column.
				</para>
				<figure id="figu-Component_Reference-richextendedDataTable-Dragging_columns">
					<title>Dragging columns</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Dragging_columns.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								The <guilabel>Price</guilabel> column is dragged to a new position.
							</para>
						</textobject>
					</mediaobject>
				</figure>
				<figure id="figu-Component_Reference-richextendedDataTable-Rearranged_columns">
					<title>Rearranged columns</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-Tables_and_grids-Rearranged_columns.png" format="PNG" width="444" />
						</imageobject>
						<textobject>
							<para>
								The <guilabel>Price</guilabel> column has been moved to the right of the <guilabel>Mileage</guilabel> column.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</section>

			<!--
			<section id="sect-Component_Reference-richextendedDataTable-Saving_the_state">
				<title>Saving the state</title>
				<para>
					Once the contents of the table have been rearranged and customized by the user, the <varname>tableState</varname> attribute can be used to preserve the customization so it can be restored later. The <varname>tableState</varname> attribute points to a backing-bean property which can in turn be saved to a database separate from standard JSF state-saving mechanisms.
				</para>
			</section>
			-->

			<section id="sect-Component_Reference-richextendedDataTable-State_saving">
				<title>State saving</title>
				<para>
					The <varname>tableState</varname> attribute of the <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can be used to bind state of the table (column width, sequence, sorting, filtering) to a backing-bean string property, for a later use.
                    			This state can be for example saved to a database, and it is different from standard JSF state saving mechanism.
				</para>
			</section>

			<section id="sect-Component_Reference-richextendedDataTable-Filtering_and_sorting">
				<title>Filtering and sorting</title>
				<para>
					The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can include filtering and sorting in the same way as a regular <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component. For full details on filtering tables, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_filtering" />. For full details on sorting tables, refer to <xref linkend="sect-Component_Reference-Tables_and_grids-Table_sorting" />.
				</para>
			</section>

		</section>

		<section id="sect-Component_Reference-richextendedDataTable-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:extendedDataTable&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>sort()</function></term>
		         <listitem>
		            <para>
		               Sort the data table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>filter()</function></term>
		         <listitem>
		            <para>
		               Filter the data table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>clearSorting()</function></term>
		         <listitem>
		            <para>
		               Clear any sorting that is currently applied to the table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>clearFiltering()</function></term>
		         <listitem>
		            <para>
		               Clear any filtering that is currently applied to the table.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>selectRow(index)</function></term>
		         <listitem>
		            <para>
		               Select the row specified by the <parameter>index</parameter> parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>selectRows([startIndex, stopIndex])</function></term>
		         <listitem>
		            <para>
		               Select all the rows in the table. Optionally, select only those rows between the indexes specified with the <parameter>startIndex</parameter> and <parameter>stopIndex</parameter> parameters.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>deselectRow</function></term>
		         <listitem>
		            <para>
		               Deselect the row that is currently selected.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setActiveRow(index)</function></term>
		         <listitem>
		            <para>
		               Set the active row to that specified by the <parameter>index</parameter> parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>

		<section id="sect-Component_Reference-richextendedDataTable-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.ExtendedDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIExtendedDataTable</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Data</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ExtendedDataTableRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.ExtendedDataTableHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richextendedDataTable-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richextendedDataTable.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>

	<!--<rich:dataGrid>-->
	<section id="sect-Component_Reference-Tables_and_grids-richdataGrid">
		<title><sgmltag>&lt;rich:dataGrid&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component is used to arrange data objects in a grid. Values in the grid can be updated dynamically from the data model, and Ajax updates can be limited to specific rows. The component supports <literal>header</literal>, <literal>footer</literal>, and <literal>caption</literal> facets.
		</para>
		<para>
			The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component is similar in function to the JavaServer Faces <sgmltag>&lt;h:panelGrid&gt;</sgmltag> component. However, the <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component additionally allows iteration through the data model rather than just aligning child components in a grid layout.
		</para>
		<figure id="figu-Component_Reference-richdataGrid-The_richdataGrid_component">
			<title>The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richdataGrid-The_richdataGrid_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component displaying four elements in two columns, with a <literal>header</literal> facet, and <literal>footer</literal> facet containing a data-scrolling component.
					</para>
				</textobject>
			</mediaobject>
		</figure>

		<section id="sect-Component_Reference-richdataGrid-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component requires the <varname>value</varname> attribute, which points to the data model, and the <varname>var</varname> attribute, which holds the current variable for the collection of data.
			</para>
		</section>

		<section id="sect-Component_Reference-richdataGrid-Customizing_the_grid">
			<title>Customizing the grid</title>
			<para>
				 The number of columns for the grid is specifed with the <varname>columns</varname> attribute, and the number of elements to layout among the columns is determined with the <varname>elements</varname> attribute. The <varname>first</varname> attribute references the zero-based element in the data model from which the grid starts.
			</para>
			<example id="exam-Component_Reference-richdataGrid-richdataGrid_example">
				<title><sgmltag>&lt;rich:dataGrid&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richdataGrid-richdataGrid_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richdataGrid_example-richdataGrid_example">
						<title><sgmltag>&lt;rich:dataGrid&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richdataGrid-richdataGrid_example.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The result of the <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> example, with the <literal>header</literal> facet, <literal>footer</literal> facet, and first element annotated.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>

		<!--  TODO
		<section id="sect-Component_Reference-richdataGrid-Multiple-page_grids">
			<title>Multiple-page grids</title>
			<para>
				The <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component can be used with the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component to display multiple pages of grids. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richdataScroller" /> for details on the <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component.
			</para>
		</section>
		-->

		<section id="sect-Component_Reference-richdataGrid-Patial_updates">
			<title>Partial updates</title>
			<para>
				As <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> the component is based on the <sgmltag>&lt;a4j:repeat&gt;</sgmltag> component, it can be partially updated with Ajax. Refer to <xref linkend="sect-Component_Reference-a4jrepeat-Limited_views_and_partial_updates" /> for details on partially updating the <sgmltag>&lt;rich:dataGrid&gt;</sgmltag> component.
			</para>
		</section>

		<section id="sect-Component_Reference-richdataGrid-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.DataGrid</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIDataGrid</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Data</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.DataGridRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.DataGridHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richdataGrid-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richdataGrid.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>

	<!--<rich:list>-->
	<section id="sect-Component_Reference-Tables_and_grids-richlist">
		<title><sgmltag>&lt;rich:list&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:list&gt;</sgmltag> component renders a list of items. The list can be an numerically ordered list, an un-ordered bullet-point list, or a data definition list. The component uses a data model for managing the list items, which can be updated dynamically.
		</para>

		<section id="sect-Component_Reference-richlist-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>var</varname> attribute names a variable for iterating through the items in the data model. The items to iterate through are determined with the <varname>value</varname> attribute by using EL (Expression Language).
			</para>
		</section>

		<section id="sect-Component_Reference-richlist-Type_of_list">
			<title>Type of list</title>
			<para>
				By default, the list is displayed as an un-ordered bullet-point list. The <varname>type</varname> attribute is used to specify different list types:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>unordered</literal></term>
					<listitem>
						<para>
							The default presentation. The list is presented as a series of bullet-points, similar to the <sgmltag>&lt;ul&gt;</sgmltag> HTML element.
						</para>
						<figure id="figu-Component_Reference-richlist-Unordered_list">
							<title>Unordered list</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/figu-Component_Reference-richlist-Unordered_list.png" format="PNG" />
								</imageobject>
								<textobject>
									<para>
										A list of cars displayed in a list with bullet points.
									</para>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ordered</literal></term>
					<listitem>
						<para>
							The list is presented as a numbered series of items, similar to the <sgmltag>&lt;ol&gt;</sgmltag> HTML element.
						</para>
						<figure id="figu-Component_Reference-richlist-Ordered_list">
							<title>Ordered list</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/figu-Component_Reference-richlist-Ordered_list.png" format="PNG" />
								</imageobject>
								<textobject>
									<para>
										A list of cars displayed in a numbered list.
									</para>
								</textobject>
							</mediaobject>
						</figure>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>definitions</literal></term>
					<listitem>
						<para>
							The list is presented as a series of data definitions. Part of the data model, specified as the term, is listed prominently. The other associated data is listed after each term.
						</para>
						<figure id="figu-Component_Reference-richlist-Data_definition_list">
							<title>Data definition list</title>
							<mediaobject>
								<imageobject>
									<imagedata fileref="images/figu-Component_Reference-richlist-Data_definition_list.png" format="PNG" />
								</imageobject>
								<textobject>
									<para>
										A list of cars with their price and mileage displayed as a data definition.
									</para>
								</textobject>
							</mediaobject>
						</figure>
						<para>
							The term is marked using the <literal>term</literal> facet. The facet is required for all definition lists. Use of the facet is shown in <xref linkend="exam-Component_Reference-richlist-Data_definition_list" />.
						</para>
						<example id="exam-Component_Reference-richlist-Data_definition_list">
							<title>Data definition list</title>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richlist-Data_definition_list.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</example>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<!--
		<section id="sect-Component_Reference-richlist-Bullet_point_type">
			<title>Bullet point type</title>
			<para>
				The <varname>type</varname> attribute refers to the appearance of the bullet points. The values of the attribute correspond to the <varname>type</varname> parameter for the <sgmltag>&lt;ul&gt;</sgmltag> HTML element:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>circle</literal></term>
					<listitem>
						<para>
							Displays an unfilled circle as a bullet point.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>disc</literal></term>
					<listitem>
						<para>
							Displays a filled disc as a bullet point.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>square</literal></term>
					<listitem>
						<para>
							Displays a square as a bullet point.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		-->

		<!--
		<section id="sect-Component_Reference-richdataOrderedList-Numeration_type">
			<title>Numeration type</title>
			<para>
				The <varname>type</varname> attribute defines the appearance of the numerating list markers for the list. The possible values for the <varname>type</varname> attribute are as follows:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>A</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>A</wordasword>, <wordasword>B</wordasword>, <wordasword>C</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>a</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>a</wordasword>, <wordasword>b</wordasword>, <wordasword>c</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>I</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>I</wordasword>, <wordasword>II</wordasword>, <wordasword>III</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>i</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>i</wordasword>, <wordasword>ii</wordasword>, <wordasword>iii</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>1</literal></term>
					<listitem>
						<para>
							Numerates the list items as <wordasword>1</wordasword>, <wordasword>2</wordasword>, <wordasword>3</wordasword>, etc.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		-->

		<section id="sect-Component_Reference-richlist-Bullet_and_numeration_appearance">
			<title>Bullet and numeration appearance</title>
			<para>
				The appearance of bullet points for unordered lists or numeration for ordered lists can be customized through CSS, using the <property>list-style-type</property> property.
			</para>
		</section>

		<section id="sect-Component_Reference-richlist-Customizing_the_list">
			<title>Customizing the list</title>
			<para>
				The <varname>first</varname> attribute specifies which item in the data model to start from, and the <varname>rows</varname> attribute specifies the number of items to list. The <varname>title</varname> attribute is used for a floating tool-tip. <xref linkend="exam-Component_Reference-richlist-richlist_example" /> shows a simple example using the <sgmltag>&lt;rich:list&gt;</sgmltag> component.
			</para>
			<example id="exam-Component_Reference-richlist-richlist_example">
				<title><sgmltag>&lt;rich:list&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richlist-richlist_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richlist-richlist_example">
						<title><sgmltag>&lt;rich:list&gt;</sgmltag> example</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richlist-Unordered_list.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A list of cars displayed in a list with bullet points.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>

		<section id="sect-Component_Reference-richlist-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.List</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIList</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.List</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ListRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.ListHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richlist-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richlist.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>

	</section>

	<!--<rich:dataScroller>-->
	<section id="sect-Component_Reference-Tables_and_grids-richdataScroller">
		<title><sgmltag>&lt;rich:dataScroller&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component is used for navigating through multiple pages of tables or grids.
		</para>
		<figure id="figu-Component_Reference-richdataScroller-The_richdataScroller_component">
			<title>The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richdataScroller-The_richdataScroller_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:dataTable&gt;</sgmltag> component with a <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component contained in the <literal>footer</literal> facet.
					</para>
				</textobject>
			</mediaobject>
		</figure>

		<section id="sect-Component_Reference-richdataScroller-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> must be placed in a facet of the table or grid it needs to control. Alternatively, use the <varname>for</varname> attribute to bind the parent table or grid to the scroller.
			</para>
			<para>
				The bound table or grid should also have the <varname>rows</varname> attribute defined to limit the number of rows per page.
			</para>
			<para>
				The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component must be re-rendered whenever a filter changes on the bound table, so that the scroller matches the current model for the table.
			</para>
			<example id="exam-Component_Reference-richdataScroller-Basic_usage">
			   <title>Basic usage</title>
			   <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richdataScroller-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>

		<section id="sect-Component_Reference-richdataScroller-Appearance_and_interactivity">
			<title>Appearance and interactivity</title>
			<para>
				The <varname>page</varname> attribute is a value-binding attribute used to define and save the current page number.
			</para>
			<para>
				The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component provides a range of controllers for scrolling through tables and grids:
			</para>
			<variablelist>
				<varlistentry>
					<term>Controls for scrolling by a specific amount</term>
					<listitem>
						<para>
							The component includes controls for switching to the first page, the last page, the next page, and the previous page, as well as controls for fast-forwarding or rewinding by a set amount. Use the <varname>fastStep</varname> attribute to set the number of pages to skip when fast-forwarding or rewinding.
						</para>
						<para>
							The appearance of these controls can be customized using the following facets: <literal>first</literal>, <literal>last</literal>, <literal>next</literal>, <literal>previous</literal>, <literal>fastForward</literal>, and <literal>fastRewind</literal>. Additionally, there are facets for the controls' disabled states: <literal>first_disabled</literal>, <literal>last_disabled</literal>, <literal>next_disabled</literal>, <literal>previous_disabled</literal>, <literal>fastforward_disabled</literal>, and <literal>rewind_disabled</literal>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Page controls</term>
					<listitem>
						<para>
							The component also features a series of numbered controls to jump to a specific page. Use the <varname>maxPages</varname> attribute to limit the number of page controls that appear. The current page control is highlighted.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<!-- TODO not in Final -->
			<!--
			<para>
				The <varname>pageIndexVar</varname> and <varname>pagesVar</varname> attributes are request-scope variables for the current page and the total number of pages. Use these attributes with the <literal>pages</literal> facet to provide information about the pages of the table, as shown in <xref linkend="exam-Component_Reference-richdataScroller-pages_facet" />.
			</para>
			<example id="exam-Component_Reference-richdataScroller-pages_facet">
				<title><literal>pages</literal> facet</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richdataScroller-pages_facet.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			-->
			<para>
			   To add optional separators between controls, define the separators with the <literal>controlsSeparator</literal> facet.
			</para>
		</section>

		<section id="sect-Component_Reference-richdataScroller-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:dataScroller&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>switchToPage(pageIndex)</function></term>
		         <listitem>
		            <para>
		               Switch to the page specified with the <parameter>pageIndex</parameter> parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>next()</function></term>
		         <listitem>
		            <para>
		               Switch to the next page.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>previous()</function></term>
		         <listitem>
		            <para>
		               Switch to the previous page.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>first()</function></term>
		         <listitem>
		            <para>
		               Switch to the first page.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>last()</function></term>
		         <listitem>
		            <para>
		               Switch to the last page.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>fastForward()</function></term>
		         <listitem>
		            <para>
		               Step forward through the pages by the <varname>fastStep</varname> amount.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>fastRewind()</function></term>
		         <listitem>
		            <para>
		               Step backward through the pages by the <varname>fastStep</varname> amount.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>

		<section id="sect-Component_Reference-richdataScroller-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.DataScroller</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIDataScroller</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.DataScroller</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.DataScrollerRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.DataScrollerHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richdataScroller-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richdataScroller.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>

	<!-- TODO not in M2 -->
	<!--
	<section id="sect-Component_Reference-Tables_and_grids-richdataFilterSlider">
		<title><sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag></title>
		<itemizedlist>
			<listitem>
				<para>
					<parameter>component-type</parameter>: <classname>org.richfaces.DataFilterSlider</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-class</parameter>: <classname>org.richfaces.component.UIDataFilterSlider</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-family</parameter>: <classname>org.richfaces.DataFilterSlider</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>renderer-type</parameter>: <classname>org.richfaces.DataFilterSliderRenderer</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>handler-class</parameter>: <classname>org.richfaces.taglib.dataFilterSliderTag</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> components is a slider control that can be used for filtering data in a table. The range and increment of the slider control are defined using the <varname>startRange</varname>, <varname>endRange</varname>, and <varname>increment</varname> attributes.
		</para>
		<para>
			The slider is bound to a <classname>UIData</classname> component specified with the <varname>for</varname> attribute. The <varname>forValRef</varname> attribute refers to the <varname>value</varname> attribute used by the target component, and the <varname>filterBy</varname> attribute specifies which object member to filter according to the slider.
		</para>
		<para>
			The <varname>handleValue</varname> attribute keeps the current handle position on the slider control; filtering is based on this value. The <varname>storeResults</varname> attribute allows the <sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> component to keep the target <classname>UIData</classname> component in session.
		</para>
		<para>
			The event defined with the <varname>submitOnSlide</varname> attribute is triggered when the handle value on the slider is changed.
		</para>
		<example id="exam-Component_Reference-richdataFilterSlider-richdataFilterSlider_example">
			<title><sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> example</title>

<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-Tables_and_grids-richdataFilterSlider_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
			<blockquote>
				<figure id="figu-Component_Reference-richdataFilterSlider_example-richdataFilterSlider_example">
					<title><sgmltag>&lt;rich:dataFilterSlider&gt;</sgmltag> example</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/figu-Component_Reference-richdataFilterSlider-richdataFilterSlider_example.png" format="PNG" />
						</imageobject>
						<textobject>
							<para>
								A table of car details, filtered using a slider.
							</para>
						</textobject>
					</mediaobject>
				</figure>
			</blockquote>
		</example>
	</section>
	-->

	<section id="sect-Component_Reference-Tables_and_grids-Table_filtering">
		<title>Table filtering</title>

		<para>
			Tables entries can be filtered by the user through either the basic built-in filter inputs, or by defining external filter controls.
            Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richcolumn" /> for details on using the <sgmltag>&lt;rich:column&gt;</sgmltag> component in tables.
		</para>

        <section id="sect-Component_Reference-Table_filtering-filtering">
            <title>Filter Definition</title>
            <para>
                To define a filter for a column use either the <varname>filter</varname> or <varname>filterExpression</varname> attributes, then use the <varname>filterValue</varname> attribute to point to an object which holds the current filtering value for the column. The  attribute can be used to store filtering conditions in a session.
            </para>

            <para>
                Use the <varname>filterExpression</varname> attribute to define an expression that can be evaluated as a boolean value. The expression checks if each table entry satisfies the filtering condition when the table is rendered. For example, the expression might be a JSTL (JavaServer Pages Standard Tag Library) function such as <function>contains</function> or <function>equals</function>.
            </para>
            <para>
                Use the <varname>filter</varname> attribute to define a filter interface. The attribute must use EL (Expression Language) to point to an object which implements the <interfacename>org.richfaces.model.Filter&lt;T&gt;</interfacename> interface. The object must provide a single <methodname>accept(T t)</methodname> method. The method takes each iteration object as a parameter and returns a boolean value, which determines whether the object satisfies the filter. By defining a custom filter, you can implement complex business logic to filter a table.
            </para>
        </section>

        <section id="sect-Component_Reference-Table_filtering-builtin_filtering">
			<title>Built-in filter controls</title>
            <note>
                <title>Availability of built-in filter controls</title>
                <para>
                    The built-in filter controls are only available with the <varname>extendedDataTable</varname> component.
                    Support for built-in filter controls in the <varname>dataTable</varname> component will be added in a subsequent release.
                </para>
            </note>
			<para>
				The built-in filter controls of the <sgmltag>&lt;rich:column&gt;</sgmltag> component allow the user to enter text to use as the filtering value.
                The value of the built-in filter control is bound to the <varname>filterValue</varname> attribute, which can either be an initial filtering value on the page, or a value binding on the server.
                The filterValue is then applied to the filter defined either by the <varname>filterExpression</varname> or <varname>filter</varname> column attributes.
			</para>
			<para>
                The filterValue is of type <varname>String</varname>.
                Conversion is either done implicitly via EL in the <varname>filterExpression</varname>, or explicitly within the <varname>filter</varname> function.
                The filter is processed and the table is rendered when the <literal>onblur</literal> event occurs for the column.
                <!--This can be changed by defining a different event with the <varname>filterEvent</varname> attribute. -->
                <!--For example, to implement live updating such that the filter refreshes after every keystroke, set <code>filterEvent="keyup"</code>.-->
			</para>
			<example id="exam-Component_Reference-Table_filtering-Basic_filtering">
				<title>Basic filtering</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_filtering-Basic_filtering.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses the basic filtering method on both columns in the table.
				</para>
			</example>
		</section>
		<section id="sect-Component_Reference-Table_filtering-External_filtering">
			<title>External filter controls</title>
            <para>
                If you require more advanced filter controls use the external filtering properties of the <sgmltag>&lt;rich:column&gt;</sgmltag> component.
                With custom filter controls you can tailor the filter control, allowing for advanced use cases like select menus, checkboxes, etc.
                To use a custom filter control with the <varname>extendedDataTable</varname> component, one must first disable the built-in filter control.
            </para>
            <note>
                <title>Disabling built-in filter controls</title>
                <para>
                    The built-in search controls can be disabled on a column-by-column basis by setting the column attribute <varname>filterType="custom"</varname>.
                    Alternatively one can disable sort controls for the whole application via the following context-param in the web.xml:
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_filtering-context_param.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </note>
			<example id="exam-Component_Reference-Table_filtering-External_filtering">
				<title>Filtering example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_filtering-External_filtering.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses a filter expression on the first column and a filter method on the second column.
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-Table_filtering-External_filtering.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							A table of state capitals filtered by states beginning with the letter "<wordasword>a</wordasword>", further filtered to those states in the GMT-5 time zone.
						</para>
					</textobject>
				</mediaobject>
			</example>
		</section>
	</section>

	<section id="sect-Component_Reference-Tables_and_grids-Table_sorting">
		<title>Table sorting</title>

		<para>
			Tables entries can be sorted <!--by the user through either the basic method built in to the <sgmltag>&lt;rich:column&gt;</sgmltag> component, or -->by defining external sorting algorithms. Refer to <xref linkend="sect-Component_Reference-Tables_and_grids-richcolumn" /> for details on using the <sgmltag>&lt;rich:column&gt;</sgmltag> component in tables.
		</para>
		<note>
			<title>Sorting non-English tables</title>
			<para>
				To sort a table whose contents are not in English, add the <literal>org.richfaces.datatableUsesViewLocale</literal> context parameter to the project's <filename>web.xml</filename> settings file. Set the value of the context parameter to <literal>true</literal>.
			</para>
		</note>

		<section id="sect-Component_Reference-Tables_and_grids-Comparator">
			<title>Comparator Definition</title>
			<para>
                Use the <varname>comparator</varname> attribute of the <sgmltag>&lt;rich:column&gt;</sgmltag> to specify the comparator to use when sorting.
                If no <varname>comparator</varname> is specified, the sorting algorithm will invoke the entries <varname>compareTo</varname> method of the <varname>sortBy</varname> values if they implement the <varname>java.lang.Comparable</varname> interface.
                As a final fall back, the algorithm implements a null sort, sorting elements based on whether or not they are null.
            </para>
        </section>

		<section id="sect-Component_Reference-Tables_and_grids-Basic_sorting">
			<title>Built-in sort controls</title>
            <note>
                <title>Availability of built-in sort controls</title>
                <para>
                    The built-in sort controls are only available with the <varname>extendedDataTable</varname> component.
                    Support for built-in sort controls in the <varname>dataTable</varname> component will be added in a subsequent release.
                </para>
            </note>
            <para>
				The built-in sorting controls of the <sgmltag>&lt;rich:column&gt;</sgmltag> component allow a user to click the sort icons of a column to sort it in ascending or descending order.
			</para>
			<para>
				Set the <varname>sortBy</varname> attribute to indicate which value to use when sorting the column. Expressions in the <varname>sortBy</varname> attribute must refer to the variable declared in the table's <varname>var</varname> attribute, which is used to fill the contents of the table.
			</para>
			<example id="exam-Component_Reference-Table_sorting-Built_in_sorting">
				<title>Basic sorting</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_sorting-Basic_sorting.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses the basic sorting method on both columns in the table.
				</para>
			</example>
			<para>
				Use the <varname>sortOrder</varname> attribute to set how the table's contents are sorted when it is first loaded.
                By default, the value of the <varname>sortOrder</varname> attribute is <literal>unsorted</literal>, so that table entries appear in the order the are contained in the data model.
                Use <code>sortOrder="ascending"</code> to sort the entries in ascending alphabetical or numerical order. Use <code>sortOrder="descending"</code> to sort the entries in descending alphabetical or numerical order.
                The <varname>sortOrder</varname> attribute can also be used to externally set the sort order of a table when using the external sorting method; refer to <xref linkend="sect-Component_Reference-Table_sorting-External_sorting" /> for details.
			</para>
			<!--<para>-->
				<!--Use the <varname>sortMode</varname> attribute to determine how multiple columns are sorted. By default, the value of the <varname>sortMode</varname> attribute is <literal>single</literal>, so tables are only sorted by a single column. -->
                <!--Each time the header of a column is clicked the entire table is re-sorted according to that column. -->
                <!--Set <code>sortMode="multiple"</code> to allow tables to be sorted by a primary column, then by a secondary column, and so on.-->
			<!--</para>-->
		</section>

		<section id="sect-Component_Reference-Table_sorting-External_sorting">
			<title>External sort controls</title>
			<para>
				Set the <varname>sortBy</varname> attribute to indicate which iteration object property to use when sorting the column.
                If using custom-defined rules for sorting, use the <varname>comparator</varname> attribute instead.
                Set the <varname>comparator</varname> attribute to point to your comparator method, which will be used when sorting the data model.
			</para>
			<para>
				Bind the <varname>sortOrder</varname> attribute to bean properties to manage the sorting order.
                The bean must handle all the sorting algorithms.
                <xref linkend="exam-Component_Reference-Table_sorting-Sorting" /> demonstrates table sorting using an external control.
			</para>
			<example id="exam-Component_Reference-Table_sorting-Sorting">
				<title>Sorting</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-Table_sorting-External_sorting.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example uses an external control to manage the table's sorting.
				</para>
			</example>
			<para>
				When multiple columns are capable of being sorted at the same time, set the priority by which the columns are sorted with the <varname>sortPriorities</varname> attribute. The attribute must contain a list of column identifiers in the order of the sorting sequence.
			</para>
		</section>
	</section>

</chapter>

