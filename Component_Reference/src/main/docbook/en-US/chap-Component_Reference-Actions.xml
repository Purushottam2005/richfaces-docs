<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Actions">
	<title>Actions</title>
	<para>
		This chapter details the basic components that respond to a user action and submit an Ajax request.
	</para>
	
	<section id="sect-Component_Reference-Actions-a4jajax">
		<title><sgmltag>&lt;a4j:ajax&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> behavior allows Ajax capability to be added to a non-Ajax component. The non-Ajax component must implement the <interfacename>ClientBehaviorHolder</interfacename> interface for all the event attributes that support behavior rendering.
		</para>

		<section id="sect-Component_Reference-a4jajax-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> behavior is placed as a direct child to the component that requires Ajax support.
			</para>
			<para>
				Point the <varname>event</varname> attribute to the standard JSF event that triggers the behavior. If the <varname>event</varname> attribute is not defined, the behavior is triggered on the event that normally provides interaction behavior for the parent component.
			</para>
			<!--
			<note>
				<title>Attaching JavaScript functions</title>
				<para>
					When attaching the <sgmltag>&lt;a4j:ajax&gt;</sgmltag> behavior to non-Ajax JavaServer Faces command components, such as the <sgmltag>&lt;h:commandButton&gt;</sgmltag> and <sgmltag>&lt;h:commandLink&gt;</sgmltag> components, it is important to set <code>disabledDefault="true"</code>. If this attribute is not set, a non-Ajax request is sent after the Ajax request and the page is refreshed unexpectedly.
				</para>
			</note>
			-->
			<example id="exam-Component_Reference-a4jajax-a4jajax_example">
				<title><sgmltag>&lt;a4j:ajax&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jajax-a4jajax_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jajax-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-type</parameter>: <classname>org.ajax4jsf.behavior.Ajax</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-id</parameter>: <classname>org.ajax4jsf.behavior.Ajax</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.AjaxHandler</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-class</parameter>: <classname>org.ajax4jsf.component.behavior.AjaxBehavior</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-class</parameter>: <classname>org.ajax4jsf.renderkit.AjaxBehaviorRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section id="sect-Component_Reference-Actions-a4jparam">
		<title><sgmltag>&lt;a4j:param&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:param&gt;</sgmltag> behavior combines the functionality of the JavaServer Faces (<acronym>JSF</acronym>) components <sgmltag>&lt;f:param&gt;</sgmltag> and <sgmltag>&lt;f:actionListener&gt;</sgmltag>.
		</para>
		
		<section id="sect-Component_Reference-a4jparam-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;a4j:param&gt;</sgmltag> requires three main attributes:
			</para>
			<itemizedlist>
				<!--
				<listitem>
					<para>
						<varname>name</varname>, for the name of the parameter;
					</para>
				</listitem>
				-->
				<listitem>
					<para>
						The <varname>value</varname> attribute is the initial value of the parameter.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>assignTo</varname> attribute defines the bean property. The property is updated if the parent command component performs an action event during the <emphasis>Process Request</emphasis> phase.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				<xref linkend="exam-Component_Reference-a4jparam-a4jparam_example" /> shows a simple implementation along with the accompanying managed bean.
			</para>
			<example id="exam-Component_Reference-a4jparam-a4jparam_example">
				<title><sgmltag>&lt;a4j:param&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jparam-a4jparam_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<programlisting language="Java" role="JAVA"><xi:include href="extras/exam-Component_Reference-a4jparam-a4jparam_example.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					When the <guibutton>Set name to Alex</guibutton> button is pressed, the application sets the <varname>name</varname> parameter of the bean to <literal>Alex</literal>, and displays the name in the output field.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jparam-Interoperability">
			<title>Interoperability</title>
			<para>
				The <sgmltag>&lt;a4j:param&gt;</sgmltag> tag can be used with non-Ajax components in addition to Ajax components. This includes components which are working through the <code>GET</code> request, such as the <sgmltag>&lt;h:link&gt;</sgmltag> and <sgmltag>&lt;h:button&gt;</sgmltag> components. In this way, data model values can also be updated without any Java code on the server side.
			</para>
			<para>
				The <varname>converter</varname> attribute can be used to specify how to convert the value before it is submitted to the data model. The property is assigned the new value during the <emphasis>Update Model</emphasis> phase.
			</para>
			<note>
				<title>Validation failure</title>
				<para>
					If the validation of the form fails, the <emphasis>Update Model</emphasis> phase will be skipped and the property will not be updated.
				</para>
			</note>
		</section>

		<section id="sect-Component_Reference-a4jparam-Passing_client-side_parameters">
			<title>Passing client-side parameters</title>
			<para>
				Variables from JavaScript functions can be used for the <varname>value</varname> attribute. In such an implementation, the <varname>noEscape</varname> attribute should be set to <literal>true</literal>. Using <code>noEscape="true"</code>, the <varname>value</varname> attribute can contain any JavaScript expression or JavaScript function invocation, and the result will be sent to the server as the <varname>value</varname> attribute.
			</para>
			<example id="exam-Component_Reference-a4jparam-Passing_client-side_parameters">
				<title>Passing client-side parameters</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jparam-Passing_client-side_parameters.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The command button triggers the <sgmltag>&lt;a4j:param&gt;</sgmltag> behaviors and renders the output text. The <sgmltag>&lt;a4j:param&gt;</sgmltag> behaviors pass client-side parameters for the screen width and height through the backing bean. These parameters are then used to populate the output text values.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jparam-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Parameter</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIParameter</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Parameter</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.ParameterHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<!--  FIXME not in M2  -->
	<!--
	<section id="sect-Component_Reference-Actions-a4jajaxListener">
		<title><sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag></title>
		<itemizedlist>
			<listitem>
				<para>
					<parameter>listener-class</parameter>: <classname>org.ajax4jsf.event.AjaxListener</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>event-class</parameter>: <classname>org.ajax4jsf.event.AjaxEvent</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>handler-class</parameter>: <classname>org.ajax4jsf.view.facelets.html.jsp.AjaxListenerTag</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component adds an action listener to a parent component. It works similar to the JavaServer Faces <sgmltag>&lt;f:actionListener&gt;</sgmltag> or <sgmltag>&lt;f:valueChangeListener&gt;</sgmltag> components, except that the invocation of <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> is not canceled if validation of the <emphasis>Update Model</emphasis> phase fails. The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component is guaranteed to be invoked with each Ajax response.
		</para>
		<para>
			Basic usage requires only the <varname>type</varname> attribute, which defines the fully-qualified Java class name for the listener. This Java class should implement the <classname>org.ajax4jsf.event.AjaxListener</classname> interface, which is a base listener for all listeners and is capable of receiving Ajax events. The object from which the event originated could be accessed using the <methodname>java.util.EventObject.getSource()</methodname> method.
		</para>
		<para>
			The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component is not invoked for non-Ajax requests, or when the RichFaces works in the <emphasis>Ajax request generates non-Ajax response</emphasis> mode, so the <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> invocation is a good indicator that an Ajax response is going to be processed.
		</para>
	</section>
	-->

	<section id="sect-Component_Reference-Actions-a4jactionListener">
		<title><sgmltag>&lt;a4j:actionListener&gt;</sgmltag></title>
		<!--
		<note>
			<title>Documentation in development</title>
			<para>
				The documentation for this tag is still under development. Refer to the generated documentation mentioned in <xref linkend="chap-Component_Reference-Introduction" /> for reference details.
			</para>
		</note>
		-->
		<para>
			Use the <sgmltag>&lt;a4j:actionListener&gt;</sgmltag> tag to register an <classname>ActionListener</classname> class on a parent action component. The class provided as a listener must implement the <interfacename>javax.faces.event.ActionListener</interfacename> interface. Multiple listener methods can be registered on an action component in this way.
		</para>
		<para>
			The <sgmltag>&lt;a4j:actionListener&gt;</sgmltag> tag differs from the standard JSF tag by allowing a listener method to be defined instead of just a class. Use the <varname>listener</varname> attribute to define the listener method.
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jcommandButton">
		<title><sgmltag>&lt;a4j:commandButton&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component is similar to the JavaServer Faces (<acronym>JSF</acronym>) <sgmltag>&lt;h:commandButton&gt;</sgmltag> component, but additionally includes Ajax support.
		</para>
		<figure id="figu-Component_Reference-a4jcommandButton-a4jcommandButton">
			<title><sgmltag>&lt;a4j:commandButton&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-a4jcommandButton-a4jcommandButton.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A typical <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		<note>
			<title>The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component executes the complete form</title>
			<para>
				Button controls are typically used to perform complete form submissions for data storing. As a consequence, the <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component has the <code>execute="@form"</code> setting by default. To limit rendering to a different scope, redefine the <varname>execute</varname> attribute.
			</para>
		</note>
		
		<section id="sect-Component_Reference-a4jcommandButton-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> requires only the <varname>value</varname> attribute to function. Use the <varname>value</varname> attribute to specify the text of the button.
			</para>
			<para>
				By default, the <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> uses the <varname>click</varname> event instead of the <varname>submit</varname> event.
			</para>
			<!--
			<note>
				<title>Set <code>disabledDefault="true"</code></title>
				<para>
					When attaching a JavaScript function to a <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> with the help of a <sgmltag>&lt;rich:componentControl&gt;</sgmltag>, do not use the <varname>attachTo</varname> attribute of <sgmltag>&lt;rich:componentControl&gt;</sgmltag>. The attribute adds event handlers using <classname>Event.observe</classname> but <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> does not include this event.
				</para>
			</note>
			-->
		</section>
		
		<section id="sect-Component_Reference-a4jcommandButton-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.CommandButton</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UICommandButton</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.CommandButtonRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jcommandLink">
		<title><sgmltag>&lt;a4j:commandLink&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component is similar to the JavaServer Faces (<acronym>JSF</acronym>) <sgmltag>&lt;h:commandLink&gt;</sgmltag> component, except that it includes plugged-in Ajax behavior.
		</para>
		<figure id="figu-Component_Reference-a4jcommandLink-a4jcommandLink">
			<title><sgmltag>&lt;a4j:commandLink&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-a4jcommandLink-a4jcommandLink.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A typical <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		<note>
			<title>The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component executes the complete form</title>
			<para>
				Link controls are typically used to perform complete form submissions for data storing. As a consequence, the <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component has the <code>execute="@form"</code> setting by default. To limit rendering to a different scope, redefine the <varname>execute</varname> attribute.
			</para>
		</note>
		
		<section id="sect-Component_Reference-a4jcommandLink-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> requires only the <varname>value</varname> attribute to function. Use the <varname>value</varname> attribute to specify the text of the link.
			</para>
			<para>
				The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> uses the <varname>click</varname> event instead of the <varname>submit</varname> event.
			</para>
		</section>
		
		<section id="sect-Component_Reference-a4jcommandLink-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.CommandLink</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UICommandLink</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.CommandLinkRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!-- TODO not in M2 -->
	<!--
	<section id="sect-Component_Reference-Actions-a4jhashParam">
		<title><sgmltag>&lt;a4j:hashParam&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	-->
	
	<!-- FIXME not in M2 -->
	<!--
	<section id="sect-Component_Reference-Actions-a4jhtmlCommandLink">
		<title><sgmltag>&lt;a4j:htmlCommandLink&gt;</sgmltag></title>
		<itemizedlist>
			<listitem>
				<para>
					<parameter>component-type</parameter>: <classname>org.ajax4jsf.HtmlCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.HtmlCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.HtmlCommandLinkRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:htmlCommandLink&gt;</sgmltag> component functions similarly to the standard <sgmltag>&lt;h:commandLink&gt;</sgmltag> component, but addresses some of the potential issues that can occur.
		</para>
		<para>
			When using the standard component, hidden fields were not rendered to child elements if they were deemed unnecessary, so command links relating to content on the initial page could become broken if they were later updated through Ajax. The <sgmltag>&lt;a4j:htmlCommandLink&gt;</sgmltag> component addresses this by always rendering all hidden fields.
		</para>
	</section>
	-->
	
	<section id="sect-Component_Reference-Actions-a4jjsFunction">
		<title><sgmltag>&lt;a4j:jsFunction&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component performs Ajax requests directly from JavaScript code and retrieves server-side data. The server-side data is returned in JavaScript Object Notation (<acronym>JSON</acronym>) format prior to the execution of any JavaScript code defined using the <varname>oncomplete</varname> attribute.
		</para>
		
		<section id="sect-Component_Reference-a4jjsFunction-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component requires the <varname>data</varname> attribute. Use the <varname>data</varname> attribute to define where the retrieved server-side data is stored.
			</para>
			<para>
				<xref linkend="exam-Component_Reference-a4jjsFunction-a4jjsFunction_example" /> shows how an Ajax request can be initiated from the JavaScript and a partial page update performed. The JavaScript function can be invoked with the data returned by the Ajax response.
			</para>
			<example id="exam-Component_Reference-a4jjsFunction-a4jjsFunction_example">
				<title><sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jjsFunction-a4jjsFunction_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The output text for the name is changed depending on which table cell the user hovers over with the mouse. The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component manages the updating and display of the name.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jjsFunction-Parameters_and_JavaScript">
			<title>Parameters and JavaScript</title>
			<para>
				The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component allows the use of the <sgmltag>&lt;a4j:param&gt;</sgmltag> component or the JavaServer Faces <sgmltag>&lt;f:param&gt;</sgmltag> component to pass any number of parameters for the JavaScript function.
			</para>
		</section>
		
		<section id="sect-Component_Reference-a4jjsFunction-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Function</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIFunction</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.FunctionRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jpoll">
		<title><sgmltag>&lt;a4j:poll&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component allows periodical sending of Ajax requests to the server. It is used for repeatedly updating a page at specific time intervals.
		</para>
		
		<section id="sect-Component_Reference-a4jpoll-Timing_options">
			<title>Timing options</title>
			<para>
				The <varname>interval</varname> attribute specifies the time in milliseconds between requests. The default for this value is 1000 ms (1 second).
			</para>
			<para>
				The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component can be enabled and disabled using the <varname>enabled</varname> attribute. Using Expression Language (<acronym>EL</acronym>), the <varname>enabled</varname> attribute can point to a bean property to apply a particular attribute value.
			</para>
		</section>

		<!-- TODO: not in Final
		<section id="sect-Component_Reference-a4jpoll-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>start()</function></term>
		         <listitem>
		            <para>
		               Start polling the server.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>stop()</function></term>
		         <listitem>
		            <para>
		               Stop polling the server.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		-->
		
		<section id="sect-Component_Reference-a4jpoll-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Poll</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIPoll</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Poll</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.PollRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.AjaxPollHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jpush">
		<title><sgmltag>&lt;a4j:push&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:push&gt;</sgmltag> component performs real-time updates on the client side from events triggered at the server side. The events are pushed out to the client through the RichFaces messaging queue. When the <sgmltag>&lt;a4j:push&gt;</sgmltag> component is triggered by a server event, it can in turn cause Ajax updates and changes. 
		</para>
		<para>
			The <sgmltag>&lt;a4j:push&gt;</sgmltag> component uses the Comet model for pushing data to the client.
		</para>
        
        <section id="sect-Component_Reference-a4jpush-Setting_up_push">
            <title>Setting up Push</title>
            <para>
                Using the Push component requires configuration steps which depends on an environment in which the Push is used: 
            </para>
        
            <section id="sect-Component_Reference-a4jpush-Installing_runtime_dependencies">
                <title>Installing runtime dependencies</title>
                <para>
                    The <sgmltag>&lt;a4j:push&gt;</sgmltag> uses an Atmosphere framework for transporting messages. In order to use the Atmosphere on the server-side, it is necessary to add Atmosphere libraries into a project. 
                </para>
                <para>
                    In a Maven-based project, you should add <code>atmosphere-runtime</code> as a runtime dependency (its version is managed by <code>richfaces-bom</code> that your project should be importing, check &quot;RichFaces Developer Guide&quot; for details of starting with Maven-based project):
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Installing_Atmosphere_libraries.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    For non-Maven-based projects, it is necessary to add dependencies manually - check "RichFaces Developer Guide", section "Project libraries and dependencies" for details.
                </para>
            </section>
            
            <section id="sect-Component_Reference-a4jpush-Registering_Push_servlet">
                <title>Registering Push servlet</title>
                <para>
                     The Push requires a <code>PushServlet</code> registered in web application and listening for Push client connections.
                </para>
                <para>
                    In the Servlets 3.0 and higher environments, the servlet will be registered automatically.
                </para>
                <para>
                    However in the Servlets 2.5 and lower environments, the servlet needs to be registered manually in <code>web.xml</code>:
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Registering_Push_servlet.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <note>
                    <title>Manual registration of servlet in Servlets 3.0</title>
                    <para>
                        When you are registering Push servlet in the Servlets 3.0 environments manually, the RichFaces will detect that servlet for Push is already registered and it avoids to initialize it again.
                    </para>
                    <para>
                        However be sure to setup the Push servlet to support asynchronous requests - modify the servlet registration in the previous <code>web.xml</code> snippet as follows:
                    </para>
                    <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Registering_Push_servlet_manually_in_Servlets_3_0.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                </note>
                <note>
                    <title>Switching to Blocking I/O instead of asynchronous servlets</title>
                    <para>
                        Although a container you use supports Servlets 3.0, you may experience problems with using asynchronous servlets.
                    </para>
                    <para>
                        It is possible to force the Atmosphere to use a blocking I/O approach with the following <code>web.xml</code> configuration:
                    </para>
                    <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Switching_to_blocking_IO_instead_of_asynchronous_servlets.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                </note>
            </section>
        </section>

		<section id="sect-Component_Reference-a4jpush-Server_side_Push_methods">
			<title>Server-side Push methods</title>
            <para>
                The Push events can be fired on the server-side in several ways:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>TopicsContext</emphasis> - accesses a RichFaces message queue directly
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Push CDI</emphasis> - uses the CDI Event mechanism to fire messages
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Push JMS</emphasis> - the RichFaces Push consumes messages from an enterprise messaging system and exposes them to the client (tightly coupled with the JMS runtime)
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Client_side_Push_methods">
            <title>Client-side Push methods</title>
            <para>
                On the client side, push notifications may be processed in the following ways:
            </para>
             <itemizedlist>
                <listitem>
                    <para>
                        <code>ondataavailable</code> event handler (serialized message is available)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Client behaviors attached to <code>dataavailable</code> event
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Push_Topics">
            <title>Push Topics</title>
            <para>
                The Push messages are delivered to the client based on a <code>TopicKey</code>'s name (e.g. <code>someTopic</code>).
            </para>
            <para>
                The <code>TopicKey</code> can optionally include a subtopic name (e.g. <code>subtopic@anotherTopic</code>).
            </para>
            <para>
                On the client side, the topic is represted by an <sgmltag>&lt;a4j:push&gt;</sgmltag>'s attribute <varname>address</varname>.
            </para>
            <note>
                <title>Push Topic relates to JMS topic</title>
                <para>
                    The format for the name of the push topic is very close to the JMS topic name and thus enables a seamless transport of JMS messages to the RichFaces message queue.
                </para>
            </note>
            <note>
                <title>Topics with EL expressions</title>
                <para>
                    Since the topic key can contain EL expressions, it is possible to achieve dynamic end-points (e.g. addressing specific clients).
                </para>
                <para>
                    You need to push a message by using <code>TopicContext.publish(TopicKey key, Object message)</code> or using CDI events to publish message to dynamically evaluated topic key.
                </para>
                <para>
                    The <sgmltag>&lt;a4j:push&gt;</sgmltag>'s attribute <varname>address</varname> accepts EL expressions.
                </para>
            </note>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Handling_a_push_message">
            <title>Handling a push message</title>
            <para>
                A push message sent from the server to the <sgmltag>&lt;a4j:push&gt;</sgmltag> component on the client will cause it to trigger any event handlers defined using the <varname>dataavailable</varname> event handler.
            </para>
            <para>
                The <sgmltag>&lt;a4j:push&gt;</sgmltag> component should also include the <varname>onerror</varname> event handler to inform the user when an error has occurred with the push messages.
            </para>
            <para>
                <sgmltag>&lt;a4j:push&gt;</sgmltag> can be used for either immediate processing of messages (like in the previous example) or it can trigger a partial page update. Check out following samples: 
            </para>
            <example id="exam-Component_Reference-a4jpush-Handling_a_push_message">
                <title>Handling a push message</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Handling_a_push_notification.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    This example uses the <varname>dataavailable</varname> event attribute with some JavaScript to update messages in a chat room. The <parameter>event.rf.data</parameter> parameter contains Push message data serialized to JavaScript.
                </para>
            </example>
            <example id="exam-Component_Reference-a4jpush-Updating_DOM_for_each_push_notification">
                <title>Updating DOM for each push message</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Updating_DOM_for_each_push_notification.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    This example uses the <varname>dataavailable</varname> event handler to trigger an AJAX request and a partial page update.
                </para>
            </example>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Handling_a_push_subscription">
            <title>Handling a push subscription</title>
            <para>
                The <sgmltag>&lt;a4j:push&gt;</sgmltag> component establishes connection with server on complete page load (when document is ready). 
            </para>
            <para>
                It means that the application starts to handle push messages once the page is completely loaded. 
            </para>
            <para>
                However time-critical applications may require keeping client stricly synchronized with the server state.
            </para>
            <para>
                For such applications you may use <varname>onsubscribed</varname> event handler, which is triggered every time the given component is successfully subscribed to the address/topic it listens to (on a page load and on each AJAX re-render). 
            </para>
            <example id="exam-Component_Reference-a4jpush-Handling_a_push_subscription">
                <title>The time-critical updates in stock application</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Handling_a_push_subscription.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    This example uses the <varname>subscribed</varname> event to update the table content once the push component is subscribed to the topic, ensuring that the table content is not stale.
                </para>
            </example>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Using_TopicsContext_to_publish_message">
            <title>Using TopicsContext to publish message</title>
            <para>
                 Messages could be produced using the <code>TopicsContext</code> interface directly as in the following sample:
            </para>
            <programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Using_TopicsContext_to_publish_message.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            <para>
                Sending a message using the <code>TopicsContext</code> involves creating a <code>TopicKey</code> instance (denominator of given message topic) and looking up the <code>TopicsContext</code> used for topic registration and message publishing.
            </para>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Push_CDI_Integration">
            <title>Integrating Push with CDI events</title>
            <para>
                An alternative way of producing messages is to use the CDI event mechanism.
            </para>
            <para>
                Push notifications can be produced by annotating a CDI event injection point with the <code>@Push</code> annotation, which specifies an end-point (topic name).
            </para>
            <para>
                The payload of the message is the serialized object sent using the CDI event interface (<code>Event.fire(T object)</code>).
            </para>
            <programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Integrating_Push_with_CDI_events.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Push_and_JMS_integration">
            <title>Push and JMS integration</title>
            <para>
                An integration of the RichFaces Push and the Java Messaging Service (<abbrev>JMS</abbrev>) allows to write robust interactive applications. 
            </para>
            
            <section>
                <title>Enabling JMS integraction</title>
                <para>
                    The JMS integration needs to be enabled in <code>web.xml</code> with a following configuration:
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Enablig_JMS_integration.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </section>
            
            <section>
                <title>Configuring JMS backend</title>
                <para>
                    The JMS instance on the back-end must be configured to work with your <sgmltag>&lt;a4j:push&gt;</sgmltag> components.
                </para>
                <note>
                    <title>Configuring JMS on JBoss Application Server</title>
                    <para>
                        Refer to the <citetitle>JBoss Application Server Administration Console Guide</citetitle> for details on managing JBoss Application Server through the Administration Console.
                    </para>
                </note>
                <example id="exam-Component_Reference-a4jpush-JMS_server_configuration">
                    <title>JMS server configuration</title>
                    <para>
                        This simple example describes the JMS server configuration required for a pushing server date to the client.
                    </para>
                    <para>
                        The JMS server needs to be setup in order to propagate JMS messages to Push components. Create a new JMS topic using the following settings:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <guilabel>Name:</guilabel> datePush
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>JNDI name:</guilabel> /topic/datePush
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Use the default settings for other options.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        Add a single role for the topic in the same form using the following settings:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <guilabel>Name:</guilabel> guest
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>Send:</guilabel> true
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>Consume:</guilabel> true
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>Create subscriber:</guilabel> true
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>Delete subscriber:</guilabel> true
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>Create durable subscriber:</guilabel> true
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <guilabel>Delete durable subscriber:</guilabel> true
                            </para>
                        </listitem>
                    </itemizedlist>
                </example>
                <para>
                    Ensure the <guilabel>Create durable subscriber</guilabel> and <guilabel>Delete durable subscriber</guilabel> options are set to <guilabel>true</guilabel> for push functionality.
                </para>
                <note>
                    <title>Durable subscriptions</title>
                    <para>
                        Durable subscriptions receive all events, including those events which were sent while the push component was not connected.
                    </para>
                    <para>
                        Refer to <citetitle>JMS Documentation</citetitle> for details on configuring the JMS Server. 
                    </para>
                </note>
                <note>
                    <title>JMS integration with custom configuration</title>
                    <para>
                        The RichFaces looks for the JMS Connection Factory on the JNDI context <code>/ConnectionFactory</code> by default
                    </para>
                    <para>
                        The prefix <code>/topic</code> is used for deriving JMS topic names from Push topic names.
                    </para>
                    <para>
                        When integrating component into an enterprise system, this defaults can be changed.
                    </para>
                    <para>
                        Use following <code>web.xml</code> parameters to change default values: <code>org.richfaces.push.jms.connectionFactory</code>, <code>org.richfaces.push.jms.topicsNamespace</code>.
                    </para>
                    <para>
                        When RichFaces obtains a connection, an empty user name is used with an empty password.
                    </para>
                    <para>
                        Use following <code>web.xml</code> parameters or equivalent JVM parameters to change default values: <code>org.richfaces.push.jms.connectionUsername</code>, <code>org.richfaces.push.jms.connectionPassword</code>.  
                    </para>
                    , 
                </note>
            </section>
            
            <section>
                <title>Sending and receiving Push messages using JMS</title>
                <para>
                    The JMS message which should be propagated to Push needs to be created with method <code>session.createObjectMessage(message);</code>.
                </para>
                <para>
                    The message could be then published using <code>publisher.publish(message);</code> like in a following example:
                </para>
                <example id="exam-Component_Reference-a4jpush-Sending_messages_using_JMS">
                    <title>Sending messages using JMS</title>
                    <programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Basic_usage.java" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                </example>
                <para>
                    Receiving messages from JMS doesn't differ from receiving messages sent by the <code>TopicsContext</code> or using CDI events.
                </para>
                <example id="exam-Component_Reference-a4jpush-Receiving_messages_using_JMS">
                    <title>Receiving messages using JMS</title>
                    <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                </example>
                <para>
                    This example demonstrates a simple use of the <sgmltag>&lt;a4j:push&gt;</sgmltag> causing an immediate update of page content.
                </para>
            </section>
        </section>
		
		<section id="sect-Component_Reference-a4jpush-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Push</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIPush</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Push</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.PushRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>

</chapter>

