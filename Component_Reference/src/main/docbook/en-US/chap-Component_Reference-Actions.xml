<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Actions">
	<title>Actions</title>
	<para>
		This chapter details the basic components that respond to a user action and submit an Ajax request.
	</para>
	
	<section id="sect-Component_Reference-Actions-a4jajax">
		<title><sgmltag>&lt;a4j:ajax&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> behavior allows Ajax capability to be added to a non-Ajax component. The non-Ajax component must implement the <interfacename>ClientBehaviorHolder</interfacename> interface for all the event attributes that support behavior rendering.
		</para>

		<section id="sect-Component_Reference-a4jajax-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> behavior is placed as a direct child to the component that requires Ajax support.
			</para>
			<para>
				Point the <varname>event</varname> attribute to the standard JSF event that triggers the behavior. If the <varname>event</varname> attribute is not defined, the behavior is triggered on the event that normally provides interaction behavior for the parent component.
			</para>
			<!--
			<note>
				<title>Attaching JavaScript functions</title>
				<para>
					When attaching the <sgmltag>&lt;a4j:ajax&gt;</sgmltag> behavior to non-Ajax JavaServer Faces command components, such as the <sgmltag>&lt;h:commandButton&gt;</sgmltag> and <sgmltag>&lt;h:commandLink&gt;</sgmltag> components, it is important to set <code>disabledDefault="true"</code>. If this attribute is not set, a non-Ajax request is sent after the Ajax request and the page is refreshed unexpectedly.
				</para>
			</note>
			-->
			<example id="exam-Component_Reference-a4jajax-a4jajax_example">
				<title><sgmltag>&lt;a4j:ajax&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jajax-a4jajax_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jajax-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-type</parameter>: <classname>org.ajax4jsf.behavior.Ajax</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-id</parameter>: <classname>org.ajax4jsf.behavior.Ajax</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.AjaxHandler</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>behavior-class</parameter>: <classname>org.ajax4jsf.component.behavior.AjaxBehavior</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>client-behavior-renderer-class</parameter>: <classname>org.ajax4jsf.renderkit.AjaxBehaviorRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section id="sect-Component_Reference-Actions-a4jparam">
		<title><sgmltag>&lt;a4j:param&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:param&gt;</sgmltag> behavior combines the functionality of the JavaServer Faces (<acronym>JSF</acronym>) components <sgmltag>&lt;f:param&gt;</sgmltag> and <sgmltag>&lt;f:actionListener&gt;</sgmltag>.
		</para>
		
		<section id="sect-Component_Reference-a4jparam-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;a4j:param&gt;</sgmltag> requires three main attributes:
			</para>
			<itemizedlist>
				<!--
				<listitem>
					<para>
						<varname>name</varname>, for the name of the parameter;
					</para>
				</listitem>
				-->
				<listitem>
					<para>
						The <varname>value</varname> attribute is the initial value of the parameter.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>assignTo</varname> attribute defines the bean property. The property is updated if the parent command component performs an action event during the <emphasis>Process Request</emphasis> phase.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				<xref linkend="exam-Component_Reference-a4jparam-a4jparam_example" /> shows a simple implementation along with the accompanying managed bean.
			</para>
			<example id="exam-Component_Reference-a4jparam-a4jparam_example">
				<title><sgmltag>&lt;a4j:param&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jparam-a4jparam_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<programlisting language="Java" role="JAVA"><xi:include href="extras/exam-Component_Reference-a4jparam-a4jparam_example.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					When the <guibutton>Set name to Alex</guibutton> button is pressed, the application sets the <varname>name</varname> parameter of the bean to <literal>Alex</literal>, and displays the name in the output field.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jparam-Interoperability">
			<title>Interoperability</title>
			<para>
				The <sgmltag>&lt;a4j:param&gt;</sgmltag> tag can be used with non-Ajax components in addition to Ajax components. This includes components which are working through the <code>GET</code> request, such as the <sgmltag>&lt;h:link&gt;</sgmltag> and <sgmltag>&lt;h:button&gt;</sgmltag> components. In this way, data model values can also be updated without any Java code on the server side.
			</para>
			<para>
				The <varname>converter</varname> attribute can be used to specify how to convert the value before it is submitted to the data model. The property is assigned the new value during the <emphasis>Update Model</emphasis> phase.
			</para>
			<note>
				<title>Validation failure</title>
				<para>
					If the validation of the form fails, the <emphasis>Update Model</emphasis> phase will be skipped and the property will not be updated.
				</para>
			</note>
		</section>

		<section id="sect-Component_Reference-a4jparam-Passing_client-side_parameters">
			<title>Passing client-side parameters</title>
			<para>
				Variables from JavaScript functions can be used for the <varname>value</varname> attribute. In such an implementation, the <varname>noEscape</varname> attribute should be set to <literal>true</literal>. Using <code>noEscape="true"</code>, the <varname>value</varname> attribute can contain any JavaScript expression or JavaScript function invocation, and the result will be sent to the server as the <varname>value</varname> attribute.
			</para>
			<example id="exam-Component_Reference-a4jparam-Passing_client-side_parameters">
				<title>Passing client-side parameters</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jparam-Passing_client-side_parameters.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The command button triggers the <sgmltag>&lt;a4j:param&gt;</sgmltag> behaviors and renders the output text. The <sgmltag>&lt;a4j:param&gt;</sgmltag> behaviors pass client-side parameters for the screen width and height through the backing bean. These parameters are then used to populate the output text values.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jparam-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Parameter</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIParameter</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Parameter</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.ParameterHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<!--  FIXME not in M2  -->
	<!--
	<section id="sect-Component_Reference-Actions-a4jajaxListener">
		<title><sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag></title>
		<itemizedlist>
			<listitem>
				<para>
					<parameter>listener-class</parameter>: <classname>org.ajax4jsf.event.AjaxListener</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>event-class</parameter>: <classname>org.ajax4jsf.event.AjaxEvent</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>handler-class</parameter>: <classname>org.ajax4jsf.view.facelets.html.jsp.AjaxListenerTag</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component adds an action listener to a parent component. It works similar to the JavaServer Faces <sgmltag>&lt;f:actionListener&gt;</sgmltag> or <sgmltag>&lt;f:valueChangeListener&gt;</sgmltag> components, except that the invocation of <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> is not canceled if validation of the <emphasis>Update Model</emphasis> phase fails. The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component is guaranteed to be invoked with each Ajax response.
		</para>
		<para>
			Basic usage requires only the <varname>type</varname> attribute, which defines the fully-qualified Java class name for the listener. This Java class should implement the <classname>org.ajax4jsf.event.AjaxListener</classname> interface, which is a base listener for all listeners and is capable of receiving Ajax events. The object from which the event originated could be accessed using the <methodname>java.util.EventObject.getSource()</methodname> method.
		</para>
		<para>
			The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component is not invoked for non-Ajax requests, or when the RichFaces works in the <emphasis>Ajax request generates non-Ajax response</emphasis> mode, so the <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> invocation is a good indicator that an Ajax response is going to be processed.
		</para>
	</section>
	-->

	<section id="sect-Component_Reference-Actions-a4jactionListener">
		<title><sgmltag>&lt;a4j:actionListener&gt;</sgmltag></title>
		<!--
		<note>
			<title>Documentation in development</title>
			<para>
				The documentation for this tag is still under development. Refer to the generated documentation mentioned in <xref linkend="chap-Component_Reference-Introduction" /> for reference details.
			</para>
		</note>
		-->
		<para>
			Use the <sgmltag>&lt;a4j:actionListener&gt;</sgmltag> tag to register an <classname>ActionListener</classname> class on a parent action component. The class provided as a listener must implement the <interfacename>javax.faces.event.ActionListener</interfacename> interface. Multiple listener methods can be registered on an action component in this way.
		</para>
		<para>
			The <sgmltag>&lt;a4j:actionListener&gt;</sgmltag> tag differs from the standard JSF tag by allowing a listener method to be defined instead of just a class. Use the <varname>listener</varname> attribute to define the listener method.
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jcommandButton">
		<title><sgmltag>&lt;a4j:commandButton&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component is similar to the JavaServer Faces (<acronym>JSF</acronym>) <sgmltag>&lt;h:commandButton&gt;</sgmltag> component, but additionally includes Ajax support.
		</para>
		<figure id="figu-Component_Reference-a4jcommandButton-a4jcommandButton">
			<title><sgmltag>&lt;a4j:commandButton&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-a4jcommandButton-a4jcommandButton.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A typical <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		<note>
			<title>The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component executes the complete form</title>
			<para>
				Button controls are typically used to perform complete form submissions for data storing. As a consequence, the <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component has the <code>execute="@form"</code> setting by default. To limit rendering to a different scope, redefine the <varname>execute</varname> attribute.
			</para>
		</note>
		
		<section id="sect-Component_Reference-a4jcommandButton-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> requires only the <varname>value</varname> attribute to function. Use the <varname>value</varname> attribute to specify the text of the button.
			</para>
			<para>
				By default, the <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> uses the <varname>click</varname> event instead of the <varname>submit</varname> event.
			</para>
			<!--
			<note>
				<title>Set <code>disabledDefault="true"</code></title>
				<para>
					When attaching a JavaScript function to a <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> with the help of a <sgmltag>&lt;rich:componentControl&gt;</sgmltag>, do not use the <varname>attachTo</varname> attribute of <sgmltag>&lt;rich:componentControl&gt;</sgmltag>. The attribute adds event handlers using <classname>Event.observe</classname> but <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> does not include this event.
				</para>
			</note>
			-->
		</section>
		
		<section id="sect-Component_Reference-a4jcommandButton-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.CommandButton</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UICommandButton</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.CommandButtonRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jcommandLink">
		<title><sgmltag>&lt;a4j:commandLink&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component is similar to the JavaServer Faces (<acronym>JSF</acronym>) <sgmltag>&lt;h:commandLink&gt;</sgmltag> component, except that it includes plugged-in Ajax behavior.
		</para>
		<figure id="figu-Component_Reference-a4jcommandLink-a4jcommandLink">
			<title><sgmltag>&lt;a4j:commandLink&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-a4jcommandLink-a4jcommandLink.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A typical <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		<note>
			<title>The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component executes the complete form</title>
			<para>
				Link controls are typically used to perform complete form submissions for data storing. As a consequence, the <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> component has the <code>execute="@form"</code> setting by default. To limit rendering to a different scope, redefine the <varname>execute</varname> attribute.
			</para>
		</note>
		
		<section id="sect-Component_Reference-a4jcommandLink-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> requires only the <varname>value</varname> attribute to function. Use the <varname>value</varname> attribute to specify the text of the link.
			</para>
			<para>
				The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> uses the <varname>click</varname> event instead of the <varname>submit</varname> event.
			</para>
		</section>
		
		<section id="sect-Component_Reference-a4jcommandLink-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.CommandLink</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UICommandLink</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.CommandLinkRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!-- TODO not in M2 -->
	<!--
	<section id="sect-Component_Reference-Actions-a4jhashParam">
		<title><sgmltag>&lt;a4j:hashParam&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	-->
	
	<!-- FIXME not in M2 -->
	<!--
	<section id="sect-Component_Reference-Actions-a4jhtmlCommandLink">
		<title><sgmltag>&lt;a4j:htmlCommandLink&gt;</sgmltag></title>
		<itemizedlist>
			<listitem>
				<para>
					<parameter>component-type</parameter>: <classname>org.ajax4jsf.HtmlCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.HtmlCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.HtmlCommandLinkRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:htmlCommandLink&gt;</sgmltag> component functions similarly to the standard <sgmltag>&lt;h:commandLink&gt;</sgmltag> component, but addresses some of the potential issues that can occur.
		</para>
		<para>
			When using the standard component, hidden fields were not rendered to child elements if they were deemed unnecessary, so command links relating to content on the initial page could become broken if they were later updated through Ajax. The <sgmltag>&lt;a4j:htmlCommandLink&gt;</sgmltag> component addresses this by always rendering all hidden fields.
		</para>
	</section>
	-->
	
	<section id="sect-Component_Reference-Actions-a4jjsFunction">
		<title><sgmltag>&lt;a4j:jsFunction&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component performs Ajax requests directly from JavaScript code and retrieves server-side data. The server-side data is returned in JavaScript Object Notation (<acronym>JSON</acronym>) format prior to the execution of any JavaScript code defined using the <varname>oncomplete</varname> attribute.
		</para>
		
		<section id="sect-Component_Reference-a4jjsFunction-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component requires the <varname>data</varname> attribute. Use the <varname>data</varname> attribute to define where the retrieved server-side data is stored.
			</para>
			<para>
				<xref linkend="exam-Component_Reference-a4jjsFunction-a4jjsFunction_example" /> shows how an Ajax request can be initiated from the JavaScript and a partial page update performed. The JavaScript function can be invoked with the data returned by the Ajax response.
			</para>
			<example id="exam-Component_Reference-a4jjsFunction-a4jjsFunction_example">
				<title><sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jjsFunction-a4jjsFunction_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The output text for the name is changed depending on which table cell the user hovers over with the mouse. The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component manages the updating and display of the name.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jjsFunction-Parameters_and_JavaScript">
			<title>Parameters and JavaScript</title>
			<para>
				The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component allows the use of the <sgmltag>&lt;a4j:param&gt;</sgmltag> component or the JavaServer Faces <sgmltag>&lt;f:param&gt;</sgmltag> component to pass any number of parameters for the JavaScript function.
			</para>
		</section>
		
		<section id="sect-Component_Reference-a4jjsFunction-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Function</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIFunction</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Command</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.FunctionRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jpoll">
		<title><sgmltag>&lt;a4j:poll&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component allows periodical sending of Ajax requests to the server. It is used for repeatedly updating a page at specific time intervals.
		</para>
		
		<section id="sect-Component_Reference-a4jpoll-Timing_options">
			<title>Timing options</title>
			<para>
				The <varname>interval</varname> attribute specifies the time in milliseconds between requests. The default for this value is 1000 ms (1 second).
			</para>
			<para>
				The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component can be enabled and disabled using the <varname>enabled</varname> attribute. Using Expression Language (<acronym>EL</acronym>), the <varname>enabled</varname> attribute can point to a bean property to apply a particular attribute value.
			</para>
		</section>

		<!-- TODO: not in Final
		<section id="sect-Component_Reference-a4jpoll-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>start()</function></term>
		         <listitem>
		            <para>
		               Start polling the server.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>stop()</function></term>
		         <listitem>
		            <para>
		               Stop polling the server.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		-->
		
		<section id="sect-Component_Reference-a4jpoll-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Poll</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIPoll</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Poll</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.PollRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.html.AjaxPollHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jpush">
		<title><sgmltag>&lt;a4j:push&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:push&gt;</sgmltag> component performs real-time updates on the client side from events triggered at the server side. The events are pushed out to the client through the RichFaces messaging queue (which is bound to Java Messaging Service - <acronym>JMS</acronym>). When the <sgmltag>&lt;a4j:push&gt;</sgmltag> component is triggered by a server event, it can in turn cause Ajax updates and changes. 
		</para>
		<para>
			The <sgmltag>&lt;a4j:push&gt;</sgmltag> component uses the Comet model for pushing data to the client.
		</para>

		<section id="sect-Component_Reference-a4jpush-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:push&gt;</sgmltag> uses Atmosphere framework on both client-side and server-side. In order to use Atmosphere on server-side, it is necessary to add Atmosphere libraries into project.  
			</para>
            <para>
                It is possible to trigger push events on server-side in several ways:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>JMS</emphasis> - RichFaces Push consumes messages from enterprise messaging system and exposes them to client (tightly couples with JMS runtime) 
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>TopicsContext</emphasis> - accesses RichFaces message queue directly
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>Push CDI</emphasis> - uses CDI Events mechanism to access TopicsContext
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                On the client side, push notification may be processed by following ways: 
            </para>
             <itemizedlist>
                <listitem>
                    <para>
                        <code>ondataavailable</code> event attribute - <sgmltag>&lt;a4j:push&gt;</sgmltag> (serialized message is available through <parameter>event.rf.data</parameter>)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Attaching behavior to <code>dataavailable</code> event - any behavior may be attached (<sgmltag>&lt;a4j:ajax&gt;</sgmltag>, <sgmltag>&lt;rich:componentControl&gt;</sgmltag>, etc.)  
                    </para>
                </listitem>
            </itemizedlist>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Push_Topics">
            <title>Push Topics</title>
            <para>
                No matter which type way of producing messages is chosen, message is delivered to the client based on the topic name (with optional subtopic). 
            </para>
            <para>
                Examples of topic names might be <code>someTopic</code> or <code>subtopic@anotherTopic</code>.
            </para>
            <note>
                Push topic name format is very close to JMS topic names and thus enables seamless transport of JMS messages to RichFaces message queue.
            </note>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Handling_a_push_notification">
            <title>Handling a push notification</title>
            <para>
                A push notification from server sent to the <sgmltag>&lt;a4j:push&gt;</sgmltag> component on client will cause it to trigger any event handlers defined using the <varname>dataavailable</varname> event handler. 
            </para>
            <para>
                The <sgmltag>&lt;a4j:push&gt;</sgmltag> component should also include the <varname>error</varname> event handler to inform the user when an error has occurred with the push notifications.
            </para>
            <para>
                Topic name may be determined dynamically in runtime, using Expression Language expressions.
            </para>
            <example id="exam-Component_Reference-a4jpush-Handling_a_push_notification">
                <title>Handling a push notification</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Handling_a_push_notification.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    The example uses the <varname>dataavailable</varname> event attribute with JavaScript to update messages in a chat room. The <parameter>event.rf.data</parameter> parameter contains JMS message data serialized to JavaScript.
                </para>
            </example>
            <para>
                <sgmltag>&lt;a4j:push&gt;</sgmltag> can be used for both, immediate processing of message (like in example above) or it can trigger partial page update.
            </para>
            <example id="exam-Component_Reference-a4jpush-Updating_DOM_for_each_push_notification">
                <title>Updating DOM for each push notification</title>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Updating_DOM_for_each_push_notification.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    The example uses the <varname>dataavailable</varname> event handler to trigger AJAX request and partial page update.
                </para>
            </example>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Push_and_JMS_integration">
			<title>Push and JMS integration</title>
			<para>
				The JMS instance on the back-end must be configured to work with your <sgmltag>&lt;a4j:push&gt;</sgmltag> components. Refer to the <citetitle>JBoss Application Server Administration Console Guide</citetitle> for details on managing JBoss Application Server through the Administration Console.
			</para>
			<example id="exam-Component_Reference-a4jpush-JMS_server_configuration">
				<title>JMS server configuration</title>
				<para>
					This example describes the JMS server configuration required for a simple chat room. The chat room requires topics on the JMS server for the push functionality to check for new messages. Create a new JMS topic using the following settings:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<guilabel>Name:</guilabel> chat
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>JNDI name:</guilabel> /topic/chat
						</para>
					</listitem>
					<listitem>
						<para>
							Use the default settings for other options.
						</para>
					</listitem>
				</itemizedlist>
				<para>
					Add a single role for the topic in the same form using the following settings:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<guilabel>Name:</guilabel> guest
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>Send:</guilabel> true
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>Consume:</guilabel> true
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>Create subscriber:</guilabel> true
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>Delete subscriber:</guilabel> true
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>Create durable subscriber:</guilabel> true
						</para>
					</listitem>
					<listitem>
						<para>
							<guilabel>Delete durable subscriber:</guilabel> true
						</para>
					</listitem>
				</itemizedlist>
			</example>
			<para>
				Ensure the <guilabel>Create durable subscriber</guilabel> and <guilabel>Delete durable subscriber</guilabel> options are set to <guilabel>true</guilabel> for push functionality. Durable subscriptions receive all events, including those events which were sent while the push component was not connected.
			</para>
			<para>
				Refer to <citetitle>JMS Documentation</citetitle> for details on configuring the JMS Server. 
			</para>
			<para>
				With the JMS server configured, use the <sgmltag>&lt;a4j:push&gt;</sgmltag> component's <varname>address</varname> attribute to reference the topic on the JMS server that contains the pushed messages.
			</para>
			<example id="exam-Component_Reference-a4jpush-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Basic_usage.java" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The example demonstrates a simple use of the <sgmltag>&lt;a4j:push&gt;</sgmltag> causing immediate update of page content.
				</para>
			</example>
		</section>
        
        <section id="sect-Component_Reference-a4jpush-Using_Push_without_JMS">
            <title>Using Push without JMS</title>
            <para>
                Since JMS coupling may be unwanted in certain cases, RichFaces provides switch which turns off JMS integration: 
            </para>
            <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Using_Push_without_JMS.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            <para>
                This switch is important in situations when you want to use alternative situations of sending push notifications: <emphasis>Push CDI</emphasis> or <code>TopicsContext</code> programmatic interface.
            </para>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Using_TopicsContext_to_publish_message">
            <title>Using TopicsContext to publish message</title>
            <para>
                 Alternative way of producing messages is using <code>TopicsContext</code> interface directly as in following sample:
            </para>
            <programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Using_TopicsContext_to_publish_message.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            <para>
                Sending message using <code>TopicsContext</code> involves creating <code>TopicKey</code> instance (denominator of given message topic) and looking up for <code>TopicsContext</code> used for topic registration and message publishing.
            </para>
            <important id="important-Component_Reference-a4jpush-Limitations_for_using_TopicsContext_interface">
                <title>Limitations for using <code>TopicsContext</code> interface</title>
                <para>
                    For using <code>TopicsContext</code> is it necessary having <code>FacesContext</code> instance available in current thread.
                </para>
                <para>
                    The method <code>TopicsContext.lookup()</code> can be called only in context of web application class loader (<code>ServiceTracker</code> needs to be accessible for given application).
                </para>
            </important>
        </section>
        
        <section id="sect-Component_Reference-a4jpush-Push_CDI_Integration">
            <title>Integrating Push with CDI events</title>
            <para>
                Second alternative way of producing messages is using CDI Events mechanism.
            </para>
            <para>
                Push notifications can be produced by annotating CDI event with <code>@Push</code> annotation, which specifies end-point (topic name).
            </para>
            <para>
                Payload of the message is the serialized object sent using CDI event interface (<code>Event.fire(T object)</code>).
            </para>
            <programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-a4jpush-Integrating_Push_with_CDI_events.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            <important>
                For using CDI events for producing push notifications, same <link linkend="important-Component_Reference-a4jpush-Limitations_for_using_TopicsContext_interface">limitations</link> applies as for using <code>TopicsContext</code> interface.
            </important>
            <note>
                Associations for CDI events and their handlers are constructed in application deployment. Therefore topics can't be dynamically associated using <code>Event.select(Annotation...)</code> and <code>@Push</code> CDI qualifier. 
            </note>
        </section>
		
		<section id="sect-Component_Reference-a4jpush-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Push</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIPush</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Push</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.PushRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>

</chapter>

