<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Panels_and_containers">
	<title>Panels and containers</title>
	<!--  In development notification  -->
	<important>
		<title>Documentation in development</title>
		<para>
			Some concepts covered in this chapter may refer to the previous version of <productname>Richfaces</productname>, version 3.3.3. This chapter is scheduled for review to ensure all information is up to date.
		</para>
	</important>
	<para>
		This chapter details those components which act as panels and containers to hold groups of other components.
	</para>
	
	<!--<rich:accordion>-->
	<section id="sect-Component_Reference-Panels_and_containers-richaccordion">
		<title><sgmltag>&lt;rich:accordion&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:accordion&gt;</sgmltag> is a series of panels stacked on top of each other, each collapsed such that only the header of the panel is showing. When the header of a panel is clicked, it is expanded to show the content of the panel. Clicking on a different header will collapse the previous panel and epand the selected one. Each panel contained in a <sgmltag>&lt;rich:accordion&gt;</sgmltag> component is a <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component.
		</para>
		<figure id="figu-Component_Reference-richaccordion-richaccordion">
			<title>A <sgmltag>&lt;rich:accordion&gt;</sgmltag> component containing three <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> components</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richaccordion-richaccordion.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:accordion&gt;</sgmltag> component containing three <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> components. Only the first panel is expanded.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richaccordion-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:accordion&gt;</sgmltag> component requires no attributes for basic usage. The component can contain any number of <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> components as children. The headers of the <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> components control the expanding and collapsing when clicked. Only a single <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> can be displayed at a time. Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richaccordionItem" /> for details on the <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richaccordion-Switching_panels">
			<title>Switching panels</title>
			<para>
				The switching mode for performing submissions is determined by the <code>switchType</code> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							The default setting. Activation of a <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component causes the parent <sgmltag>&lt;rich:accordion&gt;</sgmltag> component to perform a common submission, completely re-rendering the page. Only one panel at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							Activation of a <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component causes the parent <sgmltag>&lt;rich:accordion&gt;</sgmltag> component to perform an Ajax form submission, and the content of the panel is rendered. Only one panel at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							Activation of a <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component causes the parent <sgmltag>&lt;rich:accordion&gt;</sgmltag> component to update on the client side. JavaScript changes the styles such that one panel component becomes hidden while the other is shown.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<!-- TODO
		<section id="sect-Component_Reference-richaccordion-Controlling_panel_size">
			<title>Controlling panel size</title>
			<para>
				Unlike the <sgmltag>&lt;rich:panel&gt;</sgmltag> component, the size of the <sgmltag>&lt;rich:accordion&gt;</sgmltag> can be specified using <varname>width</varname> and <varname>height</varname> attributes. If unspecified, these values default to 100%.
			</para>
		</section>
		-->
		
		<section id="sect-Component_Reference-richaccordion-richaccordion_client-side_events">
			<title><sgmltag>&lt;rich:accordion&gt;</sgmltag> client-side events</title>
			<para>
				In addition to the standard Ajax events and HTML events, the <sgmltag>&lt;rich:accordion&gt;</sgmltag> component uses the client-side events common to all switchable panels:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>onitemchange</varname> event points to the function to perform when the switchable item is changed.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>onbeforeitemchange</varname> event points to the function to perform when before the switchable item is changed.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richaccordion-richaccordion_server-side_events">
			<title><sgmltag>&lt;rich:accordion&gt;</sgmltag> server-side events</title>
			<para>
				The <sgmltag>&lt;rich:accordion&gt;</sgmltag> component uses the server-side events common to all switchable panels:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>ItemChangeEvent</varname> event occurs on the server side when an item is changed through Ajax using the <literal>server</literal> mode. It can be processed using the <varname>ItemChangeListener</varname> attribute.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richaccordion-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.accordion</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlAccordion</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.accordion</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.accordionRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.accordionTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:accordionItem>-->
	<section id="sect-Component_Reference-Panels_and_containers-richaccordionItem">
		<title><sgmltag>&lt;rich:accordionItem&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component is a panel for use with the <sgmltag>&lt;rich:accordion&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richaccordion" /> for details on the <sgmltag>&lt;rich:accordion&gt;</sgmltag> component.
		</para>
		<figure id="figu-Component_Reference-richaccordionItem-richaccordion">
			<title>A <sgmltag>&lt;rich:accordion&gt;</sgmltag> component containing three <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> components</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richaccordion-richaccordion.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:accordion&gt;</sgmltag> component containing three <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> components. Only the first panel is expanded.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richaccordionItem-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component requires the <varname>label</varname> attribute, which provides the text on the panel header. The panel header is all that is visible when the accordion item is collapsed.
			</para>
			<para>
				Alternatively the <literal>header</literal> facet could be used in place of the <varname>label</varname> attribute. This would allow for additional styles and custom content to be applied to the tab.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richaccordionItem-richaccordionItem_client-side_events">
			<title><sgmltag>&lt;rich:accordionItem&gt;</sgmltag> client-side events</title>
			<para>
				In addition to the standard HTML events, the <sgmltag>&lt;rich:accordionItem&gt;</sgmltag> component uses the client-side events common to all switchable panel items:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>onenter</varname> event points to the function to perform when the mouse enters the panel.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>onleave</varname> attribute points to the function to perform when the mouse leaves the panel.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richaccordionItem-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.accordionItem</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlAccordionItem</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.accordionItem</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.accordionItemRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.accordionItemTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:panel>-->
	<section id="sect-Component_Reference-Panels_and_containers-richpanel">
		<title><sgmltag>&lt;rich:panel&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:panel&gt;</sgmltag> component is a bordered panel with an optional header.
		</para>
		<figure id="figu-Component_Reference-richpanel-richpanel">
			<title><sgmltag>&lt;rich:panel&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richpanel-richpanel.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:Panel&gt;</sgmltag> component displaying details on a camera model.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		<section id="sect-Component_Reference-richpanel-Basic_usage">
			<title>Basic usage</title>
			<para>
				No attributes need to be listed for basic usage. a <sgmltag>&lt;rich:panel&gt;</sgmltag> without any attributes defined renders a bordered region with no header.
			</para>
		</section>
		<section id="sect-Component_Reference-richpanel-Adding_a_header">
			<title>Adding a header</title>
			<para>
				To add a header to the panel, use the <varname>header</varname> attribute to specify the text to appear in the header. Alternatively the header can be constructed using a header facet. <xref linkend="exam-Component_Reference-richpanel-Adding_a_header" /> demonstrates the two different approaches.
			</para>
			<example id="exam-Component_Reference-richpanel-Adding_a_header">
				<title>Adding a header</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richpanel-Adding_a_header-0.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richpanel-Adding_a_header-1.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					Both the examples render an identical panel.
				</para>
				<blockquote>
					<figure id="figu-Component_Reference-richpanel-Adding_a_header">
						<title>Adding a header</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richpanel-Adding_a_header.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									A panel with a header that reads <phrase>"This is the panel header"</phrase> and content that reads <phrase>"This is the panel content"</phrase>.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richpanel-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.panel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.panel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.panelRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.panelTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:popupPanel>-->
	<section id="sect-Component_Reference-Panels_and_containers-richpopupPanel">
		<title><sgmltag>&lt;rich:popupPanel&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component provides a pop-up panel or window that appears in front of the rest of the application. The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component functions either as a modal window which blocks interaction with the rest of the application while active, or as a non-modal window. It can be positioned on the screen, dragged to a new position by the user, and re-sized.
		</para>
		
		<section id="sect-Component_Reference-richpopupPanel-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> does not require any compulsory attributes, though certain use cases require different attributes.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richpopupPanel-Showing_and_hiding_the_pop-up">
			<title>Showing and hiding the pop-up</title>
			<para>
				If <code>show="true"</code> then the pop-up panel will display when the page is first loaded.
			</para>
			<para>
				The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component can be shown and hidden manually using the <code>show()</code> and <code>hide()</code> methods from the JavaScript API. These can be implemented using two different approaches:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Using the <sgmltag>&lt;rich:componentControl&gt;</sgmltag> component. For details on the component, refer to <xref linkend="sect-Component_Reference-Actions-richcomponentControl" />.
					</para>
				</listitem>
				<listitem>
					<para>
						Using the <code>rich:component</code> function. For details on the function, refer to <xref linkend="sect-Component_Reference-Functions-richcomponent" />.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				For explicit referencing when using the functions, the component can be given an <varname>id</varname> identifier. The component can, however, be referenced using other means, such as through a selector.
			</para>
			<para>
				<xref linkend="exam-Component_Reference-richpopupPanel-richpopupPanel_example" /> demonstrates basic use of both the <sgmltag>&lt;rich:componentControl&gt;</sgmltag> component and the <code>rich:component</code> function to show and hide the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component.
			</para>
			<example id="exam-Component_Reference-richpopupPanel-richpopupPanel_example">
				<title><sgmltag>&lt;rich:popupPanel&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richpopupPanel-richpopupPanel_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<important>
				<title>Placement</title>
				<para>
					The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component should usually be placed outside the original form, and include its own form if performing submissions. An exception to this is when using the <varname>domElementAttachment</varname> attribute, as described in <xref linkend="sect-Component_Reference-richpopupPanel-Size_and_positioning" />.
				</para>
			</important>
		</section>
		
		<section id="sect-Component_Reference-richpopupPanel-Modal_and_non-modal_panels">
			<title>Modal and non-modal panels</title>
			<para>
				By default, the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> appears as a modal window that blocks interaction with the other objects on the page. To implement a non-modal window instead, set <code><varname>modal</varname>="false"</code>. This will allow interaction with other objects outside the pop-up panel.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richpopupPanel-Size_and_positioning">
			<title>Size and positioning</title>
			<para>
				The pop-up panel can be both re-sized and re-positioned by the user. The minimum possible size for the panel can be set with the <varname>minWith</varname> and <varname>minHeight</varname> attributes. These abilities can be deactivated by setting <code>resizable</code> or <code>movable</code> to <literal>false</literal> as necessary.
				<!--
				The state of the modal panel, including size and position on screen, can be maintained and restored after submitting and reloading by setting <code>keepVisualState="true"</code>.
				-->
			</para>
			<para>
				The pop-up panel can be automatically sized when it is shown if the <varname>autosized</varname> attribute is set to <literal>true</literal>.
			</para>
			<para>
				The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component is usually rendered in front of any other objects on the page. This is achieved by attaching the component to the <sgmltag>&lt;body&gt;</sgmltag> element of the page, and setting a very high <emphasis>"z-index"</emphasis> (the stack order of the object). This approach is taken because relatively-positioned elements could still overlap the pop-up panel if they exist at higher levels of the <acronym>DOM</acronym> hierarchy, even if their z-index is less than the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component. However, to avoid form limitation of the pop-up panel on pages where no such elements exist, the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component can be reattached to its original <acronym>DOM</acronym> element by setting <varname>domElementAttachment</varname> to either <literal>parent</literal> or <literal>form</literal>.
			</para>
			<para>
				Embedded objects inserted into the <acronym>HTML</acronym> with the <sgmltag>&lt;embed&gt;</sgmltag> tag will typically be rendered in front of a <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component. The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component can be forcibly rendered in front of these objects by setting <code><varname>overlapEmbedObjects</varname>="true"</code>.
			</para>
			<note>
				<title>Using <varname>overlapEmbedObjects</varname></title>
				<para>
					Due to the additional script processing required when using the <varname>overlapEmbedObjects</varname> attribute, applications can suffer from decreased performance. As such, <varname>overlapEmbedObjects</varname> should only be set to <literal>true</literal> when <sgmltag>&lt;embed&gt;</sgmltag> tags are being used. Do not set it to <literal>true</literal> for applications that do not require it.
				</para>
			</note>
		</section>
		
		<section id="sect-Component_Reference-richpopupPanel-Contents_of_the_pop-up">
			<title>Contents of the pop-up</title>
			<para>
			    The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component can contain any other rich component just like a normal panel.
			</para>
			<para>
				Contents of the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component which are positioned relatively may be trimmed if they extend beyond the borders of the pop-up panel. For certain in-line controls this behavior may be preferable, but for other dynamic controls it could be undesirable. If the <varname>trimOverlayedElements</varname> attribute is set to <literal>false</literal> then child components will not be trimmed if they extend beyond the borders of the pop-up panel.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richpopupPanel-Header_and_controls">
			<title>Header and controls</title>
			<para>
				A panel header and associated controls can be added to the <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component through the use of facets. The <literal>header</literal> facet displays a title for the panel, and the <literal>controls</literal> facet can be customized to allow window controls such as a button for closing the pop-up. <xref linkend="exam-Component_Reference-richpopupPanel-Header_and_controls" /> demonstrates the use of the facets.
			</para>
			<example id="exam-Component_Reference-richpopupPanel-Header_and_controls">
				<title>Header and controls</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richpopupPanel-Header_and_controls.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<blockquote>
					<figure id="figu-Component_Reference-richpopupPanel-Header_and_controls">
						<title>Header and controls</title>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/figu-Component_Reference-richpopupPanel-Header_and_controls.png" format="PNG" />
							</imageobject>
							<textobject>
								<para>
									The <sgmltag>&lt;rich:popupPanel&gt;</sgmltag> component, rendered with a title header and a button control for closing the pop-up.
								</para>
							</textobject>
						</mediaobject>
					</figure>
				</blockquote>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richpopupPanel-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.popupPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlpopupPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.popupPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.popupPanelRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.popupPanelTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:collapsiblePanel>-->
	<section id="sect-Component_Reference-Panels_and_containers-richcollapsiblePanel">
		<title><sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component is a collapsible panel that shows or hides content when the header bar is activated. It is a simplified version of <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component.
		</para>
		<figure id="figu-Component_Reference-richcollapsiblePanel-richcollapsiblePanel">
			<title><sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richcollapsiblePanel-richcollapsiblePanel.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component displaying details on a camera model.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richcollapsiblePanel-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage requires the <varname>header</varname> attribute to be specified, which provides the title for the header element. Additionally the panel requires content to display when it is expanded. Content is added as child elements like a standard panel.
			</para>
		</section>

		<section id="sect-Component_Reference-richcollapsiblePanel-Expanding_and_collapsing_the_panel">
			<title>Expanding and collapsing the panel</title>
			<!-- TODO not in M3 -->
			<!--
			<para>
				If the <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component uses <code><varname>expanded</varname>="true"</code>, the panel is open and expanded, otherwise it is closed and collapsed.
			</para>
			<para>
				The <varname>toggleElement</varname> attribute is used to specify which user interface element triggers the expansion when clicked. It can have one of the following values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>header</literal></term>
					<listitem>
						<para>
							This is the default setting. Clicking anywhere on the header of the panel will cause it to expand or collapse.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>panel</literal></term>
					<listitem>
						<para>
							Clicking anywhere on the entire panel will cause it to expand or collapse.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>control</literal></term>
					<listitem>
						<para>
							The panel can only be expanded or collapsed by clicking on the control in the right-hand side of the header.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			-->
			<para>
				The switching mode for performing submissions is determined by the <varname>switchType</varname> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							This is the default setting. The <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component performs a common submission, completely re-rendering the page. Only one panel at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component performs an Ajax form submission, and only the content of the panel is rendered. Only one panel at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component updates on the client side, re-rendering itself and any additional components listed with the <varname>render</varname> attribute.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sect-Component_Reference-richcollapsiblePanel-Appearance">
			<title>Appearance</title>
			<para>
				The appearance of the <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component can be customized using facets. The <literal>headerExpanded</literal> and <literal>headerCollapsed</literal> facets are used to style the appearance of the panel when it is expanded and collapsed respectively. The <literal>expandControl</literal> facet styles the control in the panel header used for expanding, and the <literal>collapseControl</literal> facet styles the control for collapsing.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richcollapsiblePanel-richcollapsiblePanel_server-side_events">
			<title><sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> server-side events</title>
			<para>
				The <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component uses the following unique server-side events:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>ChangeExpandEvent</varname> event occurs on the server side when the <sgmltag>&lt;rich:collapsiblePanel&gt;</sgmltag> component is expanded or collapsed through Ajax using the <literal>server</literal> mode. It can be processed using the <varname>ChangeExpandListener</varname> attribute.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richcollapsiblePanel-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.collapsiblePanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlcollapsiblePanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.collapsiblePanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.collapsiblePanelRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.collapsiblePanelTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
	
	<!--<rich:tab>-->
	<section id="sect-Component_Reference-Panels_and_containers-richtab">
		<title><sgmltag>&lt;rich:tab&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:tab&gt;</sgmltag> component represents an individual tab inside a <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component, including the tab's content. Clicking on the tab header will bring its corresponding content to the front of other tabs. Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richtabPanel" /> for details on the <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component.
		</para>
		
		<figure id="figu-Component_Reference-richtab-richtabPanel_component">
			<title>A <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component containing three <sgmltag>&lt;rich:tab&gt;</sgmltag> components</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richtabPanel-richtabPanel_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component containing three <sgmltag>&lt;rich:tab&gt;</sgmltag> components.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richtab-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;rich:tab&gt;</sgmltag> component requires the <varname>name</varname> attribute to uniquely identify the tab within the parent <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component. As the tabs are switched, the <varname>name</varname> identifier of the currently selected tab is stored in the <varname>activeItem</varname> attribute of the parent <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component.
			</para>
		</section>

		<section id="sect-Component_Reference-richtab-Header_labeling">
			<title>Header labeling</title>
			<para>
				In addition to the <varname>name</varname> identifier, the <varname>header</varname> attribute must be defined. The <varname>header</varname> attribute provides the text on the tab header. The content of the tab is then detailed inside the <sgmltag>&lt;rich:tab&gt;</sgmltag> tags.
			</para>
			<para>
				Alternatively, the <literal>header</literal> facet could be used in place of the <varname>header</varname> attribute. This would allow for additional styles and custom content to be applied to the tab. The component also supports three facets to customize the appearance depending on the current state of the tab:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>headerActive</literal> facet</term>
					<listitem>
						<para>
							This facet is used when the tab is the currently active tab.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>headerInactive</literal> facet</term>
					<listitem>
						<para>
							This facet is used when the tab is not currently active.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>headerDisabled</literal> facet</term>
					<listitem>
						<para>
							This facet is used when the tab is disabled.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The <literal>header</literal> facet is used in place of any state-based facet that has not been defined.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richtab-Switching_tabs">
			<title>Switching tabs</title>
			<para>
				The switching mode for performing submissions can be inherited from the <varname>switchType</varname> attribute of the parent <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component, or set individually for each <sgmltag>&lt;rich:tab&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richtabPanel" /> for details on the <varname>switchType</varname> attribute.
			</para>
			<para>
				An individual tab can be disabled by setting <code><varname>disabled</varname>="true"</code>. Disabled tabs cannot be activated or switched to.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richtab-richtab_client-side_events">
			<title><sgmltag>&lt;rich:tab&gt;</sgmltag> client-side events</title>
			<para>
				In addition to the standard HTML events, the <sgmltag>&lt;rich:tab&gt;</sgmltag> component uses the client-side events common to all switchable panel items:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>onenter</varname> event points to the function to perform when the mouse enters the tab.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>onleave</varname> attribute points to the function to perform when the mouse leaves the tab.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richtab-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.tab</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlTab</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.tab</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.tabRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.tabTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:tabPanel>-->
	<section id="sect-Component_Reference-Panels_and_containers-richtabPanel">
		<title><sgmltag>&lt;rich:tabPanel&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component provides a set of tabbed panels for displaying one panel of content at a time. The tabs can be highly customized and themed. Each tab within a <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> container is a <sgmltag>&lt;rich:tab&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richtab" /> for further details on the <sgmltag>&lt;rich:tab&gt;</sgmltag> component.
		</para>
		<figure id="figu-Component_Reference-richtabPanel-richtabPanel_component">
			<title>A <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component containing three <sgmltag>&lt;rich:tab&gt;</sgmltag> components</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richtabPanel-richtabPanel_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component containing three <sgmltag>&lt;rich:tab&gt;</sgmltag> components.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		<note>
			<title>Form elements required</title>
			<para>
				All <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> components should be wrapped in a form element so that the contents of the tab are processed correctly during a tab change in either <literal>ajax</literal> or <literal>server</literal> mode.
			</para>
			<para>
				Alternatively, the contents of a <sgmltag>&lt;rich:tab&gt;</sgmltag> component within the <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component could be wrapped in a form element, such that they will be processed using the inner submitting component only. In this case, the <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component will automatically add form tags around the tab's contents, and the contents will not be processed during switching.
			</para>
		</note>
		
		<section id="sect-Component_Reference-richtabPanel-Switching_tabs">
			<title>Switching panels</title>
			<para>
				The <code>activeItem</code> attribute holds the active tab name. This name is a reference to the <varname>name</varname> identifier of the active child <sgmltag>&lt;rich:tab&gt;</sgmltag> component.
			</para>
			<para>
				The switching mode for performing submissions is determined by the <code>switchType</code> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							The default setting. Activation of a <sgmltag>&lt;rich:tab&gt;</sgmltag> component causes the parent <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component to perform a common submission, completely re-rendering the page. Only one tab at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							Activation of a <sgmltag>&lt;rich:tab&gt;</sgmltag> component causes the parent <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component to perform an Ajax form submission, and the content of the tab is rendered. Only one tab at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							Activation of a <sgmltag>&lt;rich:tab&gt;</sgmltag> component causes the parent <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component to update on the client side. JavaScript changes the styles such that one tab becomes hidden while the other is shown.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<!-- FIXME details on name attribute -->

		<!-- TODO not in M3 -->
		<!--
		<section id="sect-Component_Reference-richtabPanel-Tab_position_and_alignment">
			<title>Tab position and alignment</title>
			<para>
				The tab headers, used for switching between the tabs, can be positioned along any edge of the panel by using the <varname>headerPosition</varname> attribute. The possible values for the <varname>headerPosition</varname> attribute are as follows:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>top</literal></term>
					<listitem>
						<para>
							The tab headers are positioned along the top of the panel. This is the default position.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>left</literal></term>
					<listitem>
						<para>
							The tab headers are positioned along the left edge of the panel.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>right</literal></term>
					<listitem>
						<para>
							The tab headers are positioned along the right edge of the panel.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>bottom</literal></term>
					<listitem>
						<para>
							The tab headers are positioned along the bottom of the panel.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The tab headers themselves can be aligned using the <code>headerAlignment</code> attribute. The possible values for the <varname>headerAlignment</varname> attribute are as follows:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>top</literal></term>
					<listitem>
						<para>
							The tab headers are aligned to the top of the tab header position.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>left</literal></term>
					<listitem>
						<para>
							The tab headers are aligned to the left of the tab header position. This is the default alignment.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>right</literal></term>
					<listitem>
						<para>
							The tab headers are aligned to the right of the tab header position.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>bottom</literal></term>
					<listitem>
						<para>
							The tab headers are aligned to the bottom of the tab header position.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>center</literal></term>
					<listitem>
						<para>
							The tab headers are aligned in the center of the tab header position.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		-->
		
		<section id="sect-Component_Reference-richtabPanel-richtabPanel_client-side_events">
			<title><sgmltag>&lt;rich:tabPanel&gt;</sgmltag> client-side events</title>
			<para>
				In addition to the standard Ajax events and HTML events, the <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component uses the client-side events common to all switchable panels:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>onitemchange</varname> event points to the function to perform when the switchable item is changed.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>onbeforeitemchange</varname> event points to the function to perform when before the switchable item is changed.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richtabPanel-richtabPanel_server-side_events">
			<title><sgmltag>&lt;rich:tabPanel&gt;</sgmltag> server-side events</title>
			<para>
				The <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component uses the server-side events common to all switchable panels:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>ItemChangeEvent</varname> event occurs on the server side when an item is changed through Ajax using the <literal>server</literal> mode. It can be processed using the <varname>ItemChangeListener</varname> attribute.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richtabPanel-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.tabPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlTabPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.tabPanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.tabPanelRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.tabPanelTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:toggleControl>-->
	<section id="sect-Component_Reference-Panels_and_containers-richtoggleControl">
		<title><sgmltag>&lt;rich:toggleControl&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> behavior can be attached to any interface component. It works with a <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component to switch between different <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> components.
		</para>
		<para>
			Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richtogglePanel" /> and <xref linkend="sect-Component_Reference-Panels_and_containers-richtogglePanelItem" /> for details on how to use the components together.
		</para>
		
		<section id="sect-Component_Reference-richtoggleControl-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> can be used to switch through <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> components in a <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> container. If the <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> component is positioned inside a <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component, no attributes need to be defined, as the control is assumed to switch through the <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> components of its parent.
			</para>
			<para>
				A <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> component can be located outside the <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component it needs to switch. Where this is the case, the <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> is identified using the <varname>activePanel</varname> attribute. the  Cycling through components requires the <varname>for</varname> attribute, which points to the <varname>id</varname> identifier of the <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> that it controls.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richtoggleControl-Specifying_the_next_state">
			<title>Specifying the next state</title>
			<para>
				The <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> component will cycle through <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> components in the order they are defined within the view. However, the next item to switch to can be explicitly defined by including a <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> component within a <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> and using the <varname>targetItem</varname> attribute. The <varname>targetItem</varname> attribute points to the <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> to switch to when the state is next changed. <xref linkend="exam-Component_Reference-richtoggleControl-richtoggleControl_example" /> demonstrates how to specify the next switchable state in this way.
			</para>
			<example id="exam-Component_Reference-richtoggleControl-richtoggleControl_example">
				<title><sgmltag>&lt;rich:toggleControl&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtoggleControl-richtoggleControl_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richtoggleControl-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.ToggleControl</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlToggleControl</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.ToggleControl</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.ToggleControlRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ToggleControlTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<!--<rich:togglePanel>-->
	<section id="sect-Component_Reference-Panels_and_containers-richtogglePanel">
		<title><sgmltag>&lt;rich:togglePanel&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component is a wrapper for multiple <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> components. Each child component is displayed after being activated with the <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> behavior.
		</para>
		<para>
			Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richtoggleControl" /> and <xref linkend="sect-Component_Reference-Panels_and_containers-richtogglePanel" /> for details on how to use the components together.
		</para>
		<para>
			The <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component is used as a base for the other switchable components, the <sgmltag>&lt;rich:accordion&gt;</sgmltag> component and the <sgmltag>&lt;rich:tabPanel&gt;</sgmltag> component. It provides an abstract switchable component without any associated markup. As such, the <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component could be customized to provide a switchable component when neither an accordion component or a tab panel component is appropriate.
		</para>
		
		<section id="sect-Component_Reference-richtogglePanel-Basic_usage">
			<title>Basic usage</title>
			<para>
				The initial state of the component can be configured using the <varname>activeItem</varname> attribute, which points to a child component to display. Alternatively, if no <varname>activeItem</varname> attribute is defined, the initial state will be blank until the user activates a child component using the <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> component.
			</para>
			<para>
				The child components are shown in the order in which they are defined in the view.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richtogglePanel-Toggling_between_panels">
			<title>Toggling between components</title>
			<para>
				The switching mode for performing submissions is determined by the <code>switchType</code> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							The default setting. Activation of a child component causes the parent <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component to perform a common submission, completely re-rendering the page. Only one child at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							Activation of a child component causes the parent <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component to perform an Ajax form submission, and the content of the child is rendered. Only one child at a time is uploaded to the client side.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							Activation of a child component causes the parent <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component to update on the client side. JavaScript changes the styles such that one child component becomes hidden while the other is shown.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sect-Component_Reference-richtogglePanel-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.TogglePanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlTogglePanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.TogglePanel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.TogglePanelRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.TogglePanelTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!--<rich:togglePanelItem>-->
	<section id="sect-Component_Reference-Panels_and_containers-richtogglePanelItem">
		<title><sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> component is a switchable panel for use with the <sgmltag>&lt;rich:togglePanel&gt;</sgmltag> component. Switching between <sgmltag>&lt;rich:togglePanelItem&gt;</sgmltag> components is handled by the <sgmltag>&lt;rich:toggleControl&gt;</sgmltag> behavior.
		</para>
		<para>
			Refer to <xref linkend="sect-Component_Reference-Panels_and_containers-richtoggleControl" /> and <xref linkend="sect-Component_Reference-Panels_and_containers-richtogglePanel" /> for details on how to use the components together.
		</para>
		
		<section id="sect-Component_Reference-richtogglePanelItem-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.TogglePanelItem</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlTogglePanelItem</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.TogglePanelItem</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.TogglePanelItemRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.TogglePanelItemTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
</chapter>

