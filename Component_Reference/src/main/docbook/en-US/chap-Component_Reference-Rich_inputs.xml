<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Rich_inputs">
	<title>Rich inputs</title>
	<para>
		This chapter details rich components for user input and interaction.
	</para>
	
	<!--<rich:autocomplete>-->
	<section id="sect-Component_Reference-Rich_inputs-richautocomplete">
		<title><sgmltag>&lt;rich:autocomplete&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component is an auto-completing input-box with built-in Ajax capabilities. It supports client-side suggestions, browser-like selection, and customization of the look and feel.
		</para>
		<para>
			The auto-complete box is a standard JSF <classname>UIInput</classname> control with added validation.
		</para>
		<!-- TODO not in Final -->
		<!--
		<para>
			To attach an auto-completion behavior to other components, use the <sgmltag>&lt;rich:autocompleteBehavior&gt;</sgmltag> behavior. Refer to <xref linkend="sect-Component_Reference-Rich_inputs-richautocompleteBehavior" /> for full details on the <sgmltag>&lt;rich:autocompleteBehavior&gt;</sgmltag> behavior.
		</para>
		-->
		<figure id="figu-Component_Reference-richautocomplete-richautocomplete">
			<title><sgmltag>&lt;rich:autocomplete&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richautocomplete-richautocomplete.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component. The letter <wordasword>A</wordasword> has been entered, such that the suggestion list only shows those options beginning with <wordasword>A</wordasword>.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richautocomplete-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <varname>value</varname> attribute stores the text entered by the user for the auto-complete box. Suggestions shown in the auto-complete list can be specified using one of two different methods:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>autocompleteMethod</varname> attribute points to a method which returns a list of suggestions according to a supplied prefix.
					</para>
					<note>
						<title><literal>client</literal> and <literal>lazyClient</literal> modes</title>
						<para>
							The prefix is normally ignored in <literal>client</literal> and <literal>lazyClient</literal> modes. In these modes, the component requests the suggestion list once only, and performs filtering on the client.
						</para>
					</note>
				</listitem>
				<listitem>
					<para>
						The <varname>autocompleteList</varname> attribute points to a collection of suggestions.
					</para>
				</listitem>
			</itemizedlist>
			<example id="exam-Component_Reference-richautocomplete-Defining_suggestion_values">
				<title>Defining suggestion values</title>
				<variablelist>
					<varlistentry>
						<term>Using the <varname>autocompleteMethod</varname> attribute</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richautocomplete-Defining_suggestion_values-0.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
							<para>
								The <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component uses the <methodname>bean.autocomplete</methodname> method to provide suggestions, based on the entered prefix.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Using the <varname>autocompleteList</varname> attribute</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richautocomplete-Defining_suggestion_values-1.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
							<para>
								The <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component retrieve the suggestion list from <methodname>bean.suggestions</methodname>.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</example>
			<!--
			<itemizedlist>
				<listitem>
					<para>
						Using the JSF components <sgmltag>&lt;f:selectItem&gt;</sgmltag> and <sgmltag>&lt;f:selectItems&gt;</sgmltag> to define a list of items:
					</para>
					<example id="exam-Component_Reference-richautocomplete-Defining_list_items_for_richinplaceSelect">
						<title>Defining list items for <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag></title>
						<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richautocomplete-Defining_list_items_for_richinplaceSelect.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					</example>
				</listitem>
			</itemizedlist>
			-->
		</section>
			
		<section id="sect-Component_Reference-richautocomplete-Submission_modes">
			<title>Submission modes</title>
			<para>
				Use the <varname>mode</varname> attribute to determine how the suggestion list is requested:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <literal>client</literal> setting pre-loads data to the client and uses the input to filter the possible suggestions.
					</para>
				</listitem>
				<listitem>
					<para>
						The <literal>ajax</literal> setting fetches suggestions with every input change using Ajax requests.
					</para>
				</listitem>
				<listitem>
					<para>
						The <literal>lazyClient</literal> setting pre-loads data to the client and uses the input to filter the possible suggestions. The filtering does not start until the input length matches a minimum value. Set the minimum value with the <varname>minChars</varname> attribute. 
					</para>
				</listitem>
				<listitem>
					<para>
						The <literal>cachedAjax</literal> setting pre-loads data via Ajax requests when the input length matches a minimum value. Set the minimum value with the <varname>minChars</varname> attribute. All suggestions are handled on the client until the input prefix is changed, at which point a new request is made based on the new input prefix.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richautocomplete-Interactivity_options">
			<title>Interactivity options</title>
			<!-- TODO
			<para>
				The input box can display an instructional label before text is entered. This can be set through the <varname>defaultLabel</varname> attribute.
			</para>
			-->
			<para>
				Users can type into the text field to enter a value, which also searches through the suggestion items in the drop-down box. By default, the first suggestion item is selected as the user types. This behavior can be deactivated by setting <code><varname>selectFirst</varname>="false"</code>.
			</para>
			<para>
				Setting <code><varname>autoFill</varname>="true"</code> causes the combo-box to fill the text field box with a matching suggestion as the user types.
			</para>
			<para>
				To allow users to enter multiple values separated by specific characters, use the <varname>tokens</varname> attribute. As the user types, a suggestion will present as normal. When they enter a character specified as a token, this begins a new suggestion process, and the component only uses text entered after the token character for suggestions. For example, if <code>tokens=", "</code> is set, the <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component uses both the comma and space characters as tokens to separate entries. When the user enters a comma or a space, a new suggestion process begins.
			</para>
			<note>
				<title>Using tokens</title>
				<para>
					When declaring tokens, avoid using any characters that are present in the list of suggestions. This may cause unexpected behavior as the user expects the character to match suggestions instead of separating suggested entries.
				</para>
			</note>
		</section>

		<section id="sect-Component_Reference-richautocomplete-Customizing_the_filter_in_client_and_lazyClient_modes">
			<title>Customizing the filter in <literal>client</literal> and <literal>lazyClient</literal> modes</title>
			<para>
				The <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component uses the JavaScript <function>startsWith()</function> method to create the list of suggestions. The filtering is performed on the client side. Alternatively, use the <varname>clientFilter</varname> attribute to specify a custom filtering function. The custom function must accept two parameters: the <varname>subString</varname> parameter is the filtering value as typed into the text box by the user, and the <varname>value</varname> parameter is an item in the list of suggestions against which the <varname>subString</varname> must be checked. Each item is iterated through and passed to the function as the <varname>value</varname> parameter. The custom function must return a boolean value indicating whether the passed item meets the conditions of the filter, and the suggestion list is constructed from successful items.
			</para>
			<example id="exam-Component_Reference-richautocomplete-Customizing_the_filter">
				<title>Customizing the filter</title>
				<para>
					This example demonstrates how to use a custom filter with the <varname>clientFilter</varname> attribute. The custom filter determines if the sub-string is contained anywhere in the suggestion item, instead of just at the start.
				</para>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richautocomplete-Customizing_the_filter.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<!-- TODO
		<section id="sect-Component_Reference-richautocomplete-richautocomplete_events">
			<title><sgmltag>&lt;rich:autocomplete&gt;</sgmltag> events</title>
			<para>
				The <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component has two unique event handlers:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<varname>onlistcall</varname> triggers before the drop-down list is shown, allowing the operation to be canceled.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>onselect</varname> triggers when a suggestion is selected from the drop-down list, before the update request is sent.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		-->
		
		<section id="sect-Component_Reference-richautocomplete-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Get the current value of the text field.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the value of the text field to the <parameter>newValue</parameter> string passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>showPopup()</function></term>
		         <listitem>
		            <para>
		               Show the pop-up list of completion values.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>hidePopup()</function></term>
		         <listitem>
		            <para>
		               Hide the pop-up list.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richautocomplete-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Autocomplete</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIAutocomplete</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Input</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.AutocompleteRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.AutocompleteHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richautocomplete-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richautocomplete.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
		
		<!-- TODO not in Final -->
		<!--<rich:autocompleteBehavior>-->
		<!--
		<section id="sect-Component_Reference-Rich_inputs-richautocompleteBehavior">
			<title><sgmltag>&lt;rich:autocompleteBehavior&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:autocompleteBehavior&gt;</sgmltag> behavior is an auto-completing list of input suggestions that can be attached to other components.
			</para>
			<para>
				Use the <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component for a standard auto-completing combo-box control. Refer to <xref linkend="sect-Component_Reference-Rich_inputs-richautocomplete" /> for full details on the <sgmltag>&lt;rich:autocomplete&gt;</sgmltag> component.
			</para>
		
			<section id="sect-Component_Reference-richautocompleteBehavior-Basic_usage">
				<title>Basic usage</title>
				<para>
					Attach the <sgmltag>&lt;rich:autocompleteBehavior&gt;</sgmltag> behavior as a sub-element to another component to provide auto-complete suggestions for that component. Suggestions shown in the auto-complete list can be specified using the <varname>autocompleteMethod</varname> attribute, which points to a collection of suggestions. <xref linkend="exam-Component_Reference-richautocompleteBehavior-Defining_suggestion_values" /> demonstrates a <sgmltag>&lt;rich:autocompleteBehavior&gt;</sgmltag> behavior attached to a standard JSF <sgmltag>&lt;h:inputText&gt;</sgmltag> component.
				</para>
				<example id="exam-Component_Reference-richautocompleteBehavior-Defining_suggestion_values">
					<title>Defining suggestion values</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richautocompleteBehavior-Defining_suggestion_values.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				</example>
			</section>
		</section>
		-->
	
	</section>
	
	<!-- <rich:calendar> -->
	<section id="sect-Component_Reference-Rich_inputs-richcalendar">
		<title><sgmltag>&lt;rich:calendar&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:calendar&gt;</sgmltag> component allows the user to enter a date and time through an in-line or pop-up calendar. The pop-up calendar can navigate through months and years, and its look and feel can be highly customized.
		</para>

		<figure id="figu-Component_Reference-richcalendar-richcalendar">
			<title><sgmltag>&lt;rich:calendar&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richcalendar-richcalendar.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						An expanded <sgmltag>&lt;rich:calendar&gt;</sgmltag> component, displaying the calendar month of December, 2010.
					</para>
				</textobject>
			</mediaobject>
		</figure>

		<section id="sect-Component_Reference-richcalendar-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;rich:calendar&gt;</sgmltag> component requires only the <varname>value</varname> attribute, which holds the currently selected date. <xref linkend="exam-Component_Reference-richcalendar-Basic_usage" /> shows a basic declaration, with the value pointing to a bean property. The bean property holds the selected date.
			</para>
			<example id="exam-Component_Reference-richcalendar-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcalendar-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>

		<section id="sect-Component_Reference-richcalendar-Behavior_and_appearance">
			<title>Behavior and appearance</title>
			<para>
				The <sgmltag>&lt;rich:calendar&gt;</sgmltag> component is presented as a pop-up by default, appearing as a text field with a button to expand the full pop-up calendar. To render the calendar in-line on the page instead, set <code>popup="false</code>. This displays the full calendar without the text field and display button.
			</para>
			<para>
				To add keyboard support for manual input, set <code>enableManualInput="true"</code>. To disable the calendar from any user input, set <code>disabled="true"</code>.
			</para>
			<para>
				To change the appearance of the display button from the standard calendar icon, use the <varname>buttonIcon</varname> and <varname>buttonDisabledIcon</varname> attributes to replace the icon with a specified file. Alternatively, use the <varname>buttonLabel</varname> attribute to display text on the button without an icon. If <varname>buttonLabel</varname> is specified then both the <varname>buttonIcon</varname> and <varname>buttonDisabledIcon</varname> attributes are ignored. To hide the text field box, set <code>showInput="false"</code>.
			</para>
			<!-- TODO not in M4 -->
			<!--
			<para>
				To change the default position at which the pop-up calendar is shown relative to the text field and button, use the <varname>jointPoint</varname> and <varname>direction</varname> attributes. The <varname>jointPoint</varname> attribute refers to the corner of the text field and button with which the calendar will be aligned and the <varname>direction</varname> specifies which direction the pop-up calendar will span relative to the joint point. The default settings are <code>jointPoint="bottom-left"</code> and <code>direction="bottom-right"</code>, causing the pop-up calendar to align with the bottom-left corner of the text field and span to the bottom-right, underneath the text field and button. The diagram shows the joint points and directions that can be used. Alternatively, set both <varname>jointPoint</varname> and <varname>direction</varname> attributes to <literal>auto</literal> to allow smart pop-up positioning. <xref linkend="figu-Component_Reference-richcalendar-Pop-up_positioning" /> shows the different possible settings for the <varname>jointPoint</varname> and <varname>direction</varname> attributes.
			</para>
			<figure id="figu-Component_Reference-richcalendar-Pop-up_positioning">
				<title>Pop-up positioning</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-richcalendar-Pop-up_positioning.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							Pop-up positioning is determined using the <varname>jointPoint</varname> and <varname>direction</varname> attributes.
						</para>
					</textobject>
				</mediaobject>
				<para>
					Pop-up positioning is determined using the <varname>jointPoint</varname> and <varname>direction</varname> attributes. Values for the <varname>jointPoint</varname> attribute are shown in red, while values for the <varname>direction</varname> attribute are shown in black.
				</para>
			</figure>
			-->
			<para>
				The calendar features a <guibutton>Today</guibutton> button for locating today's date on the calendar. This can be set to three different values using the <varname>todayControlMode</varname> attribute:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<literal>hidden</literal>, which does not display the button;
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>select</literal>, the default setting, which scrolls the calendar to the current month and selects the date; and
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>scroll</literal>, which scrolls the calendar to the month but does not select the date.
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>inactive</literal>, which displays the date but performs no action when clicked.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				To make the entire calendar read-only, set <code>readonly="true"</code>. This allows months and years to be browsed through with the arrow controls, but dates and times cannot be selected.
			</para>
			<!-- Not supported -->
			<!--
			<para>
				The styling and appearance of the calendar can be fully customized using facets. The <literal>header</literal> and <literal>footer</literal> facets define the calendar's header and footer. The <literal>optionalHeader</literal> and <literal>optionalFooter</literal> facets define the calendar's optional header and optional footer. The <literal>weekNumber</literal> facet controls the appearance of the week numbers, and the <literal>weekDay</literal> facet controls the appearance of the individual day cells on the calendar. <xref linkend="figu-Component_Reference-richcalendar-Facet_elements" /> shows some of the elements available for customization through the various facets.
			</para>
			<figure id="figu-Component_Reference-richcalendar-Facet_elements">
			   <title>Facet elements</title>
			   <mediaobject>
			      <imageobject>
			         <imagedata fileref="images/figu-Component_Reference-richcalendar-Facet_elements.png" format="PNG" />
			      </imageobject>
			      <textobject>
			         <para>
			            A <sgmltag>&lt;rich:calendar&gt;</sgmltag> control with labeled facet elements.
			         </para>
			      </textobject>
			   </mediaobject>
			</figure>
			-->
		</section>

		<section id="sect-Component_Reference-richcalendar-Time_of_day">
			<title>Time of day</title>
			<para>
				The <sgmltag>&lt;rich:calendar&gt;</sgmltag> component can additionally allow a time of day to be specified with the date. After selecting a date the option to set a time becomes available. The default time can be set with the <varname>defaultTime</varname> attribute. If the time is altered and a new date is selected, it will not reset unless <code>resetTimeOnDateSelect="true"</code> is specified.
			</para>
			<para>
				The date selection feature is activated if the time is present in the <varname>datePattern</varname> attribute for the calendar.
			</para>
			<note>
				<title>Support for seconds</title>
				<para>
					In RichFaces 4, the <sgmltag>&lt;rich:calendar&gt;</sgmltag> component supports times that include seconds. Previous versions of RichFaces only supported hours and minutes.
				</para>
			</note>
		</section>

		<section id="sect-Component_Reference-richcalendar-Localization_and_formatting">
			<title>Localization and formatting</title>
			<para>
				Date and time strings can be formatted in a set pattern. Use standard locale formatting strings specified by <citetitle>ISO 8601</citetitle> (for example, <literal>d/M/yy HH:mm a</literal>) with the <varname>datePattern</varname> attribute to format date and time strings.
			</para>
			<para>
				To set the locale of the calendar, use the <varname>locale</varname> attribute. The calendar will render month and day names in the relevant language. For example, to set the calendar to the US locale, specify <code>locale="en/US"</code>.
			</para>
			<para>
				Use an application resource bundle to localize the calendar control labels. Define the following strings in the resource bundle:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <property>RICH_CALENDAR_APPLY_LABEL</property> string is the label for the <guibutton>Apply</guibutton> button.
					</para>
				</listitem>
				<listitem>
					<para>
						The <property>RICH_CALENDAR_TODAY_LABEL</property> string is the label for the <guibutton>Today</guibutton> button.
					</para>
				</listitem>
				<listitem>
					<para>
						The <property>RICH_CALENDAR_CLOSE_LABEL</property> string is the label for the <guibutton>Close</guibutton> button.
					</para>
				</listitem>
				<listitem>
					<para>
						The <property>RICH_CALENDAR_OK_LABEL</property> string is the label for the <guibutton>OK</guibutton> button.
					</para>
				</listitem>
				<listitem>
					<para>
						The <property>RICH_CALENDAR_CLEAN_LABEL</property> string is the label for the <guibutton>Clean</guibutton> button.
					</para>
				</listitem>
				<listitem>
					<para>
						The <property>RICH_CALENDAR_CANCEL_LABEL</property> string is the label for the <guibutton>Cancel</guibutton> button.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				Alternatively, use the <classname>org.richfaces.calendar</classname> resource bundle with Java Archive files (<acronym>JAR</acronym>s) defining the same properties.
			</para>
		</section>
		
		<!-- TODO not in M4 -->
		<!--
		<section id="sect-Component_Reference-richcalendar-richcalendar_events">
			<title><sgmltag>&lt;rich:calendar&gt;</sgmltag> events</title>
			<para>
				There are several event handlers that are unique to the <sgmltag>&lt;rich:calendar&gt;</sgmltag> component.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<varname>ondateselect</varname> is triggered when the date is selected by the user, before the update request is sent.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>ondateselected</varname> is triggered after the date is selected by the user.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>oncurrentdateselect</varname> is triggered when any of the year- or month-changing buttons are pressed, before the update request is sent.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>oncurrentdateselected</varname> is triggered after any of the year- or month-changing buttons are pressed.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>ontimeselect</varname> is triggered when the time is set by the user, before the update request is sent.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>ontimeselected</varname> is triggered after the time has been set by the user.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		-->

		<section id="sect-Component_Reference-richcalendar-Using_a_data_model">
			<title>Using a data model</title>
			<para>
				The look and feel of the <sgmltag>&lt;rich:calendar&gt;</sgmltag> component can be customized through the use of a data model on the server side. The component supports two different ways of loading data from the server side through defining the <varname>mode</varname> attribute.
			</para>
			<para>
				When the <varname>mode</varname> attribute is not specified, the component uses the <literal>client</literal> mode. The <literal>client</literal> mode loads an initial portion of data within a set date range. The range can be defined by using the <varname>preloadDateRangeBegin</varname> and <varname>preloadDateRangeEnd</varname> attributes. Additional data requests for months outside the range are not sent.
			</para>
			<para>
				Alternatively, with <code>mode="ajax"</code> the <sgmltag>&lt;rich:calendar&gt;</sgmltag> requests portions of data from the data model every time the month is switched. The data model can be defined through the <varname>dataModel</varname> attribute, which points to an object that implements the <classname>CalendarDataModel</classname> interface. If the <varname>dataModel</varname> attribute is not defined or has a value of <literal>null</literal>, the <literal>ajax</literal> mode functions the same as the <literal>client</literal> mode.
			</para>
		</section>

		<section id="sect-Component_Reference-richcalendar-Client-side_customization">
			<title>Client-side customization</title>
			<para>
				Instead of using a data model, the <sgmltag>&lt;rich:calendar&gt;</sgmltag> component can be customized on the client-side using JavaScript. Use the <varname>dayClassFunction</varname> attribute to reference the function that determines the CSS style class for each day cell. Use the <varname>dayDisableFunction</varname> to reference the function that enables or disables a day cell. <xref linkend="exam-Component_Reference-richcalendar-Client-side_customization" /> demonstrates how client-side customization can be used to style different days in a calendar.
			</para>
			<example id="exam-Component_Reference-richcalendar-Client-side_customization">
			   <title>Client-side customization</title>
			   <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richcalendar-Client-side_customization.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richcalendar-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:calendar&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>showPopup()</function></term>
		         <listitem>
		            <para>
		               Expand the pop-up calendar element.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>hidePopup()</function></term>
		         <listitem>
		            <para>
		               Collapse the pop-up calendar element.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>switchPopup()</function></term>
		         <listitem>
		            <para>
		               Invert the state of the pop-up calendar element.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Return the selected date value of the calendar.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getValueAsString()</function></term>
		         <listitem>
		            <para>
		               Return the selected date value of the calendar as a formatted string.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the selected date value to the <parameter>newValue</parameter> date passed as a parameter. If the new date is not in the currently displayed month, a request is performed to display the correct month.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>resetValue()</function></term>
		         <listitem>
		            <para>
		               Clear the selected date value.
		            </para>
		         </listitem>
		      </varlistentry>
		      <!--
		      <varlistentry>
		         <term><function>isDateEnabled(date)</function></term>
		         <listitem>
		            <para>
		               Check if the specified date is able to be selected.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>enableDate(date)</function></term>
		         <listitem>
		            <para>
		               Enable the specified date cell control on the calendar.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>disableDate(date)</function></term>
		         <listitem>
		            <para>
		               Disable the specified date cell control on the calendar.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>enableDates(date[])</function></term>
		         <listitem>
		            <para>
		               Enable the specified dates' cell controls on the calendar.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>disableDates(date[])</function></term>
		         <listitem>
		            <para>
		               Disable the specified dates' cell controls on the calendar.
		            </para>
		         </listitem>
		      </varlistentry>
		      -->
		      <!--
		      <varlistentry>
		         <term><function>nextMonth()</function></term>
		         <listitem>
		            <para>
		               Display the next month.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>nextYear()</function></term>
		         <listitem>
		            <para>
		               Display the next year.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>prevMonth()</function></term>
		         <listitem>
		            <para>
		               Display the previous month.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>prevYear()</function></term>
		         <listitem>
		            <para>
		               Display the previous year.
		            </para>
		         </listitem>
		      </varlistentry>
		      -->
		      <varlistentry>
		         <term><function>today()</function></term>
		         <listitem>
		            <para>
		               Select today's date.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getCurrentMonth()</function></term>
		         <listitem>
		            <para>
		               Return the number of the month currently being displayed.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getCurrentYear()</function></term>
		         <listitem>
		            <para>
		               Return the number of the year currently being displayed.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>showSelectedDate()</function></term>
		         <listitem>
		            <para>
		               Show the calendar month that contains the currently selected date.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>showDateEditor()</function></term>
		         <listitem>
		            <para>
		               Show the date editor pop-up.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>hideDateEditor()</function></term>
		         <listitem>
		            <para>
		               Hide the date editor pop-up.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>showTimeEditor()</function></term>
		         <listitem>
		            <para>
		               Show the time editor pop-up.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>hideTimeEditor()</function></term>
		         <listitem>
		            <para>
		               Hide the time editor pop-up.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richcalendar-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Calendar</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UICalendar</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Calendar</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.CalendarRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.CalendarHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richcalendar-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richcalendar.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<!-- TODO not in M4 -->
	<!--
	<section id="sect-Component_Reference-Rich_inputs-richcolorPicker">
		<title><sgmltag>&lt;rich:colorPicker&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:colorPicker&gt;</sgmltag> component allows the selection of a color, either by picking the color from the spectrum, defining it through decimal or hexadecimal <acronym>RGB</acronym> (red-green-blue) values, or defining it through <acronym>HSB</acronym> (hue-saturation-brightness) values. The <sgmltag>&lt;rich:colorPicker&gt;</sgmltag> component can appear either in-line with a pop-up or flat, and the look and feel can be highly customized.
		</para>
		<para>
			The <varname>value</varname> attribute stores the currently selected color. The <varname>colorMode</varname> attribute defines whether the <varname>value</varname> is saved as <literal>hex</literal> (hexadecimal) or <literal>rgb</literal> (red-green-blue).
		</para>
		<para>
			The <sgmltag>&lt;rich:colorPicker&gt;</sgmltag> appears in-line by default, where the color picker spectrum is only shown once the component is clicked on. The component can appear "flat", where the whole color picker is shown, by setting <code>flat="true"</code>.
		</para>
		<para>
			The <sgmltag>&lt;rich:colorPicker&gt;</sgmltag> component has the unique event handler <varname>onbeforeshow</varname>, which is triggered immediately before the color picker is opened. The <varname>showEvent</varname> attribute can be used to bind the opening of the color picker to a specific event; it is bound to the <varname>onclick</varname> event by default.
		</para>
	</section>
	-->
    
    <!--<rich:editor>-->
    <section id="sect-Component_Reference-Rich_inputs-richeditor">
        <title><sgmltag>&lt;rich:editor&gt;</sgmltag></title>
        <para>
            The <sgmltag>&lt;rich:editor&gt;</sgmltag> component is used for creating a WYSIWYG editor on a page.
        </para>
        <figure id="figu-Component_Reference-richeditor-richeditor">
            <title><sgmltag>&lt;rich:editor&gt;</sgmltag></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/figu-Component_Reference-richeditor-richeditor.png" format="PNG" />
                </imageobject>
                <textobject>
                    <para>
                        A <sgmltag>&lt;rich:editor&gt;</sgmltag> component.
                    </para>
                </textobject>
            </mediaobject>
        </figure>
        <para>
            <sgmltag>&lt;rich:editor&gt;</sgmltag> component is based on CKEditor implementation.
        </para>
        <para>
            When rendering <sgmltag>&lt;rich:editor&gt;</sgmltag>, textarea is rendered to the page and once the page is completely loaded (ready state), textarea is enhanced by CKEditor script and replaced with full-featured WYSIWYG editor. 
        </para>
        <para>
            Note that ResourceServlet has to be registered manually in order to serve editor resources correctly (JavaScript, CSS, images). Check RichFaces Developer's Guide out for details.
        </para>
        <para>
            Note that <sgmltag>&lt;rich:editor&gt;</sgmltag> requires having <sgmltag>&lt;h:body&gt;</sgmltag> component as ancestor in the view for rendering editor's JavaScript resource dependencies correctly.
        </para>
        
        <section id="sect-Component_Reference-richeditor-Basic_usage">
            <title>Basic usage</title>
            <para>
                Basic usage requires the <varname>value</varname> attribute to point to the expression for the current value of the component.
            </para>
            <programlisting language="XML" role="XML">
                <![CDATA[
<rich:editor value="#{backingBean.editedValue}" />
                    ]]>
            </programlisting>
            <para>
                Dimensions of editor can be managed using <parameter>width</parameter> and <parameter>height</parameter> attributes.
            </para>
            <para>
                Attribute <parameter>readonly</parameter> can be used to switch editor into read-only mode.
            </para>
            <para>
                <parameter>tabindex</parameter> is used as for any other form inputs.
            </para>
        </section>
        
        <section id="sect-Component_Reference-richeditor-Styling">
            <title>Styling</title>
            <para>
                There are several options to customize style of the editor:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <parameter>style, styleClass</parameter>: customizes style of the editor and underlying textarea
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>editorStyle, editorClass</parameter>: customizes style of the editor
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>textareaStyle, textareaClass</parameter>: customizes style of the underlying textarea
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Attributes above gives possibility to customize style of both, editor and underlying textarea. 
            </para>
        </section>
        
        <section id="sect-Component_Reference-richeditor-Editor_skins">
            <title>Editor skins</title>
            <para>
                <sgmltag>&lt;rich:editor&gt;</sgmltag> comes with two axis of skinnability.
            </para>
            <para>
                At first, standard skin called <code>richfaces</code> is optimized to suit rest of the component suite look &amp; feel and behaves regarding to which RichFaces skin is currently chosen.
            </para>
            <figure id="figu-Component_Reference-richeditor-richfaces_skin">
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/figu-Component_Reference-richeditor-richfaces_skin.png" format="PNG" />
                    </imageobject>
                    <textobject>
                        <para>
                            A <sgmltag>&lt;rich:editor&gt;</sgmltag> with default <code>richfaces</code> editor skin rendered against several RichFaces Skin options.
                        </para>
                    </textobject>
                </mediaobject>
            </figure>
            <para>
                Second option gives you possibility to use any other skin for CKEditor, either from standard distribution or downloaded one or custom one. In distribution, there are three skins bundled: <code>kama, v2, office2003</code>.
            </para>
            <figure id="figu-Component_Reference-richeditor-distribution_skins">
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/figu-Component_Reference-richeditor-distribution_skins.png" format="PNG" />
                    </imageobject>
                    <textobject>
                        <para>
                            A CKEditor distribution skins <code>kama</code>, <code>v2</code> and <code>office2003</code>.
                        </para>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
        
        <section id="sect-Component_Reference-richeditor-Advanced_configuration">
            <title>Advanced configuration</title>
            <para>
                Basic set of <sgmltag>&lt;rich:editor&gt;</sgmltag> attributes allows to support common use-cases for WYSIWYG editor.
            </para>
            <para>
                CKEditor imlementation supports much more configuration options that the ones which are exposed to basic set of attributes.
            </para>
            <para>
                Attribute <parameter>config</parameter> gives possibility to define any advanced configuration option which CKEditor supports.
            </para>
            <para>
                Configuration is written in JavaScript object format and its value interpolated for EL expressions (making configuration dynamic).
            </para>
            <para>
                There are two options to define configuration: <parameter>config</parameter> attribute and component facet with name <parameter>config</parameter>. Facet takes precedence over attribute when both defined.
            </para>
            <programlisting language="XML" role="XML">
                <![CDATA[
<rich:editor config="startupFocus: #{userPreferences.startupFocus}" />

<rich:editor>
    <f:facet name="config">
        startupFocus: #{userPreferences.startupFocus}
    </f:facet>
</rich:editor>
                    ]]>
            </programlisting>
            <para>
                In samples above, <sgmltag>&lt;rich:editor&gt;</sgmltag> is configured to take focus after load of the page regarding to user preferences. Definitions using either attribute or facet are adequate.
            </para>
            <para>
                For further configuration options, refer to CKEditor 3 Developer Guide ( http://docs.cksource.com/CKEditor_3.x/Developers_Guide/Setting_Configurations ) and CKEditor 3 configuration reference ( http://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.config.html ).
            </para>
        </section>
        
        <section id="sect-Component_Reference-richeditor-Toolbar_customization">
            <title>Toolbar customization</title>
            <para>
                <sgmltag>&lt;rich:editor&gt;</sgmltag> supports <parameter>toolbar</parameter> attribute able to switch between toolbar configurations. 
            </para>
            <para>
                There are two configurations available: <code>basic</code> (default), <code>full</code>. 
            </para>
            <para>
                It is possible to define custom toolbar using CKEditor toolbar definition notion:
            </para>
            <programlisting language="XML" role="XML">
                <![CDATA[
<rich:editor toolbar="CustomToolbar">
    <f:facet name="config">
            toolbar_CustomToolbar:
                [
                    { name: 'document', items : [ 'NewPage','Preview' ] },
                    { name: 'clipboard', items : [ 'Cut','Copy','Paste','PasteText','PasteFromWord','-','Undo','Redo' ] },
                    { name: 'editing', items : [ 'Find','Replace','-','SelectAll','-','Scayt' ] },
                    { name: 'insert', items : [ 'Image','Flash','Table','HorizontalRule','Smiley','SpecialChar','PageBreak'
                             ,'Iframe' ] },
                            '/',
                    { name: 'styles', items : [ 'Styles','Format' ] },
                    { name: 'basicstyles', items : [ 'Bold','Italic','Strike','-','RemoveFormat' ] },
                    { name: 'paragraph', items : [ 'NumberedList','BulletedList','-','Outdent','Indent','-','Blockquote' ] },
                    { name: 'links', items : [ 'Link','Unlink','Anchor' ] },
                    { name: 'tools', items : [ 'Maximize' ] }
                ]
            </f:facet>
</rich:editor>
                    ]]>
            </programlisting>
            <para>
                Note that toolbar name (<code>CustomToolbar</code>) needs to match the <code>toolbar_&lt;name&gt;</code> configuration option.
            </para>
        </section>
        
        <section id="sect-Component_Reference-richeditor-Internationalization_and_localization">
            <title>Internationalization and localization</title>
            <para>
                <sgmltag>&lt;rich:editor&gt;</sgmltag> comes with attribute <parameter>lang</parameter> which allows to change localization of editor.
            </para>
            <para>
                For language configuration options, refer to http://www.w3.org/TR/html4/struct/dirlang.html.
            </para>
            <para>
                <parameter>lang</parameter> attribute is influences following settings:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        underlying textarea - specifies the i18n settings for received and submitted content 
                    </para>
                </listitem>
                <listitem>
                    <para>
                        editor value - specifies the i18n settings for value edited in WYSIWYG mode
                    </para>
                </listitem>
                <listitem>
                    <para>
                        default settings of localization of editor controls and interface
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                However localization of interface is in first place localized using the browser configuration (usually determined by client system settings).
            </para>
            <para>
                To force editor to use specific localization of interface, you can use custom CKEditor configuration option <code>language</code> as in following sample:
            </para>
            <programlisting language="XML" role="XML">
                <![CDATA[
<rich:editor lang="fr" config="language: 'fr'" />
                    ]]>
            </programlisting>
            <para>
                The sample above force editor to use french interface, supressing the browser preferred settings.
            </para>
        </section>
        
         <section id="sect-Component_Reference-richeditor-Client_side_event_handlers">
            <title>Client-side event handlers</title>
            <para>
                <sgmltag>&lt;rich:editor&gt;</sgmltag> component produces set of events for handling component specific interaction.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <parameter>init</parameter> - once the editor is initialized and ready to be handle user interaction
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>focus</parameter> - once the editor is focused
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>blur</parameter> - once the editor is blurred
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>change</parameter> - fired on blur event when editor content has been changed after previous focus 
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>dirty</parameter> - fired immediately after editor content has been changed 
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Events can be handled either by registering JavaScript event handler or by attaching JSF behavior:
            </para>
            <programlisting language="XML" role="XML">
                <![CDATA[
<rich:editor value="#{backingBean.editorValue}">
    <a4j:ajax event="change" render="editorOutput" />
    <a4j:ajax event="dirty" render="editorOutput">
        <a4j:attachQueue requestDelay="1000" />
    </a4j:ajax>
</rich:editor>

<a4j:outputPanel id="editorOutput">
    <h:outputText escape="false" value="#{backingBean.editorValue}" />
</a4j:outputPanel>
                    ]]>
            </programlisting>
            <para>
                Example above shows editor and its output, which is updated each 1 sec after each instant change or immediately after user focus leaves editor area.
            </para>
        </section>
        
        <section id="sect-Component_Reference-richeditor-JavaScript_API">
           <title>JavaScript API</title>
           <para>
              The <sgmltag>&lt;rich:inplaceInput&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
           </para>
           <variablelist>
              <varlistentry>
                 <term><function>getValue()</function></term>
                 <listitem>
                    <para>
                       Get the current value of the input control.
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>setValue(newValue)</function></term>
                 <listitem>
                    <para>
                       Set the value of the input control to the <parameter>newValue</parameter> string passed as a parameter.
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>getEditor()</function></term>
                 <listitem>
                    <para>
                       Returns the CKEditor object associated to given instance of <sgmltag>&lt;rich:editor&gt;</sgmltag> component.
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>getInput()</function></term>
                 <listitem>
                    <para>
                       Returns the textarea associated textarea.
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>focus()</function></term>
                 <listitem>
                    <para>
                       Gives focus to this component
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>blur()</function></term>
                 <listitem>
                    <para>
                       Removes focus from this component
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>isFocused()</function></term>
                 <listitem>
                    <para>
                       Returns <literal>true</literal> if this component is focused
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>isDirty()</function></term>
                 <listitem>
                    <para>
                       Returns <literal>true</literal> if editor is focused and it was edited from last focus event (reset by blur event and using setValue(newValue) call and when component re-rendered)
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>isValueChanged()</function></term>
                 <listitem>
                    <para>
                       Returns <literal>true</literal> if the control's value has been changed from the default (reset by setValue(newValue) call and when component re-rendered)
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>isReadonly()</function></term>
                 <listitem>
                    <para>
                       Returns <literal>true</literal> if editor content is editable.
                    </para>
                 </listitem>
              </varlistentry>
              <varlistentry>
                 <term><function>setReadonly(readonly)</function></term>
                 <listitem>
                    <para>
                       When <literal>readonly</literal> is <literal>true</literal>, editor will be switched to editable state. Otherwise, it will be switched to readonly state.
                    </para>
                 </listitem>
              </varlistentry>
           </variablelist>
        </section>
        
        <section id="sect-Component_Reference-richeditor-Reference_data">
            <title>Reference data</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <parameter>component-type</parameter>: <classname>org.richfaces.Editor</classname>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>component-class</parameter>: <classname>org.richfaces.component.UIEditor</classname>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>component-family</parameter>: <classname>org.richfaces.Editor</classname>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>renderer-type</parameter>: <classname>org.richfaces.EditorRenderer</classname>
                    </para>
                </listitem>
            </itemizedlist>
        </section>

        <section id="sect-Component_Reference-richeditor-Style_classes_and_skin_parameters">
            <title>Style classes and skin parameters</title>
            <xi:include href="skinning/tabl-richeditor.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
        </section>
    </section>

	<!--rich:fileUpload>-->
	<section id="sect-Component_Reference-Rich_inputs-richfileUpload">
		<title><sgmltag>&lt;rich:fileUpload&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:fileUpload&gt;</sgmltag> component allows the user to upload files to a server. It features multiple uploads, progress bars, restrictions on file types, and restrictions on sizes of the files to be uploaded.
		</para>

		<section id="sect-Component_Reference-richfileUpload-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage requires the <varname>fileUploadListener</varname> attribute. Use the attribute to reference a listener function on the server side after each file is uploaded. The listener should process files as required, such as storing them in the <filename>session/db/filesystem/</filename> directory. The component itself does not store uploaded files, so if the listener is not implemented they are not stored anywhere.
			</para>
			<example id="exam-Component_Reference-richfileUpload-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richfileUpload-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>

		<section id="sect-Component_Reference-richfileUpload-Upload_settings">
			<title>Upload settings</title>
			<para>
				Files are uploaded to either the temporary folder (different for each operating system) or to <acronym>RAM</acronym> (random-access memory), depending on the value of the <parameter>org.richfaces.fileUpload.createTempFiles</parameter> context parameter of the <filename>web.xml</filename> settings file for the project. If the parameter is set to <literal>true</literal>, the files are uploaded to the temporary folder.
			</para>
			<para>
				To limit the maximum size of the uploaded files, define the byte size with the <parameter>org.richfaces.fileUpload.maxRequestSize</parameter> context parameter of the <filename>web.xml</filename> settings file for the project.
			</para>
		</section>
        
        <section id="sect-Component_Reference-richfileUpload-Sanitizing_file_upload_input">
            <title>Sanitizing file upload input</title>
            <para>
                Any file is accepted by rich:fileUpload component by default. There are three parameters available for limiting what can user upload to the server:
            </para>
            <variablelist>
                <varlistentry>
                    <term><varname>maxFilesQuantity</varname></term>
                    <listitem>
                        <para>
                            The <varname>maxFilesQuantity</varname> parameter defines maximum number of files allowed to be uploaded.
                            After a number of files in the list equals to the value of this attribute, "Add" button disappears and nothing could be uploaded even if you clear the whole list.
                            In order to upload files again you should rerender the component.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><varname>acceptedTypes</varname></term>
                    <listitem>
                        <para>
                            The <varname>acceptedTypes</varname> parameter defines comma separated list of file extensions accepted by component.
                            The component does not provide any feedback when rejecting file.
                            For introducing feedback for rejection, use <varname>ontyperejected</varname> parameter.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><varname>ontyperejected</varname></term>
                    <listitem>
                        <para>
                            The <varname>ontyperejected</varname> parameter defines event handler when file does not meet conditions stated by <varname>acceptedTypes</varname> parameter.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

		<section id="sect-Component_Reference-richfileUpload-Interactivity_options">
			<title>Interactivity options</title>
			<!--
			<para>
				Set the <varname>immediateUpload</varname> attribute to <literal>true</literal> to upload files as soon as they are added to the list, rather than waiting for the user to press the <guibutton>Upload</guibutton> button. Set the <varname>autoclear</varname> attribute to <literal>true</literal> to automatically remove files from the list once they have been successfully uploaded.
			</para>
			<para>
				The <sgmltag>&lt;rich:fileUpload&gt;</sgmltag> component can place restrictions on the files that can be uploaded. The <varname>acceptedTypes</varname> attribute restricts the file types to just those listed. The <varname>maxFilesQuantity</varname> attribute restricts the maximum number of files that can be uploaded. To enforce size restrictions on individual files, set the <parameter>maxRequestSize</parameter> parameter of the Ajax4jsf Filter section in the <filename>web.xml</filename> file for the project.
			</para>
			-->
			<para>
				The text labels used in the component can be completely customized. Labels for the various controls of the component can be set using the following parameters:
			</para>
			<variablelist>
				<varlistentry>
					<term><varname>addLabel</varname></term>
					<listitem>
						<para>
							The <varname>addLabel</varname> parameter sets the label for the <guibutton>Add</guibutton> button.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><varname>clearAllLabel</varname></term>
					<listitem>
						<para>
							The <varname>clearAllLabel</varname> parameter sets the label for the <guibutton>Clear All</guibutton> button.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><varname>clearLabel</varname></term>
					<listitem>
						<para>
							The <varname>clearLabel</varname> parameter sets the label for the <guibutton>Clear</guibutton> button.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><varname>uploadLabel</varname></term>
					<listitem>
						<para>
							The <varname>uploadLabel</varname> parameter sets the label for the <guibutton>Upload</guibutton> button.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<!--
			<para>
				The status label for the upload can be set using the <varname>label</varname> attribute and the following wildcards:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<code>{B} {KB} {MB}</code>: the full size of the file to be uploaded, measured in bytes, kilobytes and megabytes respectively.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>{_B} {_KB} {_MB}</code>: the amount of data uploaded so far, measured in bytes, kilobytes and megabytes respectively.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>{ss} {mm} {hh}</code>: the elapsed time in seconds, minutes and hours respectively.
					</para>
				</listitem>
			</itemizedlist>
			-->
			<para>
				The <sgmltag>&lt;rich:fileUpload&gt;</sgmltag> component provides a built-in progress bar to indicate the progress of each file that is uploaded. This progress bar can be replaced with a  <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component added to the <literal>progress</literal> facet. Refer to <xref linkend="sect-Component_Reference-Output_and_messages-richprogressBar" /> for details on the <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component.
			</para>
			<para>
				To disable the <sgmltag>&lt;rich:fileUpload&gt;</sgmltag> component, use the <varname>disabled</varname> attribute.
			</para>
		</section>
		<!--
		<section id="sect-Component_Reference-richfileUpload-Flash_module">
			<title>Flash module</title>
			<para>
				The <sgmltag>&lt;rich:fileUpload&gt;</sgmltag> component has an embedded Flash module that adds extra functionality. To enable the Flash module, set <code>allowFlash="true"</code>. The Flash module adds additional features to file selection, such as the ability to choose multiple files at once and the filtering of files by their type. Additionally, the Flash module provides a smoother animation of the progress bar during the upload process, as the progress polling is performed by Flash rather than Ajax.
			</para>
		</section>
		-->
		<section id="sect-Component_Reference-richfileUpload-richfileUpload_client-side_events">
			<title><sgmltag>&lt;rich:fileUpload&gt;</sgmltag> client-side events</title>
			<para>
				There are a number of event handlers specific to the <sgmltag>&lt;rich:fileUpload&gt;</sgmltag> component:
			</para>
			<itemizedlist>
				<!--
				<listitem>
					<para>
						<varname>onadd</varname> is triggered before a file is added to the list.
					</para>
				</listitem>
				-->
				<listitem>
					<para>
						<varname>filesubmit</varname> is triggered before a file is uploaded.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>uploadcomplete</varname> is triggered after all files in the list have finished uploading.
					</para>
				</listitem>
				<!--
				<listitem>
					<para>
						<varname>uploadcanceled</varname> is triggered after an upload has been canceled.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>error</varname> is triggered when an error occurs during the upload process.
					</para>
				</listitem>
				-->
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richfileUpload-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.FileUpload</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIFileUpload</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.FileUpload</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.FileUploadRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.FileUploadHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richfileUpload-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richfileUpload.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<!--<rich:inplaceInput>-->
	<section id="sect-Component_Reference-Rich_inputs-richinplaceInput">
		<title><sgmltag>&lt;rich:inplaceInput&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:inplaceInput&gt;</sgmltag> component allows information to be entered in-line in blocks of text, improving readability of the text. Multiple input regions can be navigated with keyboard navigation. The component has three functional states: the <emphasis>view</emphasis> state, where the component displays its initial setting, such as "click to edit"; the <emphasis>edit</emphasis> state, where the user can input text; and the "changed" state, where the new value for the component has been confirmed but can be edited again if required.
		</para>
		
		<section id="sect-Component_Reference-richinplaceInput-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage requires the <varname>value</varname> attribute to point to the expression for the current value of the component. Validation and conversion rules for the JSF <classname>UIInput</classname> control apply as usual.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richinplaceInput-Interactivity_options">
			<title>Interactivity options</title>
			<para>
				When in the initial <emphasis>view</emphasis> state, the starting label can be set using the <varname>defaultLabel</varname> attribute. Alternatively, if the initial value is already set through the <varname>value</varname> attribute, this is displayed instead.
			</para>
			<para>
				Once the user has entered text, the label is stored in the model specified by the <varname>value</varname> attribute. The use of the default label and value is shown in <xref linkend="exam-Component_Reference-richinplaceInput-Default_label_and_value" />.
			</para>
			<example id="exam-Component_Reference-richinplaceInput-Default_label_and_value">
				<title>Default label and value</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richinplaceInput-Default_label_and_value.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				By default, the event to switch the component to the <emphasis>edit</emphasis> state is a single mouse click. This can be changed using the <varname>editEvent</varname> attribute to specify a different event.
			</para>
			<para>
				The user can confirm and save their input in multiple ways:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						By default, pressing the <keycap>Enter</keycap> key will confirm and save the input.
					</para>
				</listitem>
				<listitem>
					<para>
						If <code>showControls="true"</code> is set, buttons for confirming or canceling are added to the component.
					</para>
				</listitem>
				<listitem>
					<para>
						If <code>saveOnBlur="true"</code> is set, the input is saved on the component's blur event.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				Pressing the <keycap>Esc</keycap> key cancels editing in all cases.
			</para>
		</section>
		
		<!-- TODO not in M4
		<section id="sect-Component_Reference-richinplaceInput-richinplaceInput_events">
			<title><sgmltag>&lt;rich:inplaceInput&gt;</sgmltag> events</title>
			<para>
				There are several event handlers that are specific to the <sgmltag>&lt;rich:inplaceInput&gt;</sgmltag> component:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<varname>oneditactivation</varname> is triggered before the <emphasis>edit</emphasis> state is activated.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>oneditactivated</varname> is triggered after the <emphasis>edit</emphasis> state is activated.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>onviewactivation</varname> is triggered before the <emphasis>view</emphasis> or "changed" state is activated.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>onviewactivated</varname> is triggered after the <emphasis>view</emphasis> or "changed" state is activated.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		-->
		
		<section id="sect-Component_Reference-richinplaceInput-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:inplaceInput&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Get the current value of the input control.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the value of the input control to the <parameter>newValue</parameter> string passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>isEditState()</function></term>
		         <listitem>
		            <para>
		               Returns <literal>true</literal> if the control is currently in the <emphasis>edit</emphasis> state, or <literal>false</literal> if the control is currently in the <emphasis>view</emphasis> state.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>isValueChanged()</function></term>
		         <listitem>
		            <para>
		               Returns <literal>true</literal> if the control's value has been changed from the default.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>save()</function></term>
		         <listitem>
		            <para>
		               Saves the current item as the control's value.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>cancel()</function></term>
		         <listitem>
		            <para>
		               Cancel editing the value.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getInput()</function></term>
		         <listitem>
		            <para>
		               Return the DOM element for the input.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richinplaceInput-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.InplaceInput</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIInplaceInput</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.InplaceInput</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.InplaceInputRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richinplaceInput-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richinplaceInput.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<!--<rich:inplaceSelect>-->
	<section id="sect-Component_Reference-Rich_inputs-richinplaceSelect">
		<title><sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag> component is similar to the <sgmltag>&lt;rich:inplaceInput&gt;</sgmltag> component, except that the <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag> component uses a drop-down selection box to enter text instead of a regular text field. Changes can be rendered either in-line or for the whole block, and inputs can be focused with keyboard navigation. The component is based on the JSF <classname>UISelectOne</classname> component, so all the standard rules for value definition, processing, conversion, and validation apply.
		</para>
		<para>
			The component has three functional states:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					When in the <emphasis>view</emphasis> state, the component displays its initial setting, such as "click to edit".
				</para>
			</listitem>
			<listitem>
				<para>
					When in the <emphasis>edit</emphasis> state, the user can select a value from a drop-down list.
				</para>
			</listitem>
			<listitem>
				<para>
					When in the <emphasis>changed</emphasis> state, the new value for the component has been confirmed, but it can be edited again if required.
				</para>
			</listitem>
		</itemizedlist>
		<figure id="figu-Component_Reference-richinplaceSelect-richinplaceSelect">
			<title><sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richinplaceSelect-richinplaceSelect.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The figure shows the process of interaction with a <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag> component. The first line shows the component displayed as a <guilabel>click to edit</guilabel> label. Once the label is clicked, the component becomes a drop-down list, shown in the second line. The final line shows the new selection in the text, which can be clicked and changed again if necessary.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richinplaceSelect-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage requires the <varname>value</varname> attribute to point to the expression for the current value of the component and a list of items. The list of items can be defined using the JSF components <sgmltag>&lt;f:selectItem/&gt;</sgmltag> and <sgmltag>&lt;f:selectItems/&gt;</sgmltag>.
			</para>
			<example id="exam-Component_Reference-richinplaceSelect-Defining_list_items_for_richinplaceSelect">
				<title>Defining list items for <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag></title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richinplaceSelect-Defining_list_items_for_richinplaceSelect.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richinplaceSelect-Interactivity_options">
			<title>Interactivity options</title>
			<para>
				When in the initial <emphasis>view</emphasis> state, the starting label can be set using the <varname>defaultLabel</varname> attribute, such as <code>defaultLabel="click to edit"</code>. Alternatively, if the initial value is already set through the <varname>value</varname> attribute, this is displayed instead.
			</para>
			<para>
				By default, the event to switch the component to the <emphasis>edit</emphasis> state is a single mouse click. This can be changed using the <varname>editEvent</varname> attribute to specify a different event. When switching to <emphasis>edit</emphasis> mode, the drop-down list of possible values will automatically be displayed; this can be deactivated by setting <code><varname>openOnEdit</varname>="false"</code>.
			</para>
			<para>
				Once a new value for the control is saved, the state switches to the "changed" state. Saving a new value for the control can be performed in a number of ways:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Once the user selects an item from the drop-down list, the item is saved as the new control value. This is the default setting. If <code>saveOnSelect="false"</code> is set, the component applies the selected item but remains in the <emphasis>edit</emphasis> state so a different selection could be chosen. The value is then applied when the <keycap>Enter</keycap> key is pressed.
					</para>
				</listitem>
				<listitem>
					<para>
						If <code>saveOnBlur="true"</code> is set, the selected item is saved as the new control value when the control loses focus.
					</para>
				</listitem>
				<listitem>
					<para>
						If <code>showControls="true"</code> is set, buttons are added to the control to confirm or cancel the selection. The new control value is only saved once the user confirms the selection using the button.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				Pressing the <keycap>Esc</keycap> key cancels editing in all cases.
			</para>
			<!-- TODO not in M4 -->
			<!--
			<para>
				These buttons can be positioned using the <varname>controlsHorizontalPosition</varname> attribute with settings of <literal>left</literal>, <literal>right</literal>, or <literal>center</literal>, and the <varname>controlsVerticalPosition</varname> attribute with settings <literal>bottom</literal>, <literal>center</literal>, or <literal>top</literal>. The confirmation control icons can be altered using the <varname>saveControlIcon</varname> and <varname>cancelControlIcon</varname>. Further customization is possible through the use of facets.
			</para>
			-->
		</section>

		<!--
		<section id="sect-Component_Reference-richinplaceInput-richinplaceSelect_events">
			<title><sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag> events</title>
			<para>
				There are several event handlers that are specific to the <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag> component:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<varname>oneditactivation</varname> is triggered before the <emphasis>edit</emphasis> state is activated.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>oneditactivated</varname> is triggered after the <emphasis>edit</emphasis> state is activated.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>onviewactivation</varname> is triggered before the <emphasis>view</emphasis> or "changed" state is activated.
					</para>
				</listitem>
				<listitem>
					<para>
						<varname>onviewactivated</varname> is triggered after the <emphasis>view</emphasis> or "changed" state is activated.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		-->
		
		<section id="sect-Component_Reference-richinplaceSelect-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:inplaceSelect&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Get the current value of the select control.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the value of the select control to the <parameter>newValue</parameter> string passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>isEditState()</function></term>
		         <listitem>
		            <para>
		               Returns <literal>true</literal> if the control is currently in the <emphasis>edit</emphasis> state, or <literal>false</literal> if the control is currently in the <emphasis>view</emphasis> state.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>isValueChanged()</function></term>
		         <listitem>
		            <para>
		               Returns <literal>true</literal> if the control's value has been changed from the default.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>save()</function></term>
		         <listitem>
		            <para>
		               Saves the current item as the control's value.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>cancel()</function></term>
		         <listitem>
		            <para>
		               Cancel editing the value.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getInput()</function></term>
		         <listitem>
		            <para>
		               Return the input entered into the control by the user.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getLabel()</function></term>
		         <listitem>
		            <para>
		               Return the default label of the control.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setLabel(newLabel)</function></term>
		         <listitem>
		            <para>
		               Set the default label of the control to the <parameter>newLabel</parameter> string passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>showPopup()</function></term>
		         <listitem>
		            <para>
		               Show the pop-up list of possible values.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>hidePopup()</function></term>
		         <listitem>
		            <para>
		               Hide the pop-up list.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richinplaceSelect-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.InplaceSelect</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIInplaceSelect</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Select</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.InplaceSelectRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richinplaceSelect-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richinplaceSelect.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<!--<rich:inputNumberSlider>-->
	<section id="sect-Component_Reference-Rich_inputs-richinputNumberSlider">
		<title><sgmltag>&lt;rich:inputNumberSlider&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:inputNumberSlider&gt;</sgmltag> component provides a slider for changing numerical values. Optional features include control arrows to step through the values, a tool-tip to display the value while sliding, and a text field for typing the numerical value which can then be validated against the slider's range.
		</para>
		<figure id="figu-Component_Reference-richinputNumberSlider-richinputNumberSlider">
			<title><sgmltag>&lt;rich:inputNumberSlider&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richinputNumberSlider-richinputNumberSlider.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						Two <sgmltag>&lt;rich:inputNumberSlider&gt;</sgmltag> components, one oriented horizontally and the other oriented vertically.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richinputNumberSlider-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic use of the component with no attributes specified will render a slider with a minimum value of 0, a maximum of 100, and a gradient step of 1, together with a text field for typing the desired numerical value. The slider is labeled with the minimum and maximum boundary values, and a tool-tip showing the current value is shown while sliding the slider. The <varname>value</varname> attribute is used for storing the currently selected value of the slider. Standard conversion and validation for the JSF <classname>UIInput</classname> component is applied.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richinputNumberSlider-Interactivity_options">
			<title>Interactivity options</title>
			<para>
				The text field can be removed by setting <code>showInput="false"</code>.
			</para>
			<para>
				The properties of the slider can be set with the attributes <varname>minValue</varname>, <varname>maxValue</varname>, and <varname>step</varname>.
			</para>
			<para>
				The minimum and maximum labels on the slider can be hidden by setting <code><varname>showBoundaryValues</varname>="false"</code>. The tool-tip showing the current value can be hidden by setting <code><varname>showToolTip</varname>="false"</code>.
			</para>
			<para>
				Arrow controls can be added to either side of the slider to adjust the value incrementally by setting <code><varname>showArrows</varname>="true"</code>. Clicking the arrows move the slider indicator in that direction by the gradient step, and clicking and holding the arrows moves the indicator continuously. The time delay for each step when updating continuously can be defined using the <varname>delay</varname> attribute.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richinputNumberSlider-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:inputNumberSlider&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Get the current value of the slider control.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the value of the slider control to the <parameter>newValue</parameter> integer passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>increase()</function></term>
		         <listitem>
		            <para>
		               Increase the value of the slider control by the gradient step amount.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>decrease()</function></term>
		         <listitem>
		            <para>
		               Decrease the value of the slider control by the gradient step amount.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richinputNumberSlider-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.InputNumberSlider</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIInputNumberSlider</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Input</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.inputNumberSliderRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richinputNumberSlider-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richinputNumberSlider.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<!-- <rich:inputNumberSpinner> -->
	<section id="sect-Component_Reference-Rich_inputs-richinputNumberSpinner">
		<title><sgmltag>&lt;rich:inputNumberSpinner&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:inputNumberSpinner&gt;</sgmltag> component is a single-line input field with buttons to increase and decrease a numerical value. The value can be changed using the corresponding directional keys on a keyboard, or by typing into the field.
		</para>
		<figure id="figu-Component_Reference-richinputNumberSpinner-richinputNumberSpinner">
			<title><sgmltag>&lt;rich:inputNumberSpinner&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richinputNumberSpinner-richinputNumberSpinner.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:inputNumberSpinner&gt;</sgmltag> component. The spinner currently has a value of 20, and the arrow buttons are used to increment or decrement the value.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richinputNumberSpinner-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic use of the component with no attributes specified will render a number spinner with a minimum value of 1, a maximum value of 100, and a gradient step of 1.
			</para>
			<para>
				These default properties can be re-defined with the attributes <varname>minValue</varname>, <varname>maxValue</varname>, and <varname>step</varname> respectively. The starting value of the spinner is the minimum value unless otherwise specified with the <varname>value</varname> attribute.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richinputNumberSpinner-Interactivity_options">
			<title>Interactivity options</title>
			<para>
				When changing the value using the buttons, raising the value above the maximum or cause the spinner to restart at the minimum value. Likewise, when lowering below the minimum value the spinner will reset to the maximum value. This behavior can be deactivated by setting <code>cycled="false"</code>, which will cause the buttons to stop responding when the reach the maximum or minimum value.
			</para>
			<para>
				The ability to change the value by typing into the text field can be disabled by setting <code>enableManualInput="false"</code>.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richinputNumberSpinner-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:inputNumberSpinner&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Get the current value of the spinner control.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the value of the spinner control to the <parameter>newValue</parameter> integer passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>increase()</function></term>
		         <listitem>
		            <para>
		               Increase the value of the spinner control by the gradient step amount.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>decrease()</function></term>
		         <listitem>
		            <para>
		               Decrease the value of the spinner control by the gradient step amount.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richinputNumberSpinner-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.InputNumberSpinner</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIInputNumber</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Input</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.InputNumberSpinnerRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richinputNumberSpinner-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richinputNumberSpinner.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>

	<!-- <rich:select> -->
	<section id="sect-Component_Reference-Rich_inputs-richselect">
		<title><sgmltag>&lt;rich:select&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:select&gt;</sgmltag> component provides a drop-down list box for selecting a single value from multiple options. The <sgmltag>&lt;rich:select&gt;</sgmltag> component can be configured as a combo-box, where it will accept typed input. The component also supports keyboard navigation. The <sgmltag>&lt;rich:select&gt;</sgmltag> component functions similarly to the JSF <classname>UISelectOne</classname> component.
		</para>

		<figure id="figu-Component_Reference-richselect-richselect">
			<title><sgmltag>&lt;rich:select&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richselect-richselect.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:select&gt;</sgmltag> component.
					</para>
				</textobject>
			</mediaobject>
		</figure>

		<section id="sect-Component_Reference-richselect-Basic_usage">
			<title>Basic usage</title>
			<para>
				Simple usage of the <sgmltag>&lt;rich:select&gt;</sgmltag> component requires the <varname>value</varname> attribute to store the selected value. Additionally, child tags to manage the list of selections are required. The child tags can either be a number of <sgmltag>&lt;f:selectItem&gt;</sgmltag> tags or a <sgmltag>&lt;f:selectItems&gt;</sgmltag> tag which points to a data model containing a list of selection items. The <varname>value</varname> attribute is used to store the current selection.
			</para>
			<example id="exam-Component_Reference-richselect-Selection_items">
				<title>Selection items</title>
				<variablelist>
					<varlistentry>
						<term>Using multiple <sgmltag>&lt;f:selectItem&gt;</sgmltag> tags</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richselect-Selection_items-0.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Using a single <sgmltag>&lt;f:selectItems&gt;</sgmltag> tag</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richselect-Selection_items-1.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</example>
			<para>
				The arrow keys on a keyboard can be used to highlight different items in the list. If the control loses focus or the <keycap function="enter">Enter</keycap> key is pressed, the highlighted option is chosen as the value and the list is closed. Pressing the <keycap function="escape">Esc</keycap> key will close the list but not change the value.
			</para>
		</section>

		<section id="sect-Component_Reference-richselect-Using_manual_input">
			<title>Using manual input</title>
			<para>
				The <sgmltag>&lt;rich:select&gt;</sgmltag> component allows the user to type into a text field to scroll through or filter the list. By default, the <sgmltag>&lt;rich:select&gt;</sgmltag> component functions as a drop-down list with no manual input. To add keyboard support for manual input, set <code>enableManualInput="true"</code>.
			</para>
			<para>
				Once the user begins typing, the first available matching option is highlighted. If the typed text does not match any values in the list, no value is chosen and the drop-down list displays as empty. Other keyboard interaction remains the same as the basic drop-down list.
			</para>
			<para>
				The standard JSF <sgmltag>&lt;h:selectOne&gt;</sgmltag> component does not offer this extended keyboard support. However, since the <sgmltag>&lt;rich:select&gt;</sgmltag> component is still based on the JSF <classname>UISelectOne</classname> component, it will not accept a value that does not match any items in the drop-down list. If an invalid value is entered, it is highlighted as erroneous and validation messages appear with the submission.
			</para>
			<!-- TODO: not in M4 -->
			<!--
			<para>
				Typing text into the text box causes the list to scroll to the relevant item by default. This behavior can be changed so that the typed text filters the contents of the list instead, showing only those items that begin with the typed text. To use typed text as a filter for manual-input lists, set <code>filterOnUpdates="true"</code>.
			</para>
			-->
		</section>

		<section id="sect-Component_Reference-richselect-Advanced_options">
			<title>Advanced options</title>
			<para>
				Use the <varname>defaultLabel</varname> attribute to set a place-holder label, such as <code>defaultLabel="select an option"</code>.
			</para>
			<para>
				Server-side processing occurs in the same manner as for an <sgmltag>&lt;h:selectOneMenu&gt;</sgmltag> component. As such, custom objects used for selection items should use the same converters as for an <sgmltag>&lt;h:selectOneMenu&gt;</sgmltag> component.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richselect-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:select&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getValue()</function></term>
		         <listitem>
		            <para>
		               Get the current value of the text field.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>setValue(newValue)</function></term>
		         <listitem>
		            <para>
		               Set the value of the text field to the <parameter>newValue</parameter> string passed as a parameter.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>getLabel()</function></term>
		         <listitem>
		            <para>
		               Return the default label of the control.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>showPopup()</function></term>
		         <listitem>
		            <para>
		               Show the pop-up list of completion values.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>hidePopup()</function></term>
		         <listitem>
		            <para>
		               Hide the pop-up list.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-richselect-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Select</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UISelect</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Select</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.SelectRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richselect-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richselect.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
		
	</section>

    <!-- <rich:orderingList> -->
	<section id="sect-Component_Reference-Rich_inputs-richorderingList">
		<title><sgmltag>&lt;rich:orderingList&gt;</sgmltag></title>
		<para>
            The <sgmltag>&lt;rich:orderingList&gt;</sgmltag> is a component for ordering items in a list. This component allows one to reorder a list and sort it on the client side.
		</para>

		<figure id="figu-Component_Reference-richorderingList-richorderingList">
			<title><sgmltag>&lt;rich:select&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richorderingList-richorderingList.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:orderingList&gt;</sgmltag> component.
					</para>
				</textobject>
			</mediaobject>
		</figure>

		<section id="sect-Component_Reference-richorderingList-Basic_usage">
			<title>Basic usage</title>
			<para>
				To use the <sgmltag>&lt;rich:orderingList&gt;</sgmltag> bind the <varname>value</varname> attribute to the list to be ordered.  This <varname>var</varname> attribute specifies a variable to use when iterating through the list values.  The <varname>var</varname> attribute is used within the <varname>itemLabel</varname> to assign the object value to be displayed.  Similarly, the <varname>var</varname> attribute is used within the <varname>itemValue</varname> attribute to specify the object value mapped by the display value.  If the itemValue is not of type <classname>String</classname>, a converter must be specified for this itemValue using either the <varname>converter</varname> attribute, or a nested <sgmltag>&lt;f:converter&gt;</sgmltag> tag.
			</para>
			<example id="exam-Component_Reference-richorderingList-ItemLabel_use">
				<title>ItemLabel/ItemValue use</title>
				<variablelist>
					<varlistentry>
						<term>Using the <varname>itemLabel</varname> and <varname>itemValue</varname> attributes</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richorderingList-ItemLabel_use.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</example>
			<para>
				The arrow keys on a keyboard can be used to highlight different items in the list.  Pressing <keycap>ctrl</keycap> modifier with the arrow keys will move the selected item up or down within the list.
			</para>
		</section>

		<section id="sect-Component_Reference-richorderingList-Column_layout">
			<title>Column Layout</title>
			<para>
				In addition to the above simple itemLabel display, the <sgmltag>&lt;rich:orderingList&gt;</sgmltag> supports a columnar layout of the itemValues to be sorted.  This is achieved by nesting <sgmltag>&lt;rich:column&gt;</sgmltag> tags within the ordering list, and referencing the <varname>var</varname> attribute from within the <sgmltag>&lt;rich:column&gt;</sgmltag> EL.
			</para>
			<example id="exam-Component_Reference-richorderingList-richcolumn">
				<title>Nested <sgmltag>&lt;rich:column&gt;</sgmltag> tags</title>
				<variablelist>
					<varlistentry>
						<term>Using <sgmltag>&lt;rich:column&gt;</sgmltag> tags nested within the <sgmltag>&lt;rich:orderingList&gt;</sgmltag></term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richorderingList-richcolumn_use.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</example>
			<para>
				When using <sgmltag>&lt;rich:column&gt;</sgmltag> tags to layout the <sgmltag>&lt;rich:orderingList&gt;</sgmltag> items, the <varname>itemLabel</varname> attribute is irrelevant, and may be left out.
			</para>
		</section>

        <section id="sect-Component_Reference-richorderingList-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;rich:orderingList&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>getList()</function></term>
		         <listitem>
		            <para>
		               Returns the javascript list object backing the <sgmltag>&lt;rich:orderingList&gt;</sgmltag>.  This list can be used to select/unselect item(s).
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>up()</function></term>
		         <listitem>
		            <para>
		               Move the currently selected item(s) up one step.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>down()</function></term>
		         <listitem>
		            <para>
		               Move the currently selected item(s) down one step.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>upTop()</function></term>
		         <listitem>
		            <para>
		               Move the currently selected item(s) to the top of the list.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>downBottom()</function></term>
		         <listitem>
		            <para>
		               Move the currently selected item(s) to the bottom of the list.
		            </para>
		         </listitem>
		      </varlistentry>
              <varlistentry>
		         <term><function>toggleButtons()</function></term>
		         <listitem>
		            <para>
		               Activate/de-activate the orderingList buttons based on the current component item state.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>

        <section id="sect-Component_Reference-richorderingList-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.OrderingList</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UIOrderingList</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.SelectMany</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.OrderingListRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

        <section id="sect-Component_Reference-richorderingList-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<xi:include href="skinning/tabl-richorderingList.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
    </section>

</chapter>

