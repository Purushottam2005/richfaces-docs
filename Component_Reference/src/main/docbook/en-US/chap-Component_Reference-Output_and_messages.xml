<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Output_and_messages">
	<title>Output and messages</title>
	<!--  In development notification  -->
	<important>
		<title>Documentation in development</title>
		<para>
			Some concepts covered in this chapter may refer to the previous version of <productname>Richfaces</productname>, version 3.3.3. This chapter is scheduled for review to ensure all information is up to date.
		</para>
	</important>
	<para>
		Read this chapter for details on components that display messages and other feedback to the user.
	</para>
	
	<!-- <rich:message> -->
	<section id="sect-Component_Reference-Output_and_messages-richmessage">
		<title><sgmltag>&lt;rich:message&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:message&gt;</sgmltag> component renders a single message relating to another specific component. The message consists of two parts, both of which are optional: the marker icon and the textual label. The appearance of the message can be customized, and tool-tips can be used for further information about the message.
		</para>
		<figure id="figu-Component_Reference-richmessage-richmessage_component">
			<title>rich:message component</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richmessage-richmessage_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The <sgmltag>&lt;rich:message&gt;</sgmltag> component displaying a message warning that a minimum of five characters is required for an associated text input field. It features both a marker icon in the form of a red and white cross, and a red textual label.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richmessage-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:message&gt;</sgmltag> component needs the <varname>for</varname> attribute to point to the <varname>id</varname> identifier of the related component. The message is displayed depending on the state of the linked component's requests.
			</para>
			<para>
				The <sgmltag>&lt;rich:message&gt;</sgmltag> component is automatically rendered after an Ajax request, even without the use of an <sgmltag>&lt;a4j:outputPanel&gt;</sgmltag> component.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richmessage-Appearance">
			<title>Appearance</title>
			<para>
				The <varname>passedLabel</varname> attribute contains a message to display when there are no errors; that is, when validation passes successfully. The <varname>showSummary</varname> attribute specifies whether to display only a summary of the full message. The full message can be displayed in a tool-tip when hovering the mouse over the summary.
			</para>
			<para>
				Facets are used to define the marker icons for different message states:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>errorMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>error</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>fatalMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>fatal</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>infoMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>info</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>passedMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages that are not of the <literal>error</literal>, <literal>fatal</literal>, <literal>info</literal>, or <literal>warn</literal> severity classes.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>warnMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>warn</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<example id="exam-Component_Reference-richmessage-richmessage_example">
				<title>rich:message example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richmessage-richmessage_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richmessage-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.component.RichMessage</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlRichMessage</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.component.RichMessage</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.RichMessageRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.RichMessageTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!-- <rich:messages> -->
	<section id="sect-Component_Reference-Output_and_messages-richmessages">
		<title><sgmltag>&lt;rich:messages&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:messages&gt;</sgmltag> components works similarly to the <sgmltag>&lt;rich:message&gt;</sgmltag> component, but can display validation messages for a group of components instead of just a single component. Refer to <xref linkend="sect-Component_Reference-Output_and_messages-richmessage" /> for details on the <sgmltag>&lt;rich:message&gt;</sgmltag> component.
		</para>
		<figure id="figu-Component_Reference-richmessages-richmessages_component">
			<title>rich:messages component</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richmessages-richmessages_component.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The <sgmltag>&lt;rich:messages&gt;</sgmltag> component displaying two messages both warning of insufficient characters in two different input controls. Both messages feature a marker icon in the form of a red and white cross.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richmessages-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:messages&gt;</sgmltag> component doesn't require any extra attributes for basic usage. It displays all messages relating to requests from components in the same container element.
			</para>
			<para>
				The <sgmltag>&lt;rich:message&gt;</sgmltag> component is automatically rendered after an Ajax request, even without the use of an <sgmltag>&lt;a4j:outputPanel&gt;</sgmltag> component.
			</para>
		</section>

		<section id="sect-Component_Reference-richmessages-Appearance">
			<title>Appearance</title>
			<para>
				The <sgmltag>&lt;rich:messages&gt;</sgmltag> component displays error messages for each validating component in the same container. The <varname>passedLabel</varname> attribute contains a message to display when there are no errors; that is, when validation for all components passes successfully. The <varname>layout</varname> attribute defines how the messages are presented: either using <literal>list</literal> for a list layout, or <literal>table</literal> for a tabular layout.
			</para>
			<para>
				All messages use the same state icons, specified by using facets in the same way as for the <sgmltag>&lt;rich:message&gt;</sgmltag> component:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>errorMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>error</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>fatalMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>fatal</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>infoMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>info</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>passedMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages that are not of the <literal>error</literal>, <literal>fatal</literal>, <literal>info</literal>, or <literal>warn</literal> severity classes.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>warnMarker</literal></term>
					<listitem>
						<para>
							Defines the icon for messages with the <literal>warn</literal> severity class.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<example id="exam-Component_Reference-richmessages-richmessages_example">
				<title>rich:messages example</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-richmessages-richmessages_example.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richmessages-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.component.RichMessages</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlRichMessages</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.component.RichMessages</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.RichMessagesRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.RichMessagesTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!-- <rich:paint2D> -->
	<!--
	<section id="sect-Component_Reference-Output_and_messages-richpaint2D">
		<title><sgmltag>&lt;rich:paint2D&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	-->
	
	<!-- <rich:progressBar> -->
	<section id="sect-Component_Reference-Output_and_messages-richprogressBar">
		<title><sgmltag>&lt;rich:progressBar&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component displays a progress bar to indicate the status of a process to the user. It can update either through Ajax or on the client side, and the look and feel can be fully customized.
		</para>
		<figure id="figu-Component_Reference-richprogressBar-richprogressBar">
			<title><sgmltag>&lt;rich:progressBar&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richprogressBar-richprogressBar.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component. The bar has progressed to 50% of the total time.
					</para>
				</textobject>
			</mediaobject>
		</figure>
		
		<section id="sect-Component_Reference-richprogressBar-Basic_usage">
			<title>Basic usage</title>
			<para>
				Basic usage of the <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component requires only the <varname>value</varname> attribute, which points to the method that provides the current progress.
			</para>
			<example id="exam-Component_Reference-richprogressBar-Basic_usage">
				<title>Basic usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richprogressBar-Customizing_the_appearance">
			<title>Customizing the appearance</title>
			<para>
				By default, the minimum value of the progress bar is <literal>0</literal> and the maximum value of the progress bar is <literal>100</literal>. These values can be customized using the <varname>minValue</varname> and <varname>maxValue</varname> attributes respectively.
			</para>
			<para>
				The progress bar can be labeled in one of two ways:
			</para>
			<variablelist>
				<varlistentry>
					<term>Using the <varname>label</varname> attribute</term>
					<listitem>
						<para>
							The content of the <varname>label</varname> attribute is displayed over the progress bar.
						</para>
						<example id="exam-Component_Reference-richprogressBar-Using_the_label_attribute">
							<title>Using the <varname>label</varname> attribute</title>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Using_the_label_attribute.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</example>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Using nested child components</term>
					<listitem>
						<para>
							Child components, such as the JSF <sgmltag>&lt;h:outputText&gt;</sgmltag> component, can be nested in the <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component to display over the progress bar.
						</para>
						<example id="exam-Component_Reference-richprogressBar-Using_nested_child_components">
							<title>Using nested child components</title>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Using_nested_child_components.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</example>
					</listitem>
				</varlistentry>
			</variablelist>
			<note>
				<title>Macro-substitution</title>
				<para>
					The following section details the use of macro-substitution paramaters in labeling. Macro-substitution may be revised and altered in future versions of RichFaces. Be aware of this when using macro-substitution in your applications.
				</para>
			</note>
			<para>
				For labeling, the <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component recognizes three macro-substitution parameters:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>{value}</literal></term>
					<listitem>
						<para>
							The current progress value.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>{minValue}</literal></term>
					<listitem>
						<para>
							The minimum value for the progress bar.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>{maxValue}</literal></term>
					<listitem>
						<para>
							The maximum value for the progress bar.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<example id="exam-Component_Reference-richprogressBar-Using_macro-substitution_for_labeling">
				<title>Using macro-substitution for labeling</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Using_macro-substitution_for_labeling.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				Additionally, you can use the <literal>{param}</literal> parameter to specify any custom parameters you require. Define the parameters in the bean for the progress method, then reference it with the <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component's <varname>parameters</varname> attribute, as shown in <xref linkend="exam-Component_Reference-richprogressBar-Using_the_param_parameter" />.
			</para>
			<example id="exam-Component_Reference-richprogressBar-Using_the_param_parameter">
				<title>Using the <varname>param</varname> parameter</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Using_the_param_parameter.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				To define customized initial and complete states for the progress bar, use the <literal>initial</literal> and <literal>complete</literal> facets. The <literal>initial</literal> facet displays when the progress value is less than or equal to the minimum value, and the <literal>complete</literal> facet displays when the progress value is greater than or equal to the maximum value.
			</para>
			<example id="exam-Component_Reference-richprogressBar-Initial_and_complete_states">
				<title>Initial and complete states</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Initial_and_complete_states.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richprogressBar-Using_set_intervals">
			<title>Using set intervals</title>
			<para>
				The <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component can be set to constantly poll for updates at a constant interval. Use the <varname>interval</varname> component to set the interval in milliseconds. The progress bar is updated whenever the polled value changes. Polling is only active when the <varname>enabled</varname> attribute is set to <literal>true</literal>.
			</para>
			<example id="exam-Component_Reference-richprogressBar-Using_set_intervals">
				<title>Using set intervals</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richprogressBar-Using_set_intervals.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richprogressBar-Update_mode">
			<title>Update mode</title>
			<para>
				The mode for updating the progress bar is determined by the <varname>mode</varname> attribute, which can have one of the following values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							The progress bar updates in the same way as the <sgmltag>&lt;a4j:poll&gt;</sgmltag> component. The <sgmltag>&lt;rich:progressBar&gt;</sgmltag> component repeatedly polls the server for the current progress value.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							The progress bar updates on the client side, set using the JavaScript API.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sect-Component_Reference-richprogressBar-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.ProgressBar</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlProgressBar</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.component.ProgressBar</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.renderkit.ProgressBarRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.ProgressBarTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
	<!-- <rich:toolTip> -->
	<section id="sect-Component_Reference-Output_and_messages-richtoolTip">
		<title><sgmltag>&lt;rich:toolTip&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component provides an informational tool-tip. The tool-tip can be attached to any control and is displayed when hovering the mouse cursor over the control.
		</para>
		<figure id="figu-Component_Reference-richtoolTip-richtoolTip">
			<title><sgmltag>&lt;rich:toolTip&gt;</sgmltag></title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-richtoolTip-richtoolTip.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						A <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component, displayed while hovering the mouse cursor over a button control.
					</para>
				</textobject>
			</mediaobject>
		</figure>

		<section id="sect-Component_Reference-richtoolTip-Basic_usage">
			<title>Basic usage</title>
			<para>
				For basic usage, define the tool-tip text using the <varname>value</varname> attribute. The <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component is then automatically attached to the parent element, and is usually shown when the mouse cursor hovers.
			</para>
			<para>
				Alternatively, the content of the tool-tip can be defined inside the <sgmltag>&lt;rich:toolTip&gt;</sgmltag> tags, and the <varname>value</varname> attribute is not used. This allows HTML tags to be used to define the content, and provides for rich content such as images, links, buttons, and other RichFaces components.
			</para>
			<example id="exam-Component_Reference-richtoolTip-Defining_tool-tip_content">
				<title>Defining tool-tip content</title>
				<variablelist>
					<varlistentry>
						<term>Basic content</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtoolTip-Defining_tool-tip_content-0.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Rich content</term>
						<listitem>
							<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtoolTip-Defining_tool-tip_content-1.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
						</listitem>
					</varlistentry>
				</variablelist>
			</example>
		</section>

		<section id="sect-Component_Reference-richtoolTip-Attaching_the_tool-tip_to_another_component">
			<title>Attaching the tool-tip to another component</title>
			<para>
				If not otherwise specified, the tool-tip is attached to the parent element in which it is defined. The <varname>for</varname> attribute is used to attach the tool-tip to another component, pointing to the target component's <varname>id</varname> identifier. This allows the <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component to be specified outside the target element. This approach is demonstrated in <xref linkend="exam-Component_Reference-richtoolTip-Attaching_the_tool-tip" />.
			</para>
			<example id="exam-Component_Reference-richtoolTip-Attaching_the_tool-tip">
				<title>Attaching the tool-tip</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtoolTip-Attaching_the_tool-tip.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				The <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component can alternatively be left unattached, and is instead invoked through an event handler on the target component. To leave the <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component unattached, set <code>attached="false"</code>, and define the event handler to trigger the tool-tip on the target component. This approach is demonstrated in <xref linkend="exam-Component_Reference-richtoolTip-Unattached_tool-tips" />. When leaving the <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component unattached, ensure it has an <varname>id</varname> identifier defined. If the <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component is nested inside the target element, it must be the last child. If it is defined outside the target element, it must be nested in an <sgmltag>&lt;a4j:form&gt;</sgmltag> component.
			</para>
			<example id="exam-Component_Reference-richtoolTip-Unattached_tool-tips">
				<title>Unattached tool-tips</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtoolTip-Unattached_tool-tips.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>

		<section id="sect-Component_Reference-richtoolTip-Appearance">
			<title>Appearance</title>
			<para>
				By default, the <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component is positioned intelligently based on the position of the mouse cursor. Use the <varname>direction</varname> attribute to specify a corner of the target component at which to display the tool-tip instead. Possible values include <literal>top-left</literal>, <literal>top-right</literal>, <literal>bottom-left</literal>, and <literal>bottom-right</literal>. Use the <varname>horizontalOffset</varname> and <varname>verticalOffset</varname> attributes to specify the horizontal offset and vertical offset at which to display the tool-tip.
			</para>
			<para>
				Use the <varname>hideEvent</varname> attribute to specify when the tool-tip is hidden. The default value is <literal>none</literal>, so the tool-tip remains shown. However, it can be linked to an event on the target component, such as the <literal>mouseout</literal> event.
			</para>
			<para>
				Set <code>followMouse="true"</code> to cause the tool-tip to follow the user's mouse movements.
			</para>
			<para>
				Advanced appearance features are demonstrated in <xref linkend="exam-Component_Reference-richtoolTip-Advanced_tool-tip_usage" />.
			</para>
		</section>
		
		<section id="sect-Component_Reference-richtoolTip-Update_mode">
			<title>Update mode</title>
			<para>
				The mode for updating the tool-tip is determined by the <varname>mode</varname> attribute, which can have one of the following values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							The tool-tip content is requested from the server with every activation.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							The tool-tip content is rendered once on the server. An external submit causes the content to re-render.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				When using <code>mode="ajax"</code>, define the <literal>defaultContent</literal> facet. The tool-tip displays the content of the <literal>defaultContent</literal> facet while loading the actual content from the server.
			</para>
			<example id="exam-Component_Reference-richtoolTip-Advanced_tool-tip_usage">
				<title>Advanced tool-tip usage</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtoolTip-Advanced_tool-tip_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>

		<section id="sect-Component_Reference-richtoolTip-richtoolTip_client-side_events">
			<title><sgmltag>&lt;rich:toolTip&gt;</sgmltag> client-side events</title>
			<para>
				The <sgmltag>&lt;rich:toolTip&gt;</sgmltag> component supports the following client-side events:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>click</literal></term>
					<listitem>
						<para>
							This event is activated when the tool-tip is clicked with the mouse.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>dblclick</literal></term>
					<listitem>
						<para>
							This event is activated when the tool-tip is double-clicked with the mouse.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>mouseout</literal></term>
					<listitem>
						<para>
							This event is activated when the mouse cursor leaves the tool-tip.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>mousemove</literal></term>
					<listitem>
						<para>
							This event is activated when the mouse cursor moves over the tool-tip.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>mouseover</literal></term>
					<listitem>
						<para>
							This event is activated when the mouse cursor hovers over the tool-tip.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>show</literal></term>
					<listitem>
						<para>
							This event is activated when the tool-tip is shown.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>complete</literal></term>
					<listitem>
						<para>
							This event is activated when the tool-tip is completed.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>hide</literal></term>
					<listitem>
						<para>
							This event is activated when the tool-tip is hidden.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sect-Component_Reference-richtoolTip-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.component.toolTip</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmlToolTip</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.component.toolTip</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.renderkit.html.toolTipRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.HtmlToolTipTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
	</section>
</chapter>

