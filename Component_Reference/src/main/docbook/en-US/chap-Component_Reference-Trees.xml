<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Trees">
	<title>Trees</title>
	<para>
		Read this chapter for details on components that use tree structures.
	</para>

	<section id="sect-Component_Reference-Trees-richtree">
		<title><sgmltag>&lt;rich:tree&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:tree&gt;</sgmltag> component provides a hierarchical tree control. Each <sgmltag>&lt;rich:tree&gt;</sgmltag> component typically consists of <sgmltag>&lt;rich:treeNode&gt;</sgmltag> child components. The appearance and behavior of the tree and its nodes can be fully customized.
		</para>

		<section id="sect-Component_Reference-richtree-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:tree&gt;</sgmltag> component requires the <varname>value</varname> attribute to point to the data model for populating the tree. The data model must be either an <interfacename>org.richfaces.model.TreeNode</interfacename> interface, an <varname>org.richfaces.model.TreeDataModel</varname> interface, or a <interfacename>javax.swing.tree.TreeNode</interfacename> interface. The <varname>var</varname> attribute declares the variable used for iterating through the data model, so that child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components can reference each iteration.
			</para>
			<para>
				Ideally, the <sgmltag>&lt;rich:tree&gt;</sgmltag> component needs one or more <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components to work with the data model. However if no <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components are provided the tree creates default nodes instead.
			</para>
			<example id="exam-Component_Reference-richtree-Basic_usage">
				<title>Basic usage</title>
				<para>
					This example demonstrates basic usage of the <sgmltag>&lt;rich:tree&gt;</sgmltag> component using an <interfacename>org.richfaces.model.TreeNode</interfacename> data model.
				</para>
				<para>
					The data model is constructed as follows:
				</para>
				<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Basic_usage.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The tree then accesses the nodes of the model using the <literal>station</literal> variable:
				</para>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/exam-Component_Reference-richtree-Basic_usage.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</example>
		</section>

		<section id="sect-Component_Reference-richtree-Appearance">
			<title>Appearance</title>
			<para>
				Different nodes in the tree can have different appearances, such as node icons, depending on the type of data the node contains. Use the <varname>nodeType</varname> attribute to differentiate the types of nodes; the node is then rendered according to the <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component with the corresponding <varname>type</varname> attribute. <xref linkend="exam-Component_Reference-richtree-nodeType_attribute" /> shows a <sgmltag>&lt;rich:tree&gt;</sgmltag> component with three different child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components defined to represent three different node appearances. Refer to <xref linkend="sect-Component_Reference-richtreeNode-Appearance" /> for details on customizing the appearance of <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components.
			</para>
			<example id="exam-Component_Reference-richtree-nodeType_attribute">
				<title><varname>nodeType</varname> attribute</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-nodeType_attribute.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/exam-Component_Reference-richtree-nodeType_attribute.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</example>
			<!--
			<para>
				Alternatively, use Expression Language (<acronym>EL</acronym>) with the <varname>nodeType</varname> attribute, as shown in <xref linkend="exam-Component_Reference-richtree-nodeType_attribute_with_Expression_Language" />.
			</para>
			<example id="exam-Component_Reference-richtree-nodeType_attribute_with_Expression_Language">
				<title><varname>nodeType</varname> attribute with Expression Language</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-nodeType_attribute_with_Expression_Language.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			-->
			<para>
				If the <varname>nodeType</varname> attribute returns null, the node is rendered as a "<emphasis>typeless</emphasis>" (or default) node. The <emphasis>typeless</emphasis> node is the first child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component with a valid <varname>rendered</varname> attribute, but without a defined <varname>type</varname> attribute.
			</para>
			<para>
				If the <varname>nodeType</varname> attribute is not included and there are no child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components, the tree constructs a default node itself.
			</para>
			<para>
				Icons for different nodes and node states can be defined for the whole tree using the following attributes:
			</para>
			<variablelist>
				<varlistentry>
					<term><varname>iconLeaf</varname></term>
					<listitem>
						<para>
							The <varname>iconLeaf</varname> attribute points to the icon to use for any node that does not contain any child nodes.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><varname>iconExpanded</varname> and <varname>iconCollapsed</varname></term>
					<listitem>
						<para>
							The <varname>iconExpanded</varname> and <varname>iconCollapsed</varname> attributes point to the icons to use for expanded and collapsed nodes respectively. If these attributes are defined, the <varname>icon</varname> attribute is not used.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<!-- TODO not in M6 -->
			<!--
			<para>
				Alternatively, use facets with the same names as the attributes to define the icons, as shown in <xref linkend="exam-Component_Reference-richtree-Icon_facets" />. The width of the rendered facet is 16 pixels.
			</para>
			<example id="exam-Component_Reference-richtree-Icon_facets">
				<title>Icon facets</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Icon_facets.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			-->
		</section>
		
		<section id="sect-Component_Reference-richtree-Expanding_and_collapsing_tree_nodes">
			<title>Expanding and collapsing tree nodes</title>
			<para>
				The mode for performing submissions when nodes are expanded or collapsed is determined by the <varname>toggleType</varname> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							This is the default setting. The <sgmltag>&lt;rich:tree&gt;</sgmltag> component performs an Ajax form submission, and only the content of the tree is rendered.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:tree&gt;</sgmltag> component performs a common submission, completely refreshing the page.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:tree&gt;</sgmltag> component updates on the client side through JavaScript, without any additional requests or updates. All nodes are rendered to the client during the initial page rendering.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				By default, tree nodes are expanded and collapsed through the <guibutton>+</guibutton> and <guibutton>-</guibutton> controls. To expand or collapse a tree node using an action event such as a mouse click, specify the event with the <varname>toggleNodeEvent</varname> attribute.
			</para>
		</section>

		<section id="sect-Component_Reference-richtree-Selecting_tree_nodes">
			<title>Selecting tree nodes</title>
			<para>
				The mode for performing submissions when nodes are selected is determined by the <varname>selectionType</varname> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							This is the default setting. The <sgmltag>&lt;rich:tree&gt;</sgmltag> component performs an Ajax form submission, and only the content of the tree is rendered.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:tree&gt;</sgmltag> component updates on the client side using JavaScript, without any additional requests or updates.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="sect-Component_Reference-richtree-Identifying_nodes_with_the_rowKeyConverter_attribute">
			<title>Identifying nodes with the <varname>rowKeyConverter</varname> attribute</title>
			<para>
				If the <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses a custom data model, the data model provides unique keys for tree nodes so they can be identified during a client request. The <sgmltag>&lt;rich:tree&gt;</sgmltag> component can use strings as key values. These strings may contain special characters that are not allowed by browsers, such as the left angle bracket (&lt;) and ampersand (&amp;). To allow these characters in the keys, a row key converter must be provided.
			</para>
			<para>
				To apply a converter to the <sgmltag>&lt;rich:tree&gt;</sgmltag> component, define it with the <varname>rowKeyConverter</varname> attribute.
			</para>
			<!--
			<para>
				The <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses a data model to represent the node structure on the page. To identify a particular node during a client request, the model provides unique keys for tree nodes. The <sgmltag>&lt;rich:tree&gt;</sgmltag> component can use strings as key values. These strings may contain special characters that are not allowed by browsers, such as the left angle bracket (&lt;) and ampersand (&amp;). To allow these characters in the keys, the following converter is provided:
			</para>
			<variablelist>
				<varlistentry>
					<term><classname>org.richfaces.TreeRowKeyConverter</classname></term>
					<listitem>
						<para>
							The <classname>org.richfaces.TreeRowKeyConverter</classname> converter is used for trees constructed using <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components. The key should be of the type <type>java.lang.String</type>.
						</para>
					</listitem>
				</varlistentry>
				-->
				<!-- TODO not in M5
				<varlistentry>
					<term><classname>org.richfaces.TreeAdaptorRowKeyConverter</classname></term>
					<listitem>
						<para>
							The <classname>org.richfaces.TreeAdaptorRowKeyConverter</classname> converter is used for trees constructed using <sgmltag>&lt;rich:treeNodesAdaptor&gt;</sgmltag> components. The key should be of the type <type>java.lang.String</type>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>org.richfaces.TreeAdaptorIntegerRowKeyConverter</classname></term>
					<listitem>
						<para>
							The <classname>org.richfaces.TreeAdaptorIntegerRowKeyConverter</classname> converter is used for trees constructed using <sgmltag>&lt;rich:treeNodesAdaptor&gt;</sgmltag> components, but uses a numerical key. The key should be of the type <type>java.lang.Integer</type>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				To apply a converter to the <sgmltag>&lt;rich:tree&gt;</sgmltag> component, define it with the <varname>rowKeyConverter</varname> attribute. <xref linkend="exam-Component_Reference-richtree-Identifying_nodes" /> demonstrates the use of a converter to identify tree nodes.
			</para>
			<example id="exam-Component_Reference-richtree-Identifying_nodes">
				<title>Identifying nodes</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Identifying_nodes.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The tree uses the following data model. The model can contain special characters normally disallowed in web page code.
				</para>
				<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Identifying_nodes.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			-->
		</section>

		<!-- TODO not in M6 -->
		<!--
		<section id="sect-Component_Reference-richtree-Built-in_drag_and_drop">
			<title>Built-in drag and drop</title>
			<para>
				
			</para>
		</section>
		-->

		<section id="sect-Component_Reference-richtree-Event_handling">
			<title>Event handling</title>
			<para>
				In addition to the standard Ajax events and HMTL events, the <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses the following client-side events:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>nodetoggle</varname> event is triggered when a node is expanded or collapsed.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>beforenodetoggle</varname> event is triggered before a node is expanded or collapsed.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>selectionchange</varname> event is triggered when a node is selected.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>beforeselectionchange</varname> event is triggered before a node is selected.
					</para>
				</listitem>
				<!--
				<listitem>
					<para>
						The <varname>dragstart</varname> event is triggered when an element starts being dragged.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>dragexit</varname> event is triggered when an element is dragged out of the tree.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>dragenter</varname> event is triggered when an element is dragged into the tree.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>dragend</varname> event is triggered when an element is dropped.
					</para>
				</listitem>
				-->
			</itemizedlist>
			<para>
				The <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses the following server-side listeners:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>toggleListener</varname> listener processes expand and collapse events.
					</para>
				</listitem>
				<!--
				<listitem>
					<para>
						The <varname>dragListener</varname> listener processes drag events.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>dropListener</varname> listener processes drop events.
					</para>
				</listitem>
				-->
				<listitem>
					<para>
						The <varname>selectionChangeListener</varname> listener processes the request when a node is selected.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richtree-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.Tree</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.UItree</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.Tree</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.TreeRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.TreeHandler</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-richtree-Style_classes">
			<title>Style classes</title>
			<para>
				Styling for the <sgmltag>&lt;rich:tree&gt;</sgmltag> component is mostly applied to the tree nodes. Refer to <xref linkend="sect-Component_Reference-richtreeNode-Style_classes_and_skin_parameters" /> for details on styling tree nodes. In addition, the <sgmltag>&lt;rich:tree&gt;</sgmltag> component can make use of the style classes outlined in <xref linkend="vlst-richtree-Style_classes" />.
			</para>
			<xi:include href="skinning/vlst-richtree.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>

		<section id="sect-Component_Reference-Actions-richtreeSelectionChangeListener">
			<title><sgmltag>&lt;rich:treeSelectionChangeListener&gt;</sgmltag></title>
			<!--
			<note>
				<title>Documentation in development</title>
				<para>
					The documentation for this tag is still under development. Refer to the generated documentation mentioned in <xref linkend="chap-Component_Reference-Introduction" /> for reference details.
				</para>
			</note>
			-->
			<para>
				Use the <sgmltag>&lt;rich:treeSelectionChangeListener&gt;</sgmltag> tag to register a <classname>TreeSelectionChangeListener</classname> class on a parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component. The class provided as a listener must implement the <interfacename>org.richfaces.event.TreeSelectionChangeListener</interfacename> interface. The <methodname>processTreeSelectionChange</methodname> method accepts an <classname>org.richface.event.TreeSelectionChangeEvent</classname> event as a parameter.
			</para>
		</section>

		<!-- <rich:treeNode> -->
		<section id="sect-Component_Reference-Trees-richtreeNode">
			<title><sgmltag>&lt;rich:treeNode&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component is a child component of the <sgmltag>&lt;rich:tree&gt;</sgmltag> component. It represents nodes in the parent tree. The appearance and functionality of each tree node can be customized.
			</para>

			<section id="sect-Component_Reference-richtreeNode-Basic_usage">
				<title>Basic usage</title>
				<para>
					The <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component must be a child of a <sgmltag>&lt;rich:tree&gt;</sgmltag> component or a tree adaptor component. It does not need any attributes declared for basic usage, but can provide markup templates for tree nodes of particular types. Default markup is used if the tree node type is not specified. Refer to <xref linkend="exam-Component_Reference-richtree-Basic_usage" /> for an example of basic <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component usage.
				</para>
				<example id="exam-Component_Reference-richtreeNode-Basic_usage">
					<title>Basic usage</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeNode-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The example renders a simple tree of countries. Each country node expands to show state nodes for that country, and each state node expands to show city nodes for that state.
					</para>
				</example>
			</section>

			<section id="sect-Component_Reference-richtreeNode-Appearance">
				<title>Appearance</title>
				<para>
					Refer to <xref linkend="sect-Component_Reference-richtree-Appearance" /> for the <sgmltag>&lt;rich:tree&gt;</sgmltag> component for details and examples on styling nodes and icons. Icon styling for individual <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components uses the same attributes as the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component: <varname>iconLeaf</varname>, <varname>iconExpanded</varname>, and <varname>iconCollapsed</varname>. Icon-related attributes specified for child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components overwrite any global icon attributes of the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component.
				</para>
				<para>
					Use the <varname>rendered</varname> attribute to determine whether the node should actually be rendered in the tree or not. Using the <varname>rendered</varname> attribute in combination with the <sgmltag>&lt;rich:treeNode&gt;</sgmltag> <varname>type</varname> attribute can allow further style differentiation between node content.
				</para>
				<!--
				<example id="exam-Component_Reference-richtreeNode-rendered_attribute">
					<title><varname>rendered</varname> attribute</title>
					<para>
						The <varname>rendered</varname> attribute is used to differentiate between music albums that are in stock and those that are not. The item <varname>type</varname> attributes return values that are otherwise identical; only the <property>item.exist</property> property differs, so it is used for the <varname>rendered</varname> attribute.
					</para>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeNode-rendered_attribute.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/exam-Component_Reference-richtreeNode-rendered_attribute.png" format="PNG" />
						</imageobject>
					</mediaobject>
				</example>
				-->
			</section>

			<section id="sect-Component_Reference-richtreeNode-Interactivity">
				<title>Interactivity</title>
				<para>
					Interactivity with individual nodes, such as expanding, collapsing, and other event handling, can be managed by the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richtree-Expanding_and_collapsing_tree_nodes" /><!--, <xref linkend="sect-Component_Reference-richtree-Built-in_drag_and_drop" />,--> and <xref linkend="sect-Component_Reference-richtree-Event_handling" /> for further details.
				</para>
				<!-- TODO node interactivity re-definitions - not in M6 -->
				<para>
					Use the <varname>expanded</varname> attribute to determine whether the node is expanded or collapsed.
				</para>
			</section>
		
			<section id="sect-Component_Reference-richtreeNode-Reference_data">
				<title>Reference data</title>
				<itemizedlist>
					<listitem>
						<para>
							<parameter>component-type</parameter>: <classname>org.richfaces.TreeNode</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-class</parameter>: <classname>org.richfaces.component.UITreeNode</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-family</parameter>: <classname>org.richfaces.TreeNode</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>renderer-type</parameter>: <classname>org.richfaces.TreeNodeRenderer</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.TreeNodeHandler</classname>
						</para>
					</listitem>
				</itemizedlist>
			</section>

			<section id="sect-Component_Reference-richtreeNode-Style_classes_and_skin_parameters">
				<title>Style classes and skin parameters</title>
				<xi:include href="skinning/tabl-richtreeNode.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
			</section>

			<!-- <rich:treeToggleListener> -->
			<section id="sect-Component_Reference-Actions-richtreeToggleListener">
				<title><sgmltag>&lt;rich:treeToggleListener&gt;</sgmltag></title>
				<!--
				<note>
					<title>Documentation in development</title>
					<para>
						The documentation for this tag is still under development. Refer to the generated documentation mentioned in <xref linkend="chap-Component_Reference-Introduction" /> for reference details.
					</para>
				</note>
				-->
				<para>
					Use the <sgmltag>&lt;rich:treeToggleListener&gt;</sgmltag> tag to register a <classname>TreeToggleListener</classname> class on a parent <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component. The class provided as a listener must implement the <interfacename>org.richfaces.event.TreeToggleListener</interfacename> interface. The <methodname>processTreeToggle</methodname> method accepts an <classname>org.richface.event.TreeToggleEvent</classname> event as a parameter.
				</para>
			</section>
		</section>
	</section>

	<section id="sect-Component_Reference-Trees-Tree_adaptors">
		<title>Tree adaptors</title>
		<para>
			Use a tree adaptor to populate a tree model declaratively from a non-hierarchical model, such as a list or a map.
		</para>

		<section id="sect-Component_Reference-Tree_adaptors-richtreeModelAdaptor">
			<title><sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component takes an object which implements the <interfacename>Map</interfacename> or <interfacename>Iterable</interfacename> interfaces. It adds all the object entries to the parent node as child nodes.
			</para>

			<section id="sect-Component_Reference-richtreeModelAdaptor-Basic_usage">
				<title>Basic usage</title>
				<para>
					The <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component is added as a nested child component to a <sgmltag>&lt;rich:tree&gt;</sgmltag> component, or to another tree adaptor component.
				</para>
				<para>
					The <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component requires the <varname>nodes</varname> attribute for basic usage. The <varname>nodes</varname> attribute defines a collection of elements to iterate through for populating the nodes.
				</para>
				<para>
					Define the appearance of each node added by the adaptor with a child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-Trees-richtreeNode" /> for details on the <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component.
				</para>
			</section>

			<!-- TODO not in Final -->
			<!--
			<section id="sect-Component_Reference-richtreeModelAdaptor-Multiple_levels">
				<title>Multiple levels</title>
				<para>
					<sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> components can further be nested in other <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> components to subsequently populate lower levels of the tree.
				</para>
				<para>
					To access the current element at each iteration, use the <varname>var</varname> attribute of the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component. <xref linkend="exam-Component_Reference-richtreeModelAdaptor-Nested_richtreeModelAdaptor_components" /> demonstrates a series of nested <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> components, each using the parent's <varname>var</varname> attribute to reference the current element.
				</para>
				<example id="exam-Component_Reference-richtreeModelAdaptor-Nested_richtreeModelAdaptor_components">
					<title><sgmltag>Nested &lt;rich:treeModelAdaptor&gt; components</sgmltag></title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeModelAdaptor-Nested_richtreeModelAdaptor_components.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				</example>
				<para>
					Each <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component is mapped to a list of objects. During the iteration, the corresponding object properties are used to define the node labels and actions, and are in turn used for iterating through nested lists.
				</para>
			</section>
			-->

			<section id="sect-Component_Reference-richtreeModelAdaptor-Identifying_nodes">
			<title>Identifying nodes</title>
				<para>
					Adaptors that use <interfacename>Map</interfacename> interfaces or models with non-string keys require a row key converter in order to correctly identify nodes. Refer to <xref linkend="sect-Component_Reference-richtree-Identifying_nodes_with_the_rowKeyConverter_attribute" /> for details on the use of the <varname>rowKeyConverter</varname> attribute.
				</para>
				<para>
					Adaptors that use <interfacename>Iterable</interfacename> interfaces have simple integer row keys. A default converter is provided and does not need to be referenced explicitly.
				</para>
			</section>

			<section id="sect-Component_Reference-richtreeModelAdaptor-Reference_data">
				<title>Reference data</title>
				<itemizedlist>
					<listitem>
						<para>
							<parameter>component-type</parameter>: <classname>org.richfaces.treeModelAdaptor</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-class</parameter>: <classname>org.richfaces.component.UITreeModelAdaptor</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-family</parameter>: <classname>org.richfaces.TreeModelAdaptor</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.TreeModelAdaptorHandler</classname>
						</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>

		<section id="sect-Component_Reference-Tree_adaptors-richtreeModelRecursiveAdaptor">
			<title><sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag> component iterates through recursive collections in order to populate a tree with hierarchical nodes, such as for a file system with multiple levels of directories and files.
			</para>

			<section id="sect-Component_Reference-richtreeModelRecursiveAdaptor-Basic_usage">
				<title>Basic usage</title>
				<para>
					The <sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag> component is an extension of the <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component. As such, the <sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag> component uses all of the same attributes. Refer to <xref linkend="sect-Component_Reference-Tree_adaptors-richtreeModelAdaptor" /> for details on the <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component.
				</para>
				<para>
					In addition, the <sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag> component requires the <varname>roots</varname> attribute. The <varname>roots</varname> attribute defines the collection to use at the top of the recursion. For subsequent levels, the <varname>nodes</varname> attribute is used for the collection.
				</para>
				<para>
					<xref linkend="exam-Component_Reference-richtreeModelRecursiveAdaptor-Basic_usage" /> demonstrates how the <sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag> component can be used in conjunction with the <sgmltag>&lt;rich:treeModelAdaptor&gt;</sgmltag> component to recursively iterate through a file system and create a tree of directories and files.
				</para>
				<example id="exam-Component_Reference-richtreeModelRecursiveAdaptor-Basic_usage">
					<title>Basic usage</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeModelRecursiveAdaptor-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The <sgmltag>&lt;rich:treeModelRecursiveAdaptor&gt;</sgmltag> component references the <classname>FileSystemBean</classname> class as the source for the data.
					</para>
					<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeModelRecursiveAdaptor-FileSystemBean.java" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The <classname>FileSystemBean</classname> class in turn uses the <classname>FileSystemNode</classname> class to recursively iterate through the collection.
					</para>
					<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeModelRecursiveAdaptor-FileSystemNode.java" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The <function>getDirectories()</function> function is used recursively until the object has the collection of children. The model adaptor calls the <function>getFiles()</function> function at each level in order to add the file nodes.
					</para>
					<para>
						The resulting tree hierarchically lists the directories and files in the collection.
					</para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/exam-Component_Reference-richtreeModelRecursiveAdaptor-Basic_usage.png" format="PNG" />
						</imageobject>
						<textobject>
							<para>
								A hierarchical tree detailing a file system.
							</para>
						</textobject>
					</mediaobject>
				</example>
			</section>

			<section id="sect-Component_Reference-richtreeModelRecursiveAdaptor-Identifying_nodes">
			<title>Identifying nodes</title>
				<para>
					Adaptors that use <interfacename>Map</interfacename> interfaces or models with non-string keys require a row key converter in order to correctly identify nodes. Refer to <xref linkend="sect-Component_Reference-richtree-Identifying_nodes_with_the_rowKeyConverter_attribute" /> for details on the use of the <varname>rowKeyConverter</varname> attribute.
				</para>
				<para>
					Adaptors that use <interfacename>Iterable</interfacename> interfaces have simple integer row keys. A default converter is provided and does not need to be referenced explicitly.
				</para>
			</section>

			<section id="sect-Component_Reference-richtreeModelRecursiveAdaptor-Reference_data">
				<title>Reference data</title>
				<itemizedlist>
					<listitem>
						<para>
							<parameter>component-type</parameter>: <classname>org.richfaces.TreeModelRecursiveAdaptor</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-class</parameter>: <classname>org.richfaces.component.UITreeModelRecursiveAdaptor</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-family</parameter>: <classname>org.richfaces.TreeModelRecursiveAdaptor</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>handler-class</parameter>: <classname>org.richfaces.view.facelets.TreeModelRecursiveAdaptorHandler</classname>
						</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>
		
	</section>
	
</chapter>

