<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Trees">
	<title>Trees</title>
	<!--  In development notification  -->
	<important>
		<title>Documentation in development</title>
		<para>
			Some concepts covered in this chapter may refer to the previous version of <productname>Richfaces</productname>, version 3.3.3. This chapter is scheduled for review to ensure all information is up to date.
		</para>
	</important>
	<para>
		Read this chapter for details on components that use tree structures.
	</para>

	<!-- TODO not in M5 -->
	<!--
	<section id="sect-Component_Reference-Trees-richchangeExpandListener">
		<title><sgmltag>&lt;rich:changeExpandListener&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	
	<section id="sect-Component_Reference-Trees-richnodeSelectListener">
		<title><sgmltag>&lt;rich:nodeSelectListener&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	
	<section id="sect-Component_Reference-Trees-richrecursiveTreeNodesAdapter">
		<title><sgmltag>&lt;rich:recursiveTreeNodesAdapter&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	-->
	
	<section id="sect-Component_Reference-Trees-richtree">
		<title><sgmltag>&lt;rich:tree&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;rich:tree&gt;</sgmltag> component provides a hierarchical tree control. Each <sgmltag>&lt;rich:tree&gt;</sgmltag> component typically consists of <sgmltag>&lt;rich:treeNode&gt;</sgmltag> child components. The appearance and behavior of the tree and its nodes can be fully customized.
		</para>

		<section id="sect-Component_Reference-richtree-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;rich:tree&gt;</sgmltag> component requires the <varname>value</varname> attribute to point to the data model for populating the tree. The data model must be either an <interfacename>org.richfaces.model.TreeNode</interfacename> interface, an <varname>org.richfaces.model.TreeDataModel</varname> interface, or a <interfacename>javax.swing.tree.TreeNode</interfacename> interface. The <varname>var</varname> attribute declares the variable used for iterating through the data model, so that child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components can reference each iteration.
			</para>
			<para>
				For basic usage, the <sgmltag>&lt;rich:tree&gt;</sgmltag> component needs one or more <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components to work with the data model.
			</para>
			<example id="exam-Component_Reference-richtree-Basic_usage">
				<title>Basic usage</title>
				<para>
					This example demonstrates basic usage of the <sgmltag>&lt;rich:tree&gt;</sgmltag> component using an <interfacename>org.richfaces.model.TreeNode</interfacename> data model.
				</para>
				<para>
					The data model is constructed as follows:
				</para>
				<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Basic_usage.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The tree then accesses the nodes of the model using the <literal>station</literal> variable:
				</para>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Basic_usage.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/exam-Component_Reference-richtree-Basic_usage.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</example>
		</section>

		<section id="sect-Component_Reference-richtree-Appearance">
			<title>Appearance</title>
			<para>
				Different nodes in the tree can have different appearances, such as node icons, depending on the type of data the node contains. Use the <varname>nodeFace</varname> attribute to differentiate the types of nodes; the node is then rendered according to the <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component with the corresponding <varname>type</varname> attribute. <xref linkend="exam-Component_Reference-richtree-Appearance" /> shows a <sgmltag>&lt;rich:tree&gt;</sgmltag> component with three different child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components defined to represent three different node appearances. Refer to <xref linkend="sect-Component_Reference-richtreeNode-Appearance" /> for details on customizing the appearance of <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components.
			</para>
			<example id="exam-Component_Reference-richtree-nodeFace_attribute">
				<title><varname>nodeFace</varname> attribute</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-nodeFace_attribute.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/exam-Component_Reference-richtree-nodeFace_attribute.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</example>
			<para>
				Alternatively, use Expression Language (<acronym>EL</acronym>) with the <varname>nodeFace</varname> attribute, as shown in <xref linkend="exam-Component_Reference-richtree-nodeFace_attribute_with_Expression_Language" />.
			</para>
			<example id="exam-Component_Reference-richtree-nodeFace_attribute_with_Expression_Language">
				<title><varname>nodeface</varname> attribute with Expression Language</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-nodeFace_attribute_with_Expression_Language.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
			<para>
				If the <varname>nodeFace</varname> attribute returns null, the node is rendered as a "<emphasis>typeless</emphasis>" node. The <emphasis>typeless</emphasis> node is the first child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component with a valid <varname>rendered</varname> attribute, but without a defined <varname>type</varname> attribute.
			</para>
			<para>
				Icons for different nodes and node states can be defined for the whole tree using the following attributes:
			</para>
			<variablelist>
				<varlistentry>
					<term><varname>icon</varname></term>
					<listitem>
						<para>
							The <varname>icon</varname> attribute points to the icon to use for any node that contains child nodes.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><varname>iconLeaf</varname></term>
					<listitem>
						<para>
							The <varname>iconLeaf</varname> attribute points to the icon to use for any node that does not contain any child nodes.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><varname>iconExpanded</varname> and <varname>iconCollapsed</varname></term>
					<listitem>
						<para>
							The <varname>iconExpanded</varname> and <varname>iconCollapsed</varname> attributes point to the icons to use for expanded and collapsed nodes respectively. If these attributes are defined, the <varname>icon</varname> attribute is not used.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				Alternatively, use facets with the same names as the attributes to define the icons, as shown in <xref linkend="exam-Component_Reference-richtree-Icon_facets" />. The width of the rendered facet is 16 pixels.
			</para>
			<example id="exam-Component_Reference-richtree-Icon_facets">
				<title>Icon facets</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Icon_facets.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-richtree-Expanding_and_collapsing_tree_nodes">
			<title>Expanding and collapsing tree nodes</title>
			<para>
				The switching mode for performing submissions is determined by the <varname>switchType</varname> attribute, which can have one of the following three values:
			</para>
			<variablelist>
				<varlistentry>
					<term><literal>ajax</literal></term>
					<listitem>
						<para>
							This is the default setting. The <sgmltag>&lt;rich:tree&gt;</sgmltag> component performs an Ajax form submission, and only the content of the tree is rendered.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>server</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:tree&gt;</sgmltag> component performs a common submission, completely re-rendering the page.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>client</literal></term>
					<listitem>
						<para>
							The <sgmltag>&lt;rich:tree&gt;</sgmltag> component updates on the client side, re-rendering itself and any additional components listed with the <varname>render</varname> attribute.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>

			<section id="sect-Component_Reference-richtree-Identifying_nodes">
				<title>Identifying nodes</title>
				<para>
					The <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses a data model to represent the node structure on the page. To identify a particular node during a client request, the model provides unique keys for tree nodes. The <sgmltag>&lt;rich:tree&gt;</sgmltag> component can use strings as key values. These strings may contain special characters that are not allowed by browsers, such as the left angle bracket (&lt;) and ampersand (&amp;). To allow these characters in the keys, the following converter is provided:
				</para>
				<variablelist>
					<varlistentry>
						<term><classname>org.richfaces.TreeRowKeyConverter</classname></term>
						<listitem>
							<para>
								The <classname>org.richfaces.TreeRowKeyConverter</classname> converter is used for trees constructed using <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components. The key should be of the type <type>java.lang.String</type>.
							</para>
						</listitem>
					</varlistentry>
					<!-- TODO not in M5
					<varlistentry>
						<term><classname>org.richfaces.TreeAdaptorRowKeyConverter</classname></term>
						<listitem>
							<para>
								The <classname>org.richfaces.TreeAdaptorRowKeyConverter</classname> converter is used for trees constructed using <sgmltag>&lt;rich:treeNodesAdaptor&gt;</sgmltag> components. The key should be of the type <type>java.lang.String</type>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><classname>org.richfaces.TreeAdaptorIntegerRowKeyConverter</classname></term>
						<listitem>
							<para>
								The <classname>org.richfaces.TreeAdaptorIntegerRowKeyConverter</classname> converter is used for trees constructed using <sgmltag>&lt;rich:treeNodesAdaptor&gt;</sgmltag> components, but uses a numerical key. The key should be of the type <type>java.lang.Integer</type>.
							</para>
						</listitem>
					</varlistentry>
					-->
				</variablelist>
				<para>
					To apply a converter to the <sgmltag>&lt;rich:tree&gt;</sgmltag> component, define it with the <varname>rowKeyConverter</varname> attribute. <xref linkend="exam-Component_Reference-richtree-Identifying_nodes" /> demonstrates the use of a converter to identify tree nodes.
				</para>
				<example id="exam-Component_Reference-richtree-Identifying_nodes">
					<title>Identifying nodes</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Identifying_nodes.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The tree uses the following data model. The model can contain special characters normally disallowed in web page code.
					</para>
					<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Component_Reference-richtree-Identifying_nodes.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				</example>
			</section>
		</section>

		<!-- TODO not in M5 -->
		<!--
		<section id="sect-Component_Reference-richtree-Built-in_drag_and_drop">
			<title>Built-in drag and drop</title>
			<para>
				
			</para>
		</section>
		-->

		<section id="sect-Component_Reference-richtree-Event_handling">
			<title>Event handling</title>
			<para>
				In addition to the standard Ajax events and HMTL events, the <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses the following client-side events:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>onexpand</varname> event is triggered when a node is expanded.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>oncollapse</varname> event is triggered when a node is collapsed.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>ondragstart</varname> event is triggered when an element starts being dragged.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>ondragexit</varname> event is triggered when an element is dragged out of the tree.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>ondragenter</varname> event is triggered when an element is dragged into the tree.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>ondragend</varname> event is triggered when an element is dropped.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				The <sgmltag>&lt;rich:tree&gt;</sgmltag> component uses the following server-side listeners:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>changeExpandListener</varname> listener processes expand and collapse events.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>dragListener</varname> listener processes drag events.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>dropListener</varname> listener processes drop events.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>nodeSelectListener</varname> listener processes the request when a node is selected.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-richtree-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.richfaces.tree</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.richfaces.component.html.Htmltree</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.richfaces.tree</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.richfaces.treeRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.treeTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	
		<section id="sect-Component_Reference-Trees-richtreeNode">
			<title><sgmltag>&lt;rich:treeNode&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component is a child component of the <sgmltag>&lt;rich:tree&gt;</sgmltag> component. It represents nodes in the parent tree. The appearance and functionality of each tree node can be customized.
			</para>

			<section id="sect-Component_Reference-richtreeNode-Basic_usage">
				<title>Basic usage</title>
				<para>
					The <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component must be a child of a <sgmltag>&lt;rich:tree&gt;</sgmltag> component. It does not need any attributes declared for basic usage, but should contain the content of the nodes. Refer to <xref linkend="exam-Component_Reference-richtree-Basic_usage" /> for an example of basic <sgmltag>&lt;rich:treeNode&gt;</sgmltag> component usage.
				</para>
			</section>

			<section id="sect-Component_Reference-richtreeNode-Appearance">
				<title>Appearance</title>
				<para>
					Refer to <xref linkend="sect-Component_Reference-richtree-Appearance" /> for the <sgmltag>&lt;rich:tree&gt;</sgmltag> component for details and examples on styling nodes and icons. Icon styling for individual <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components uses the same attributes as the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component: <varname>icon</varname>, <varname>iconLeaf</varname>, <varname>iconExpanded</varname>, and <varname>iconCollapsed</varname>. Icon-related attributes specified for child <sgmltag>&lt;rich:treeNode&gt;</sgmltag> components overwrite any global icon attributes of the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component.
				</para>
				<para>
					Use the <varname>rendered</varname> attribute to determine whether the node should actually be rendered in the tree or not. Using the <varname>rendered</varname> attribute in combination with the <sgmltag>&lt;rich:treeNode&gt;</sgmltag> <varname>type</varname> attribute can allow further style differentiation between node content, as shown in <xref linkend="exam-Component_Reference-richtreeNode-rendered_attribute" />.
				</para>
				<example id="exam-Component_Reference-richtreeNode-rendered_attribute">
					<title>rendered attribute</title>
					<para>
						The <varname>rendered</varname> attribute is used to differentiate between music albums that are in stock and those that are not. The item <varname>type</varname> attributes return values that are otherwise identical; only the <property>item.exist</property> property differs, so it is used for the <varname>rendered</varname> attribute.
					</para>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-richtreeNode-rendered_attribute.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/exam-Component_Reference-richtreeNode-rendered_attribute.png" format="PNG" />
						</imageobject>
					</mediaobject>
				</example>
			</section>

			<section id="sect-Component_Reference-richtreeNode-Interactivity">
				<title>Interactivity</title>
				<para>
					All interactivity with individual nodes, such as expanding and collapsing, drag-and-drop, and other events handling, is managed by the parent <sgmltag>&lt;rich:tree&gt;</sgmltag> component. Refer to <xref linkend="sect-Component_Reference-richtree-Expanding_and_collapsing_tree_nodes" /><!--, <xref linkend="sect-Component_Reference-richtree-Built-in_drag_and_drop" />,--> and <xref linkend="sect-Component_Reference-richtree-Event_handling" /> for further details.
				</para>
			</section>
		
			<section id="sect-Component_Reference-richtreeNode-Reference_data">
				<title>Reference data</title>
				<itemizedlist>
					<listitem>
						<para>
							<parameter>component-type</parameter>: <classname>org.richfaces.treeNode</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-class</parameter>: <classname>org.richfaces.component.html.HtmltreeNode</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-family</parameter>: <classname>org.richfaces.treeNode</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>renderer-type</parameter>: <classname>org.richfaces.treeNodeRenderer</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>tag-class</parameter>: <classname>org.richfaces.taglib.treeNodeTag</classname>
						</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>
	</section>

	<!--
	<section id="sect-Component_Reference-Trees-richtreeNodesAdapter">
		<title><sgmltag>&lt;rich:treeNodesAdapter&gt;</sgmltag></title>
		<para>
			Incomplete
		</para>
	</section>
	-->
	
</chapter>

