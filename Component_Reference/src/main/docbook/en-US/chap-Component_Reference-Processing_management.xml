<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Processing_management">
	<title>Processing management</title>
	<para>
		This chapter covers those components that manage the processing of information, requests, and updates.
	</para>
	<section id="sect-Component_Reference-Processing_management-a4jqueue">
		<title><sgmltag>&lt;a4j:queue&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:queue&gt;</sgmltag> component manages the JSF queue of Ajax requests. It provides additional options for a finer control of request processing.
		</para>

		<section id="sect-Component_Reference-a4jqueue-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:queue&gt;</sgmltag> component works in the same basic way as the standard JSF queue. It can be enabled and disabled through the <varname>enabled</varname> attribute.
			</para>

			<note>
				<title>Requests from other libraries</title>
				<para>
					The <sgmltag>&lt;a4j:queue&gt;</sgmltag> component does not handle standard JSF requests or requests from component libraries other than RichFaces.
				</para>
			</note>
		</section>

		<section id="sect-Component_Reference-a4jqueue-Delaying_requests">
			<title>Delaying requests</title>
			<para>
				Use the <varname>requestDelay</varname> attribute to add a delay between each request in the queue. Set the <varname>requestDelay</varname> attribute to the number of milliseconds to wait in between each request. Delaying requests avoids unnecessary processing for actions that would otherwise cause multiple requests, such as typing. Similar requests in the queue are combined while waiting for the request delay.
			</para>
			<example id="exam-Component_Reference-a4jqueue-Delaying_requests">
				<title>Delaying requests</title>
				<programlisting language="XML" role="XML">&lt;a4j:queue requestDelay="1500"/&gt;</programlisting>
				<para>
					The queue delays each request by 1500 milliseconds.
				</para>
			</example>
		</section>

		<section id="sect-Component_Reference-a4jqueue-Duplicate_responses">
			<title>Duplicate responses</title>
			<para>
				The client side can update unnecessarily if duplicate responses require similar updates. Set <code>ignoreDupResponses="true"</code> to ignore duplicate responses. With this setting, the client will not update from a request if a similar request is in the queue.
			</para>
		</section>

		<section id="sect-Component_Reference-a4jqueue-Queue_scopes">
			<title>Queue scopes</title>
			<para>
				Define the queue scope to make it the default queue for all requests in that scope. The scope depends on the placement of the queue and any naming identifiers.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						An unnamed <sgmltag>&lt;a4j:queue&gt;</sgmltag> component placed outside any forms becomes the default queue for all requests on the page.
					</para>
				</listitem>
				<listitem>
					<para>
						An unnamed <sgmltag>&lt;a4j:queue&gt;</sgmltag> component placed inside a form becomes the default queue for all requests within that form.
					</para>
				</listitem>
				<listitem>
					<para>
						Use the <varname>name</varname> identifier attribute to name an <sgmltag>&lt;a4j:queue&gt;</sgmltag> component. Named queues can be accessed with the <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior to act as a queue for specific components and behaviors. Refer to <xref linkend="sect-Component_Reference-Processing_management-a4jattachQueue" /> for details.
					</para>
				</listitem>
			</itemizedlist>
			<example id="exam-Component_Reference-a4jqueue-Queue_scopes">
				<title>Queue scopes</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jqueue-Queue_scopes.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<para>
					The queue outside the form is scoped to the view. The queue inside the form is scoped only to that form.
				</para>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jqueue-a4jqueue_client-side_events">
			<title><sgmltag>&lt;a4j:queue&gt;</sgmltag> client-side events</title>
			<para>
				The <sgmltag>&lt;a4j:queue&gt;</sgmltag> component features several events relating to queuing actions in addition to the common JSF events:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>complete</varname> event is fired after a request is completed. The request object is passed as a parameter to the event handler, so the queue is accessible using <code>request.queue</code> and the element which was the source of the request is accessible using <literal>this</literal>.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>requestqueue</varname> event is fired after a new request has been added to the queue.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>requestdequeue</varname> event is fired after a request has been removed from the queue.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		
		<section id="sect-Component_Reference-a4jqueue-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.QueueRenderer</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.HtmlQueue</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.ajax4jsf.Queue</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>tag-class</parameter>: <classname>org.ajax4jsf.taglib.html.jsp.QueueTag</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-Processing_management-a4jattachQueue">
			<title><sgmltag>&lt;a4j:attachQueue&gt;</sgmltag></title>
			<para>
				The <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior is used together with a <sgmltag>&lt;a4j:queue&gt;</sgmltag> component to further customize queuing for particular components and behaviors. The <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior can override the scope-wide queue settings for an individual component, or attach specific requests to a queue.
			</para>

			<section id="sect-Component_Reference-a4jattachQueue-Overriding_scope_settings">
				<title>Overriding scope settings</title>
				<para>
					Queues can be scoped to various levels as described in <xref linkend="sect-Component_Reference-a4jqueue-Queue_scopes" />. Use an <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior in the same scope as a queue to override the queue settings for a particular control.
				</para>
				<example id="exam-Component_Reference-a4jattachQueue-Overriding_scope_settings">
					<title>Overriding scope settings</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jattachQueue-Overriding_scope_settings.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The request delay is overridden by the <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior on the submit button.
					</para>
				</example>
			</section>

			<section id="sect-Component_Reference-a4jattachQueue-Using_a_named_queue">
				<title>Using a named queue</title>
				<para>
					Name an <sgmltag>&lt;a4j:queue&gt;</sgmltag> component using the <varname>name</varname> attribute. It can then be used by specific components through the <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior. Use the <varname>name</varname> attribute of the <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behavior to identify the name of the destination queue.
				</para>
				<example id="exam-Component_Reference-a4jattachQueue-Using_a_named_queue">
					<title>Using a named queue</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jattachQueue-Using_a_named_queue.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						The requests from the button are attached to the <literal>viewQueue</literal> queue, rather than the <literal>formQueue</literal> queue.
					</para>
				</example>
			</section>

			<section id="sect-Component_Reference-a4jattachQueue-Grouping_requests">
				<title>Grouping requests</title>
				<para>
					Use grouping to process multiple requests together. Specify a grouping identifier with the <varname>requestGroupingId</varname> attribute. Requests from multiple <sgmltag>&lt;a4j:attachQueue&gt;</sgmltag> behaviors can use the same identifier to group requests together.
				</para>
				<example id="exam-Component_Reference-a4jattachQueue-Grouping_requests">
					<title>Grouping requests</title>
					<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jattachQueue-Grouping_requests.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
					<para>
						Requests from both the text input boxes are grouped together with the <literal>registrationForm</literal> identifier.
					</para>
				</example>
			</section>
		
			<section id="sect-Component_Reference-a4jattachQueue-Reference_data">
				<title>Reference data</title>
				<itemizedlist>
					<listitem>
						<para>
							<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.AttachQueueRenderer</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.HtmlAttachQueue</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>component-family</parameter>: <classname>org.ajax4jsf.AttachQueue</classname>
						</para>
					</listitem>
					<listitem>
						<para>
							<parameter>tag-class</parameter>: <classname>org.ajax4jsf.taglib.html.jsp.AttachQueueTag</classname>
						</para>
					</listitem>
				</itemizedlist>
			</section>
		</section>
		
	</section>
	
	<section id="sect-Component_Reference-Processing_management-a4jlog">
		<title><sgmltag>&lt;a4j:log&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:log&gt;</sgmltag> component generates JavaScript that opens a debug window, logging application information such as requests, responses, and <acronym>DOM</acronym> changes.
		</para>

		<section id="sect-Component_Reference-a4jlog-Basic_usage">
			<title>Basic usage</title>
			<para>
				The <sgmltag>&lt;a4j:log&gt;</sgmltag> component doesn't require any additional attributes for basic functionality.
			</para>
		</section>
		
		<section id="sect-Component_Reference-a4jlog-Log_monitoring">
			<title>Log monitoring</title>
			<para>
				The <varname>mode</varname> attribute determines how the log appears on the page.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Set <code>mode="inline"</code> to place the logging data in-line on the current page. This is the default setting.
					</para>
				</listitem>
				<listitem>
					<para>
						Set <code>mode="popup"</code> to present the logging data in a new pop-up window. The window is set to be opened by pressing the key combination <keycombo action="simul"><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>L</keycap></keycombo>; this can be partially reconfigured with the <varname>hotkey</varname> attribute, which specifies the letter key to use in combination with <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap></keycombo> instead of <keycap>L</keycap>.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				The amount of data logged can be determined with the <varname>level</varname> attribute:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						Set <code>level="ERROR"</code> to log all errors.
					</para>
				</listitem>
				<listitem>
					<para>
						Set <code>level="FATAL"</code> to log only fatal messages.
					</para>
				</listitem>
				<listitem>
					<para>
						Set <code>level="INFO"</code> to log only informational messages.
					</para>
				</listitem>
				<listitem>
					<para>
						Set <code>level="WARN"</code> to log only warning messages.
					</para>
				</listitem>
				<listitem>
					<para>
						Set <code>level="ALL"</code> to log all data. This is the default setting.
					</para>
				</listitem>
			</itemizedlist>
			<example id="exam-Component_Reference-a4jlog-a4jlog_example">
				<title><sgmltag>&lt;a4j:log&gt;</sgmltag> example</title>
				<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/exam-Component_Reference-a4jlog-a4jlog_example.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/figu-Component_Reference-a4jlog-a4jlog_example.png" format="PNG" />
					</imageobject>
					<textobject>
						<para>
							The log readout displays all messages.
						</para>
					</textobject>
				</mediaobject>
			</example>
			<note>
				<title>Log renewal</title>
				<para>
					The log is automatically renewed after each Ajax request. It does not need to be explicitly re-rendered. To clear previous requests, implement a <guilabel>Clear</guilabel> button or similar functionality.
				</para>
			</note>
		</section>
		
		<section id="sect-Component_Reference-a4jlog-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.ajax4jsf.Log</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.AjaxLog</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>org.ajax4jsf.Log</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.LogRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Component_Reference-a4jlog-Style_classes_and_skin_parameters">
			<title>Style classes and skin parameters</title>
			<para>
				The <sgmltag>&lt;a4j:log&gt;</sgmltag> component is intended primarily for debugging during development. However it is still possible to style the component if desired.
			</para>
			<xi:include href="skinning/tabl-a4jlog.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		</section>
	</section>
	
	<section id="sect-Component_Reference-Processing_management-a4jstatus">
		<title><sgmltag>&lt;a4j:status&gt;</sgmltag></title>
		<para>
			The <sgmltag>&lt;a4j:status&gt;</sgmltag> component displays the status of current Ajax requests. The status can be either in progress, complete, or an error is shown after a failed request.
		</para>
		
		<section id="sect-Component_Reference-a4jstatus-Customizing_the_text">
			<title>Customizing the text</title>
			<para>
				The text display can be customized depending on the current status.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <varname>startText</varname> attribute defines the text shown after the request has been started and is currently in progress. Set the styles for the text with the <varname>startStyle</varname> and <varname>startStyleClass</varname> attributes. Alternatively, use the <literal>start</literal> facet to customize the text appearance.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>stopText</varname> attribute defines the text shown once the request is complete. Set the styles for the text with the <varname>stopStyle</varname> and <varname>stopStyleClass</varname> attributes. Alternatively, use the <literal>stop</literal> facet to customize the text appearance.
					</para>
					<para>
						If the <varname>stopText</varname> attribute is not defined, and no facet exists for the stopped state, the complete status is simply not shown. In this way, only the progress of the request is displayed to the user, along with any errors.
					</para>
				</listitem>
				<listitem>
					<para>
						The <varname>errorText</varname> attribute defines the text shown when an error has occurred. Set the styles for the text with the <varname>errorStyle</varname> and <varname>errorStyleClass</varname> attributes. Alternatively, use the <literal>error</literal> facet to customize the text appearance.
					</para>
				</listitem>
			</itemizedlist>
			<example id="exam-Component_Reference-a4jstatus-Basic_a4jstatus_usage">
				<title>Basic <sgmltag>&lt;a4j:status&gt;</sgmltag> usage</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jstatus-Basic_a4jstatus_usage.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jstatus-Specifying_a_region">
			<title>Specifying a region</title>
			<para>
				The <sgmltag>&lt;a4j:status&gt;</sgmltag> component monitors the status of the region relevant to where it is placed.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						If unnamed and placed outside any forms, it monitors the status at the view level.
					</para>
				</listitem>
				<listitem>
					<para>
						If unnamed and placed inside a form, it monitors the status at the form level.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				However, if identified with the <varname>name</varname> attribute, the <sgmltag>&lt;a4j:status&gt;</sgmltag> component can monitor any Ajax component or behavior. Use the <varname>status</varname> attribute on the Ajax component or behavior to reference the <varname>name</varname> identifier of the <sgmltag>&lt;a4j:status&gt;</sgmltag> component.
			</para>
			<example id="exam-Component_Reference-a4jstatus-Updating_a_referenced_a4jstatus_component">
				<title>Updating a referenced <sgmltag>&lt;a4j:status&gt;</sgmltag> component</title>
				<programlisting language="XML" role="XML"><xi:include href="extras/exam-Component_Reference-a4jstatus-Updating_a_referenced_a4jstatus_component.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</example>
		</section>
		
		<section id="sect-Component_Reference-a4jstatus-JavaScript_API">
		   <title>JavaScript API</title>
		   <para>
		      The <sgmltag>&lt;a4j:status&gt;</sgmltag> component can be controlled through the JavaScript API. The JavaScript API provides the following functions:
		   </para>
		   <variablelist>
		      <varlistentry>
		         <term><function>start()</function></term>
		         <listitem>
		            <para>
		               Switches status to the <literal>start</literal> state.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>stop()</function></term>
		         <listitem>
		            <para>
		               Switches status to the <literal>stop</literal> state.
		            </para>
		         </listitem>
		      </varlistentry>
		      <varlistentry>
		         <term><function>error()</function></term>
		         <listitem>
		            <para>
		               Switches status to the <literal>error</literal> state.
		            </para>
		         </listitem>
		      </varlistentry>
		   </variablelist>
		</section>
		
		<section id="sect-Component_Reference-a4jstatus-Reference_data">
			<title>Reference data</title>
			<itemizedlist>
				<listitem>
					<para>
						<parameter>component-type</parameter>: <classname>org.ajax4jsf.Status</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-class</parameter>: <classname>org.ajax4jsf.component.html.HtmlAjaxStatus</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>component-family</parameter>: <classname>javax.faces.Panel</classname>
					</para>
				</listitem>
				<listitem>
					<para>
						<parameter>renderer-type</parameter>: <classname>org.ajax4jsf.components.AjaxStatusRenderer</classname>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>

</chapter>

