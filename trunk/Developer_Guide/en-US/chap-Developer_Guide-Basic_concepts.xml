<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Developer_Guide-Basic_concepts">
	<title>Basic concepts</title>
	<para>
		Read this chapter for the basic concepts of using RichFaces in conjunction with Ajax and JavaServer Faces.
	</para>
	<section id="sect-Developer_Guide-Basic_concepts-Sending_an_Ajax_request">
		<title>Sending an Ajax request</title>
		<para>
			Many of the tags in the <classname>a4j</classname> and <classname>rich</classname> tag libraries are capable of sending Ajax requests from a JavaServer Faces (JSF) page. RichFaces tags hide the usual JavaScript activities that are required for an XMHTTPRequest object building and an Ajax request sending. Additionally the tags can determine which components of a JSF page are to be re-rendered as a result of the Ajax response; refer to <xref linkend="sect-Developer_Guide-Basic_concepts-Partial_page_updates" /> for details.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> and <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> tags are used to send an Ajax request on the <varname>onclick</varname> JavaScript event.
				</para>
			</listitem>
			<listitem>
				<para>
					The <sgmltag>&lt;a4j:poll&gt;</sgmltag> tag is used to send an Ajax request periodically using a timer.
				</para>
			</listitem>
			<listitem>
				<para>
					The <sgmltag>&lt;a4j:support&gt;</sgmltag> tag allows you to add Ajax functionality to standard JSF components and send Ajax request on a chosen JavaScript event, such as <varname>onkeyup</varname> or <varname>onmouseover</varname>, for example.
				</para>
			</listitem>
			<listitem>
				<para>
					Most components in the <classname>rich</classname> tag library have built-in Ajax support. Refer to the <citetitle>RichFaces Component Reference</citetitle> for details on the use of each component.
				</para>
			</listitem>
		</itemizedlist>

	</section>
	
	<section id="sect-Developer_Guide-Basic_concepts-Receiving_events_and_updates">
		<title>Receiving events and updates</title>
		<para>
			If no specific regions are specified, the whole page is updated when an Ajax response is received.
		</para>
		<note>
			<title>Rendering outside the active region</title>
			<para>
				If the content of an Ajax response needs to be rendered outside the active region, then the value of the <varname>renderRegionOnly</varname> attribute should be set to <literal>false</literal>. Otherwise, your Ajax updates are limited to elements of the active region. If not defined, the default setting is <code>renderRegionOnly="false"</code>.
			</para>
		</note>
		
		<section id="sect-Developer_Guide-Basic_concepts-Partial_page_updates">
			<title>Partial page updates</title>
			<para>
				Specific regions of a page can be defined through the use of container components such as <sgmltag>&lt;a4j:region&gt;</sgmltag>. These regions can then be specified with their <varname>id</varname> identifiers in the <varname>render</varname> attribute of a component so that when the component sends an Ajax request, only the specified regions are updated. In this way you can control which part of the JSF View is decoded on the server side when the Ajax request is sent. Multiple regions can be defined and sent, and regions can be nested inside other regions.
			</para>
			<para>
				Additionally, regions can be wrapped with the <sgmltag>&lt;a4j:outputPanel ajaxRendered="true"&gt;</sgmltag> tag. This causes all contents of the region to be updated on every Ajax response, even if not explicitly listed in the requesting component's <varname>render</varname> attribute.
			</para>
			<para>
				Setting the <varname>limitRender</varname> attribute to <literal>true</literal> will cause <emphasis>only</emphasis> those regions listed in the requesting component's <varname>render</varname> attribute to be updated. This overrides any regions with the <sgmltag>&lt;a4j:outputPanel ajaxRendered="true"&gt;</sgmltag> tag.
			</para>
			<para>
				Refer to the <citetitle>RichFaces Component Reference</citetitle> for further details on the common Ajax attributes used for partial page updates.
			</para>
		</section>
		
	</section>
	
	<section id="sect-Developer_Guide-Basic_concepts-Processing_data_on_the_server">
		<title>Processing data on the server</title>
		<para>
			Use the <varname>process</varname> attribute to list the <varname>id</varname> identifiers of components that need to be processed together with a requesting component. This can be useful if more than one component needs to be processed, but not the entire view. Alternatively if only one component needs to be processed instead of the entire view, <code>process="@this"</code> can be specified.
		</para>
	</section>
	
	<section id="sect-Developer_Guide-Basic_concepts-Component_overview">
		<title>Component overview</title>
		<para>
			The RichFaces framework is made up of two tag libraries: the <classname>a4j</classname> library and the <classname>rich</classname> library. The <classname>a4j</classname> tag library represents <emphasis>Ajax4jsf</emphasis>, which provides page-level Ajax support with core Ajax components. This allows developers to make use of custom Ajax behavior with existing components. The <classname>rich</classname> tag library provides Ajax support at the component level instead, and includes ready-made, self-contained components. These components don't require additional configuration in order to send requests or update.
		</para>
		<para>
			For details on the use of the various components, refer to <citetitle>RichFaces Component Reference</citetitle>.
		</para>
	</section>

</chapter>

