<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Component_Reference.ent">
%BOOK_ENTITIES;
]>

<chapter id="chap-Component_Reference-Actions">
	<title>Actions</title>
	<para>
		This chapter details the basic components that respond to a user action and submit an Ajax request.
	</para>
	<section id="sect-Component_Reference-Actions-a4jactionParam">
		<title>a4j:actionParam</title>
		<para>
			The <sgmltag>&lt;a4j:actionParam&gt;</sgmltag> behavior combines the functionality of the JavaServer Faces (<acronym>JSF</acronym>) components <sgmltag>&lt;f:param&gt;</sgmltag> and <sgmltag>&lt;f:actionListener&gt;</sgmltag>.
		</para>
		<para>
			Basic usage of the <sgmltag>&lt;a4j:actionParam&gt;</sgmltag> requires three main attributes:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<varname>name</varname>, for the name of the parameter;
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>value</varname>, for the initial value of the parameter; and
				</para>
			</listitem>
			<listitem>
				<para>
					<varname>assignTo</varname>, for defining the bean property. The property will be updated if the parent command component performs an action event during the <emphasis>Process Request</emphasis> phase.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			<xref linkend="exam-Component_Reference-a4jactionParam-a4jactionParam_example" /> shows a simple implementation along with the accompanying managed bean. When the <guibutton>Set name to Alex</guibutton> button is pressed, the application sets the <varname>name</varname> parameter of the bean to <literal>Alex</literal>, and displays the name in the output field.
		</para>
		<example id="exam-Component_Reference-a4jactionParam-a4jactionParam_example">
			<title>&lt;a4j:actionParam&gt; example</title>
<programlisting language="XML" role="XML">
<xi:include parse="text" href="extras/exam-Component_Reference-a4jactionParam-a4jactionParam_example.xmlt" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
<programlisting language="Java" role="JAVA">
<xi:include parse="text" href="extras/exam-Component_Reference-a4jactionParam-a4jactionParam_example.js" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		</example>
		<para>
			The <sgmltag>&lt;a4j:actionParam&gt;</sgmltag> behavior can be used with non-Ajax components in addition to Ajax components. In this way, data model values can be updated without an JavaScript code on the server side.
		</para>
		<para>
			The <varname>converter</varname> attribute can be used to specify how to convert the value before it is submitted to the data model. The property is assigned the new value during the <emphasis>Update Model</emphasis> phase.
		</para>
		<note>
			<title>Note</title>
			<para>
				If the validation of the form fails the <emphasis>Update Model</emphasis> phase will be skipped and the property will not be updated.
			</para>
		</note>
		<para>
			Variables from JavaScript functions can be used for the <varname>value</varname> attribute. In such an implementation, the <varname>noEscape</varname> attribute should be set to <literal>true</literal>. Using <code>noEscape="true"</code>, the <varname>value</varname> attribute can contain any JavaScript expression or JavaScript function invocation, and the result will be sent to the server as the <varname>value</varname> attribute.
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jajax">
		<title>a4j:ajax</title>
		<para>
			The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> component allows Ajax capability to be added to any non-Ajax component. It is placed as a direct child to the component that requires Ajax support. The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> component uses the common attributes listed in <xref linkend="chap-Component_Reference-Common_Ajax_attributes" />.
		</para>
		<note>
			<title>Note</title>
			<para>
				When attaching the <sgmltag>&lt;a4j:ajax&gt;</sgmltag> component to non-Ajax JavaServer Faces command components, such as <sgmltag>&lt;h:commandButton&gt;</sgmltag> and <sgmltag>&lt;h:commandLink&gt;</sgmltag>, it is important to set <code>disabledDefault="true"</code>. If this attribute is not set, a non-Ajax request is sent after the Ajax request and the page is refreshed unexpectedly.
			</para>
		</note>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jajaxListener">
		<title>a4j:ajaxListener</title>
		<para>
			The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component adds an action listener to a parent component. It works similar to the JavaServer Faces <sgmltag>&lt;f:actionListener&gt;</sgmltag> or <sgmltag>&lt;f:valueChangeListener&gt;</sgmltag> components, except that the invocation of <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> is not canceled if validation of the <emphasis>Update Model</emphasis> phase fails. The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component is guaranteed to be invoked with each Ajax response.
		</para>
		<para>
			Baasic usage requires only the <varname>type</varname> attribute, which defines the fully-qualified Java class name for the listener. This Java class should implement the <classname>org.ajax4jsf.event.AjaxListener</classname> interface, which is a base listener for all listeners and is capable of receiving Ajax events. The object from which the event originated could be accessed using the <methodname>java.util.EventObject.getSource()</methodname> method.
		</para>
		<para>
			The <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> component is not invoked for non-Ajax requests, or when the RichFaces works in the <emphasis>Ajax request generates non-Ajax response</emphasis> mode, so the <sgmltag>&lt;a4j:ajaxListener&gt;</sgmltag> invocation is a good indicator that an Ajax response is going to be processed.
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jcommandButton">
		<title>&lt;a4j:commandButton&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.CommandButton</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>javax.faces.Command</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.HtmlAjaxCommandButton</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					renderer-type: <classname>org.ajax4jsf.components.AjaxCommandButtonRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> is similar to the JavaServer Faces (<acronym>JSF</acronym>) component <sgmltag>&lt;h:commandButton&gt;</sgmltag>, but additionally includes Ajax support. When the command button is clicked it generates an Ajax form submit, and when a response is received the command button can be dynamically rendered.
		</para>
		<para>
			The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> requires only the <varname>value</varname> and <varname>render</varname> attributes to function. The <varname>value</varname> attribute specifies the text of the button and the <varname>render</varname> attribute specifies which areas are to be updated. The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> uses the <varname>onclick</varname> event instead of the <varname>onsubmit</varname> event, but otherwise uses all common Ajax attributes as listed in <xref linkend="chap-Component_Reference-Common_Ajax_attributes" />.
		</para>
		<note>
			<title>Note</title>
			<para>
				When attaching a JavaScript function to a <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> with the help of a <sgmltag>&lt;rich:componentControl&gt;</sgmltag>, do not use the <varname>attachTo</varname> attribute of <sgmltag>&lt;rich:componentControl&gt;</sgmltag>. The attribute adds event handlers using <classname>Event.observe</classname> but <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> does not include this event.
			</para>
		</note>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jcommandLink">
		<title>&lt;a4j:commandLink&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.CommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>javax.faces.Command</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.HtmlAjaxCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					renderer-type: <classname>org.ajax4jsf.components.AjaxCommandLinkRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> is similar to the JavaServer Faces (<acronym>JSF</acronym>) component <sgmltag>&lt;h:commandLink&gt;</sgmltag>, but additionally includes Ajax support. When the command link is clicked it generates an Ajax form submit, and when a response is received the command link can be dynamically rendered.
		</para>
		<para>
			The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> requires only the <varname>value</varname> and <varname>render</varname> attributes to function. The <varname>value</varname> attribute specifies the text of the link and the <varname>render</varname> attribute specifies which areas are to be updated. The <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> uses the <varname>onclick</varname> event instead of the <varname>onsubmit</varname> event, but otherwise uses all common Ajax attributes as listed in <xref linkend="chap-Component_Reference-Common_Ajax_attributes" />.
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jhtmlCommandLink">
		<title>&lt;a4j:htmlCommandLink&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.HtmlCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>javax.faces.Command</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.HtmlCommandLink</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					renderer-type: <classname>org.ajax4jsf.HtmlCommandLinkRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			Incomplete
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jjsFunction">
		<title>&lt;a4j:jsFunction&gt;</title>
		<para>
			The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component allows Ajax requests to be performed directly from JavaScript code, and server-side data to be invoked and returned in JavaScript Object Notation (<acronym>JSON</acronym>) format to use in client-side JavaScript calls.
		</para>
		<para>
			The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component has all the common Ajax action attributes as listed in <xref linkend="chap-Component_Reference-Common_Ajax_attributes" />; the <varname>action</varname> and <varname>actionListener</varname> attributes can be invoked and parts of the page can be re-rendered after a successful call to the JavaScript function. <xref linkend="exam-Component_Reference-a4jjsFunction-a4jjsFunction_example" /> shows how an Ajax request can be initiated from the JavaScript and a partial page update performed. The JavaScript function can be invoked with the data returned by the Ajax response.
		</para>
		<example id="exam-Component_Reference-a4jjsFunction-a4jjsFunction_example">
			<title>&lt;a4j:jsFunction&gt; example</title>
			
<programlisting language="XML" role="XML">
<xi:include href="extras/exam-Component_Reference-a4jjsFunction-a4jjsFunction_example.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</programlisting>
		</example>
		<para>
			The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component allows the use of the <sgmltag>&lt;a4j:actionParam&gt;</sgmltag> component or the JavaServer Faces <sgmltag>&lt;f:param&gt;</sgmltag> component to pass any number of parameters for the JavaScript function.
		</para>
		<para>
			The <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component is similar to the <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component, but it can be activated from the JavaScript code. This allows some server-side functionality to be invoked and the returned data to subsequently be used in a JavaScript function invoked by the <varname>oncomplete</varname> event attribute. In this way, the <sgmltag>&lt;a4j:jsFunction&gt;</sgmltag> component can be used instead of the <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> component.
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jpoll">
		<title>&lt;a4j:poll&gt;</title>
		<para>
			The <sgmltag>&lt;a4j:poll&gt;</sgmltag> component allows periodical sending of Ajax requests to the server. It is used for repeatedly updating a page at specific time intervals.
		</para>
		<para>
			The <varname>interval</varname> attribute specifies the time in milliseconds to between requests. The default for this value is 1000 ms (1 second).
		</para>
	</section>
	
	<section id="sect-Component_Reference-Actions-a4jpush">
		<title>&lt;a4j:push&gt;</title>
		<para>
			Incomplete
		</para>
	</section>

</chapter>

