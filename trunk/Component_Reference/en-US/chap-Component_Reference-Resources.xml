<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Component_Reference-Resources">
	<title>Resources</title>
	<para>
		This chapter covers those components used to handle and manage resources and beans.
	</para>
	<section id="sect-Component_Reference-Resources-a4jloadBundle">
		<title>&lt;a4j:loadBundle&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.Bundle</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>org.ajax4jsf.Bundle</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.AjaxLoadBundle</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:loadBundle&gt;</sgmltag> component is used to load resource bundles to aid in localization of an application. The bundles are localized to the locale of the current view, and properties are stored as a map in the current request attributes.
		</para>
		<para>
			The <sgmltag>&lt;a4j:loadBundle&gt;</sgmltag> component allows bundles to be accessed by Ajax requests working in their own address scopes. This solves the problem of using the <acronym>JSF</acronym> <sgmltag>&lt;h:loadBundle&gt;</sgmltag> component with Ajax, where bundle information loaded with the page was unavailable for later Ajax requests.
		</para>
		<para>
			Resource bundles are registered in the Faces configuration file, <filename>faces-config.xml</filename>.
		</para>
		<example id="exam-Component_Reference-a4jloadBundle-a4jloadBundle_example">
			<title><sgmltag>&lt;a4j:loadBundle&gt;</sgmltag> example</title>
			<para>
				This example shows a simple application capable of switching between different localized languages.
			</para>
			<procedure>
				<step id="step-Component_Reference-a4jloadBundle_example-Create_resource_bundles">
					<title>Create resource bundles</title>
					<para>
						String resource bundles are contained in files with a <filename class="extension">.properties</filename> extension. The files consist of a list of entries, each with a unique name and a corresponding value. A seperate file is required for each language. Append the filename with the locale identifier (<literal>en</literal> for English, for example).
					</para>
				</step>
				<step id="step-Component_Reference-a4jloadBundle_example-Register_bundles_in_Faces_configuration_file">
					<title>Register bundles in Faces configuration file</title>
					<para>
						The resource bundles need to be registered in the Faces configuration file, <filename>faces-config.xml</filename>. The filename is defined with the <sgmltag>&lt;message-bundle&gt;</sgmltag> tag, without the locale code and without the extension. The supported locale codes are listed with <sgmltag>&lt;supported-locale&gt;</sgmltag> tags.
					</para>
					
<programlisting language="XML" role="XML">
<xi:include href="extras/exam-Component_Reference-a4jloadBundle-a4jloadBundle_example-0.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
				</step>
				<step id="step-Component_Reference-a4jloadBundle_example-Create_method_to_set_locale">
					<title>Create method to set locale</title>
					<para>
						The <acronym>JSF</acronym> <methodname>javax.faces.component.UIViewRoot.setLocale()</methodname> method can be used to update the locale through a Java class:
					</para>
					
<programlisting language="java" role="JAVA">
<xi:include href="extras/exam-Component_Reference-a4jloadBundle-a4jloadBundle_example-1.js" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
				</step>
				<step id="step-Component_Reference-a4jloadBundle_example-Add_a4jloadBundle_to_the_JSP_page">
					<title>Add <sgmltag>&lt;a4j:loadBundle&gt;</sgmltag> to the <acronym>JSP</acronym> page</title>
					<para>
						The <sgmltag>&lt;a4j:loadBundle&gt;</sgmltag> component is added to the application, and links to change the locale will update the displayed text.
					</para>
					
<programlisting language="XML" role="XML">
<xi:include href="extras/exam-Component_Reference-a4jloadBundle-a4jloadBundle_example-2.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
				</step>
			</procedure>
			
			<para>
				Clicking on the different links will render the localized string as appropriate.
			</para>
		</example>
	</section>
	
	<section id="sect-Component_Reference-Resources-a4jloadScript">
		<title>&lt;a4j:loadScript&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.LoadScript</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>org.ajax4jsf.LoadScript</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.HtmlLoadScript</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					renderer-type: <classname>org.ajax4jsf.LoadScriptRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:loadScript&gt;</sgmltag> component allows scripts to be loaded from external sources such as <filename>jar</filename> files.
		</para>
		<para>
			The required <varname>src</varname> attribute defines the path to the script. A leading slash (<literal>/</literal>) represents the root of the web context. The <code>resource://</code> prefix can be used to access a file in the RichFaces resource framework. The path is passed to the <methodname>getResourceURL()</methodname> method of the application's <classname>ViewHandler</classname>, with the result then being passed through the <methodname>encodeResourceURL()</methodname> method of <classname>ExternalContext</classname>.
		</para>
		<example id="exam-Component_Reference-a4jloadScript-a4jloadScript_example">
			<title><sgmltag>&lt;a4j:loadScript&gt;</sgmltag> example</title>
			
<programlisting language="XML" role="XML">
&lt;a4j:loadScript src="resource:///org/mycompany/assets/script/focus.js" /&gt;
</programlisting>
		</example>
	</section>
	
	<section id="sect-Component_Reference-Resources-a4jloadStyle">
		<title>&lt;a4j:loadStyle&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.LoadStyle</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>org.ajax4jsf.LoadStyle</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.HtmlLoadStyle</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					renderer-type: <classname>org.ajax4jsf.LoadStyleRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:loadStyle&gt;</sgmltag> component allows a style sheet to be loaded from an external source, such as a <filename>jar</filename> file. The style sheet links are inserted into the head element.
		</para>
		<para>
			The required <varname>src</varname> attribute defines the path to the script. A leading slash (<literal>/</literal>) represents the root of the web context. The <code>resource://</code> prefix can be used to access a file in the RichFaces resource framework. The path is passed to the <methodname>getResourceURL()</methodname> method of the application's <classname>ViewHandler</classname>, with the result then being passed through the <methodname>encodeResourceURL()</methodname> method of <classname>ExternalContext</classname>.
		</para>
		<example id="exam-Component_Reference-a4jloadStyle-a4jloadStyle_example">
			<title><sgmltag>&lt;a4j:loadStyle&gt;</sgmltag> example</title>
			
<programlisting language="XML" role="XML">
&lt;a4j:loadStyle src="resource:///org/mycompany/assets/script/focus.js" /&gt;
</programlisting>
		</example>
	</section>
	
	<section id="sect-Component_Reference-Resources-a4jkeepAlive">
		<title>&lt;a4j:keepAlive&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.components.KeepAlive</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>org.ajax4jsf.components.AjaxKeepAlive</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.components.AjaxKeepAlive</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:keepAlive&gt;</sgmltag> component allows the state of a managed bean to be retained between Ajax requests.
		</para>
		<para>
			Managed beans can be declared with the <literal>request</literal> scope in the <filename>faces-config.xml</filename> configuration file, using the <sgmltag>&lt;managed-bean-scope&gt;</sgmltag> tag. Any references to the bean instance after the request has ended will cause the server to throw an illegal argument exception. The <sgmltag>&lt;a4j:keepAlive&gt;</sgmltag> component avoids this be maintaining the state of the whole bean object for subsequent requests.
		</para>
		<para>
			The <varname>beanName</varname> attribute uses JSF Expression Language (<acronym>EL</acronym>) to define the request scope bean name to keep alive. The expression must resolve to a managed bean instance. The <varname>ajaxOnly</varname> attribute determines whether or not the value of the bean should be available during non-Ajaxx requests; if <code>ajaxOnly="true"</code>, the request-scope bean keeps its value during Ajax requests, but any non-Ajax requests will re-create the bean as a regular request-scope bean.
		</para>
		<example id="exam-Component_Reference-a4jkeepAlive-a4jkeepAlive_example">
			<title><sgmltag>&lt;a4j:keepAlive&gt;</sgmltag> example</title>
			
<programlisting language="XML" role="XML">
&lt;a4j:keepAlive beanName="#{myClass.testBean}" /&gt;
</programlisting>
		</example>
	</section>
	
	<section id="sect-Component_Reference-Resources-a4jmediaOutput">
		<title>&lt;a4j:mediaOutput&gt;</title>
		<itemizedlist>
			<listitem>
				<para>
					component-type: <classname>org.ajax4jsf.Push</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-family: <classname>org.ajax4jsf.components.AjaxPush</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					component-class: <classname>org.ajax4jsf.component.html.AjaxPush</classname>
				</para>
			</listitem>
			<listitem>
				<para>
					renderer-type: <classname>org.ajax4jsf.components.AjaxPushRenderer</classname>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The <sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> component is used for generating images, video, sounds, and other resources defined on the fly.
		</para>
		<para>
			The <varname>createContent</varname> attribute points to the method used for generating the displayed content. If necessary, the <varname>value</varname> attribute can be used to pass input data to the content generation method specified with <varname>createContent</varname>. The <varname>cacheable</varname> attribute specifies whether the resulting content will be cached or not.
		</para>
		<para>
			The <varname>mimeType</varname> attribute describes the type of output content, and corresponds to the type in the header of the <acronym>HTTP</acronym> request. The <varname>element</varname> attribute defines <attribute>XHTML</attribute> element used to display the content:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<literal>img</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>object</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>applet</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>script</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>link</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>a</literal>
				</para>
			</listitem>
		</itemizedlist>
		<example id="exam-Component_Reference-a4jmediaOutput-a4jmediaOutput_example">
			<title><sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> example</title>
			<para>
				This example uses the <sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> component to generate a <acronym>JPEG</acronym> image of verification digits. The code on the application page is a single element:
			</para>
			
<programlisting language="XML" role="XML">
&lt;a4j:mediaOutput element="img" cacheable="false" session="false" createContent="#{mediaBean.paint}" value="#{mediaData}" mimeType="image/jpeg" /&gt;
</programlisting>
			<para>
				The <sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> component uses the <methodname>MediaBean.paint</methodname> method to create the image. The method generates a random number, which is then converted into an output stream and rendered to a <acronym>JPEG</acronym> image. The <classname>MediaBean</classname> class is as follows:
			</para>
			
<programlisting language="XML" role="XML">
<xi:include href="extras/exam-Component_Reference-a4jmediaOutput-a4jmediaOutput_example-0.js" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
			<para>
				Another class, <classname>MediaData</classname> is required by the <varname>value</varname> attribute for keeping data to be used as input for the content creation method. The <classname>MediaData</classname> class is as follows:
			</para>
			
<programlisting language="XML" role="XML">
<xi:include href="extras/exam-Component_Reference-a4jmediaOutput-a4jmediaOutput_example-1.js" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		</example>
		<note>
			<title>Note</title>
			<para>
				A bean class passed using the <varname>value</varname> attribute of <sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> should implement the <classname>Serializable</classname> interface so that it will be encoded to the <acronym>URL</acronym> of the resource.
			</para>
		</note>
		<para>
			The <sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> component uses the <classname>MediaBean</classname> and <classname>MediaData</classname> classes to generate a new image on each page refresh, which appears as
		</para>
		<figure id="figu-Component_Reference-a4jmediaOutput-a4jmediaOutput_example_result">
			<title><sgmltag>&lt;a4j:mediaOutput&gt;</sgmltag> example result</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/figu-Component_Reference-a4jmediaOutput-a4jmediaOutput_example_result.png" format="PNG" />
				</imageobject>
				<textobject>
					<para>
						The generated image containing a random verification number.
					</para>
				</textobject>
			</mediaobject>
		</figure>
	</section>

</chapter>

