<?xml version='1.0' encoding='UTF-8'?>
<chapter id="BasicConceptsOfTheAjax4jsfFramework"  xreflabel="BasicConceptsOfTheAjax4jsfFramework">
  <?dbhtml filename="BasicConceptsOfTheAjax4jsfFramework.html"?>

  <chapterinfo>
    <keywordset>
      <keyword>AjaxContainer</keyword>

      <keyword>Request Processing</keyword>

      <keyword>Ajax4jsf</keyword>
    </keywordset>
  </chapterinfo>

  <title>Basic concepts of the Ajax4jsf Framework</title>
  <section id="introToBasics">
  <?dbhtml filename="introToBasics.html"?>
    <title>Introduction</title>
    <para>The framework is implemented as a component library which adds AJAX capability into existing 
      pages, so you don&apos;t need to write any JavaScript code or to replace existing 
      components with new AJAX widgets. <property>Ajax4jsf</property> enables page-wide AJAX support instead of the 
      traditional component-wide support. So, you can define the event on the page that 
      invokes an AJAX request and the areas of the page that should be synchronized with the JSF 
      Component Tree after the AJAX request changes the data on the server according to the 
      events fired on the client.</para>
    <para>Next Figure shows how it works:</para>
    <figure>
      <title>Request Processing flow</title>
    </figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/newpic1.jpg"/>
      </imageobject>
    </mediaobject>
    <para><property>Ajax4jsf</property> allows to define (by means of JSF tags) different parts of a JSF page you 
      wish to update with  an AJAX request and provide a few options to send AJAX requests to 
      the server. Also  JSF page doesn&apos;t change from a &quot;regular&quot; JSF 
      page and you don&apos;t need to write  any JavaScript  or XMLHttpRequest objects by hands, everything is done automatically.</para>
  </section>
  <section id="ArchitectureOverview">
  <?dbhtml filename="ArchitectureOverview.html"?>
    <title>Architecture Overview</title>
    <para>Next figure lists several important elements of the <property>Ajax4jsf</property> framework</para>
    <figure>
      <title>Ajax4jsf component structure</title>
    </figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/newpic2.jpg"/>
      </imageobject>
    </mediaobject>
    <formalpara>
      <title>Ajax Filter.</title>
      <para>To get all benefits of  <property>Ajax4jsf</property>, you should  register an AJAX Filter in web.xml 
      file of your application.The AJAX Filter recognizes multiple request types. The sequence diagram on Figure 3 
      shows the difference in processing of a &quot;regular&quot; JSF request and an AJAX request.</para>
    </formalpara>
    <para>In the first case the whole JSF tree will be encoded,
      in the second one option it depends on the &quot;size&quot; of the AJAX region (you can define AJAX region 
      by using the <emphasis role="bold"><property>&lt;a4j:region&gt;</property></emphasis>). As you can see, in the second case the filter parses 
      the content of an AJAX response before sending it to the client side.</para>
    <para>Have a look at the next picture to understand these two ways:</para>
    <figure>
      <title>Request Processing sequence diagram</title>
    </figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/newpic3.jpg"/>
      </imageobject>
    </mediaobject>
    <para>In both cases, the information about required static or dynamic resources that your application 
      requests is registered in the ResourseBuilder class.</para>
    <para>When a request for a resource comes (Figure 4), the AJAX filter checks the Resource Cache 
      for this resource and if it is there, the resource is sent to the client. Otherwise, 
      the filter searches for the resource among those that are registered by the 
      ResourceBuilder. If the resource is registered, the AJAX filter will send a request to the 
      ResourceBuilder to create (deliver) the resource.</para>
    <para>Next Figure shows the ways of  resource request processing.</para>
    <figure>
      <title>Resource request sequence diagram</title>
    </figure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/newpic4.jpg"/>
      </imageobject>
    </mediaobject>
    <formalpara>
      <title>AJAX Action Components</title>
      <para>
      There are four AJAX Action Components: AjaxCommandButton,  AjaxCommandLink, AjaxPoll and AjaxSupport. 
      You can use them to send AJAX requests from the client side. 
    </para>
    </formalpara>
    <formalpara>
      <title>AJAX Containers</title>
      <para>
      AjaxContainer is an interface that describes an area on your JSF page that should be decoded 
      during an AJAX request. AjaxViewRoot and AjaxRegion are implementations of this interface.      
    </para>
    </formalpara>
    <formalpara>
      <title>JavaScript Engine</title>
      <para><property> Ajax4jsf</property> JavaScript Engine runs on the client-side. It knows how to update different areas 
      on your JSF page based on the information from the Ajax response. Do 
      not use this JavaScript code directly, as it is available automatically.      
    </para>
    </formalpara>
  </section>
  <section id="LimitationsAndRules">
  <?dbhtml filename="LimitationAndRules.html"?>
    <title>Limitations and Rules</title>
    <para>In order to create AJAX4JSF applications properly,  keep the following points in mind:</para>
    <itemizedlist>
      <listitem>
        The AJAX framework should not append or delete, but only replace elements on the page. For successful updates, an element with the same ID as in the response must exist on the page. If you&apos;d like to append any code to a page, put in a placeholder for it (any empty element). For the same reason, it&apos;s recommended to place messages in the<emphasis >
            <property>&quot;AjaxOutput&quot;</property>
          </emphasis> component (as no messages is also a message).
      </listitem>
      <listitem>
        Don&apos;t use <emphasis role="bold">
            <property>&lt;f:verbatim&gt;</property>
          </emphasis>  for self-rendered containers, since this component is transient and not saved in the tree.
      </listitem>
      <listitem>
        AJAX requests are made by XMLHttpRequest functions in XML format, but this XML bypasses most validations and the corrections that might be made in a browser. So, create only a strict standards-compliant code for HTML and XHTML, without skipping any required elements or attributes. Any necessary XML corrections are automatically made by the XML filter on the server, but lot&apos;s of  unexpected effects can be produced by an  incorrect HTML code.
      </listitem>
    </itemizedlist>
  </section>
  <section id="HowTo...">
  <?dbhtml filename="HowTo.html"?>
    <title>How To...</title>
    <section id="SendAnAJAXRequest">
    <?dbhtml filename="SendAnAJAXRequest.html"?>
      <title>Send an AJAX request</title>
      <para>There are different ways to send AJAX requests from your JSF page. You may use 
          <emphasis role="bold"><property>&lt;a4j:commandButton&gt;</property></emphasis>, <emphasis role="bold">
          <property>&lt;a4j:commandLink&gt;</property>, <emphasis role="bold"><property>&lt;a4j:poll&gt;</property></emphasis>
        </emphasis> or <emphasis role="bold">
          <property>&lt;a4j:support&gt;</property>
        </emphasis> tags.           
        </para>
      <para>All these tags hide the usual JavaScript activities that are required for an XMHttpRequest 
          object building and  an AJAX request sending. Also, they allow you to decide which components of 
          your JSF page are to be re-rendered as a result of the AJAX response (you can list the 
          IDs of these components in the &quot;reRender&quot; attribute).
        </para>
      <para>
          <emphasis role="bold">
          <property>&lt;a4j:commandButton&gt;</property>
        </emphasis> and <emphasis role="bold">
          <property>&lt;a4j:commandLink&gt;</property>
        </emphasis> tags are used to send an AJAX 
          request on &quot;onclick&quot; JavaScript event. 
        </para>
      <para>
          <emphasis role="bold">
          <property>&lt;a4j:poll&gt;</property>
        </emphasis> tag is used to send an AJAX 
          request periodically using a timer. 
        </para>
      <para>The <emphasis role="bold">
          <property>&lt;a4j:support&gt;</property>
        </emphasis> tag allows you to add AJAX functionality to standard JSF components 
          and send AJAX request onto a chosen JavaScript event: &quot;onkeyup&quot;, &quot;onmouseover&quot;, 
          etc.
        </para>
      <para>Most important attributes of components that provide AJAX request calling features are:</para>
      <itemizedlist>
        <listitem>
              <emphasis >
              <property>&quot;reRender&quot;</property>
            </emphasis>attribute as it was mentioned  <link linkend="SendAnAJAXRequest">before</link> specifies components to be reRendered 
              after AJAX response. The attribute can be specified using EL expression and formed dynamicaly on the
              server side (see <ulink url="index.html#FAQ">FAQ chapter</ulink>).
		</listitem>
        <listitem>
             <emphasis >
              <property>&quot;RequestDelay&quot;</property>
            </emphasis> attribute is used for a requests frequency regulation.
		</listitem>
        </itemizedlist>
          <programlisting role="XML"><![CDATA[<h:inputText size="50" value="#{bean.text}">
        <a4j:support event="onkeyup" RequestDelay="3"/>
</h:inputText>]]></programlisting>
          <para>So every next request from the frequent keyboard events will be delayed 
              on 3 ms to reduce the number of requests.
            </para>
        <itemizedlist>
        <listitem>
               <emphasis >
              <property>&quot;EventsQueue&quot;</property>
            </emphasis> is a queue that stores the next request. 
		</listitem>
		<listitem>
             <emphasis >
              <property>&quot;LimitToList&quot;</property>
            </emphasis> attribute is used to regulate updatable regions. Setting 
              it to true limits the updatable areas only to ones specified in a
              reRender list, in other case all Output Panels of the region are updated.
   </listitem>
        <listitem> <emphasis >
              <property>&quot;ajaxSingle&quot;</property>
            </emphasis> attributes specify regions to be sent with a request, 
              if &quot;false&quot; it is a full region, in other case it&apos;s is only a control caused 
              event.
</listitem>
      </itemizedlist>
    </section>
    <section id="DecideWhatToSend">
    <?dbhtml filename="DecideWhatToSend.html"?>
      <title>Decide What to Send</title>
      <para>You may describe a region on the page you wish to send to the server, in this way you  can 
          control what part of the JSF View is decoded on the server side when you send an 
          AJAX request.  
        </para>
      <para>The easiest way to describe an AJAX region on your JSF page is to do nothing, 
          because the content between the <emphasis role="bold">
          <property>&lt;f:view&gt;</property>
        </emphasis> and <emphasis role="bold">
          <property>&lt;/f:view&gt;</property>
        </emphasis> tags is considered 
          the default AJAX region.
        </para>
      <para>You may define multiple AJAX regions on the JSF page (they can even be nested) by using 
          the <emphasis role="bold">
          <property>&lt;a4j:region&gt;</property>
        </emphasis> tag. 
        </para>
      <para>If you wish to render the content of an AJAX response outside of the active region then 
          the value of the &quot;renderRegionOnly&quot; attribute should be set to &quot;false&quot;. Otherwise, your 
          AJAX updates are limited to elements of the active region.
        </para>
    </section>
    <section id="DecideWhatToChange">
    <?dbhtml filename="DecideWhatToChange.html"?>
      <title>Decide What to Change</title>
      <para>Using IDs in the &quot;reRender&quot; attribute to define &quot;AJAX zones&quot; for update works fine in 
          many  cases. 
        </para>
      <para>But you can not use this approach if your page contains, e.g. a <emphasis role="bold"><property>&lt;f:verbatim&gt;</property></emphasis>
          tag and you wish to update its content on an AJAX response.
        </para>
      <para>The problem with the <emphasis role="bold">
          <property>&lt;f:verbatim/&gt;</property>
        </emphasis> tag as described above is related to the 
          value of the transientFlag of JSF components. If the value of this flag is true, the 
          component must not participate in state saving or restoring of process.
        </para>
      <para>In order to provide a solution to this kind of problems, Ajax4jsf uses the concept of 
          an output panel that is defined by the <emphasis role="bold">
          <property>&lt;a4j:outputPanel&gt;</property>
        </emphasis> tag. If you put a <emphasis role="bold"><property>&lt;f:verbatim&gt;</property></emphasis>
          tag inside of the output panel, then the content of the <emphasis role="bold">
          <property>&lt;f:verbatim/&gt;</property>
        </emphasis> tag and content of 
          other panel&apos;s child tags could be updated on AJAX response. There are two ways to 
          control this:
          <itemizedlist>
          <listitem> 
                By setting the &quot;ajaxRendered&quot; attribute value to &quot;true&quot;.
</listitem>
          <listitem>
                By setting the &quot;reRender&quot; attribute value of an Action Component to the output panel ID.
</listitem>
        </itemizedlist>          
        </para>
    </section>
  </section>
  <section id="RequestErrorsAndSessionExpirationHandling">
  <?dbhtml filename="RequestErrorsAndSessionExpirationHandling.html"?>
  <title>Request Errors and Session Expiration Handling</title>
  <para>Ajax4jsf allows to redefine standard handlers responsible for processing of different exceptional situations. It helps to define own JavaScript, which is executed when this situations occur.</para>
  <section id="RequestErrorsHandling">
  <?dbhtml filename="RequestErrorsHandling.html"?>
    <title>Request Errors Handling</title>
    <para>To execute your own code on the client in case of an error during AJAX request, it's necessary to redefine the standard "A4J.AJAX.onError " method:</para>
	<programlisting role="JAVA"><![CDATA[A4J.AJAX.onError = function(req,status,message) { 
          // Custom Developer Code 
};]]></programlisting>
    <para>The function defined this way accepts as parameters:</para>
	 <itemizedlist>
      <listitem>req - a params string of a request that calls an error</listitem>
      <listitem>status - the number of an error returned by the server</listitem>
      <listitem>message - a default message for the given error</listitem>
	 </itemizedlist>
 <para>Thus, it&apos;s possible to create your own handler that is called on timeouts, inner server errors, and etc.</para>
  </section>
  <section id="SessionExpiredHandling">
  <?dbhtml filename="SessionExpiredHandling.html"?>
    <title>Session Expired Handling</title>
    <para>Beginning with Ajax4jsf version 1.0.5 it&apos;s possible to redefine also the <emphasis >
     <property>&quot;onExpired&quot;</property>
     </emphasis> framework method that is called on the <emphasis >
     <property>&quot;Session Expiration&quot;</property>
     </emphasis> event.</para>
     <programlisting role="JAVA"><![CDATA[A4J.AJAX.onExpired = function(loc,expiredMsg){ 
          // Custom Developer Code 
};
]]></programlisting>

<para>Here the function receives in params:</para>
    <itemizedlist>
      <listitem>loc - URL of the current page (on demand can be updated) </listitem>
      <listitem>expiredMsg - a default message on <emphasis >
     <property>&quot;Session Expiration&quot;</property>
     </emphasis>event.</listitem>
    </itemizedlist>	 
<note>
<title>Note:</title>
Until the version 1.0.5 the method can&apos;t be redefined on <emphasis >
     <property>&quot;Session Expiration&quot;</property>,
     </emphasis> a confirmation dialog with a request for view reloading was always called.
</note>
  </section>
</section>
&FAQ;
<section id="OtherRelevantResources">
  <title>Other Relevant Resources</title>
  <para><ulink url="http://jsf.javabeat.net/articles/2007/06/introduction-to-ajax4jsf/">Introduction to Ajax4Jsf</ulink> by Shunmuga Raja</para>
   
</section>
</chapter>
