<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Developer_Guide-Skinning_and_theming">
	<title>Skinning and theming</title>
	<para>
		Read this chapter for a guide to skinning and theming RichFaces applications, including how to implement themes, and details on customizing and extending skins.
	</para>
	<section id="sect-Developer_Guide-Skinning_and_theming-What_are_skins">
		<title>What are skins?</title>
		<para>
			Application skins are used with the RichFaces framework to change the appearance of an application through setting the colors and decoration of controls and components. Typically the appearance of web applications is handled through the <acronym>CSS</acronym> (Cascading Style Sheet) files associated with the application, but skinning allows the settings in a CSS file to be abstracted and easily edited. Skins consist of a small, generalized set of font and color parameters that can be applied to multiple different styles. This avoids repetitive coding and duplication in CSS files. CSS files are not completely replaced: skins work as a high-level extension to standard CSS.
		</para>
		<para>
			Each skin has a set of <varname>skin-parameters</varname>, which are used to define the theme palette and other elements of the user interface. These parameters work together with regular CSS declarations, and can be referred to from within CSS using JavaServer Faces Expression Language (<acronym>EL</acronym>).
		</para>
		<para>
			The skinning feature of RichFaces also allows skins to be changed at runtime, so users can personalize an application's appearance on the fly.
		</para>
	</section>
	
	<section id="sect-Developer_Guide-Skinning_and_theming-Using_skins">
		<title>Using skins</title>
		<para>
			RichFaces includes a number of predefined skins. These skins can be used in RichFaces web applications by specifying the skin name in the <varname>org.richfaces.skin</varname> context parameter in the <filename>web.xml</filename> settings file. The predefined skins are as follows:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					<literal>DEFAULT</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>plain</literal>, which contains no skin parameters and is intended for embedding RichFaces components into existing projects with their own styles.
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>emeraldTown</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>blueSky</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>wine</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>japanCherry</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>ruby</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>classic</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>deepMarine</literal>
				</para>
			</listitem>
			<!--
			<listitem>
				<para>
					<literal>laguna</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>darkX</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					<literal>glassX</literal>
				</para>
			</listitem>
			-->
		</itemizedlist>
		<para>
			To add one of these skins to your application, add the <literal>org.richfaces.SKIN</literal> context parameter to the <filename>web.xml</filename> configuration file:
		</para>
<programlisting>&lt;context-param&gt;
    &lt;param-name&gt;org.richfaces.skin&lt;/param-name&gt;
    &lt;param-value&gt;<replaceable>skin_name</replaceable>&lt;/param-value&gt;
&lt;/context-param&gt;</programlisting>
	</section>
	
	<section id="sect-Developer_Guide-Skinning_and_theming-Skinning_overview">
		<title>Skinning overview</title>
		<para>
			RichFaces skins are implemented using the following three-level scheme:
		</para>
		<variablelist>
			<varlistentry>
				<term>Component stylesheets</term>
				<listitem>
					<para>
						Stylesheets are provided for each component. CSS style parameters map to skin parameters defined in the skin property file. This mapping is accomplished through the use of ECSS files. Refer to <xref linkend="sect-Developer_Guide-Skinning_and_theming-ECSS_files" /> for details on ECSS files.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Skin property files</term>
				<listitem>
					<para>
						Skin property files map skin parameters to constant styles. Skin properties are defined in <filename>skin.properties</filename> files. Refer to <xref linkend="sect-Developer_Guide-Skinning_overview-Skin_parameter_tables" /> for a listing of the skin parameters used in a typical skin.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Custom style classes</term>
				<listitem>
					<para>
						Individual components can use the <varname>styleClass</varname> attribute to redefine specific elements. These components then use the styles defined in a CSS file instead of the standard look for components as defined by the ECSS stylesheets.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>

		<section id="sect-Developer_Guide-Skinning_overview-Skin_parameter_tables">
			<title>Skin parameter tables</title>
			<para>
				<xref linkend="tabl-Developer_Guide-Skin_parameter_tables_in_RichFaces-Parameter_settings_for_the_blueSky_skin" /> lists the default values for the parameter settings in the <literal>blueSky</literal> skin. These values are all listed in the <filename>blueSky.skin.properties</filename> file, which can be customized and extended as described in <xref linkend="sect-Developer_Guide-Skinning_and_theming-Customizing_skins" />.
			</para>
			<table id="tabl-Developer_Guide-Skin_parameter_tables_in_RichFaces-Parameter_settings_for_the_blueSky_skin">
				<title>Parameter settings for the <literal>blueSky</literal> skin</title>
				<tgroup cols="2">
					<thead>
						<row>
							<entry>Parameter name</entry>
							<entry>Default value</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><parameter>headerBackgroundColor</parameter></entry>
							<entry><literal>#BED6F8</literal></entry>
						</row>
						<row>
							<entry><parameter>headerGradientColor</parameter></entry>
							<entry><literal>#F2F7FF</literal></entry>
						</row>
						<row>
							<entry><parameter>headTextColor</parameter></entry>
							<entry><literal>#000000</literal></entry>
						</row>
						<row>
							<entry><parameter>headerWeightFont</parameter></entry>
							<entry><literal>bold</literal></entry>
						</row>
						<row>
							<entry><parameter>generalBackgroundColor</parameter></entry>
							<entry><literal>#FFFFFF</literal></entry>
						</row>
						<row>
							<entry><parameter>generalTextColor</parameter></entry>
							<entry><literal>#000000</literal></entry>
						</row>
						<row>
							<entry><parameter>generalSizeFont</parameter></entry>
							<entry><literal>11px</literal></entry>
						</row>
						<row>
							<entry><parameter>generalFamilyFont</parameter></entry>
							<entry><literal>Arial, Verdana, sans-serif</literal></entry>
						</row>
						<row>
							<entry><parameter>controlTextColor</parameter></entry>
							<entry><literal>#000000</literal></entry>
						</row>
						<row>
							<entry><parameter>controlBackgroundColor</parameter></entry>
							<entry><literal>#FFFFFF</literal></entry>
						</row>
						<row>
							<entry><parameter>additionalBackgroundColor</parameter></entry>
							<entry><literal>#ECF4FE</literal></entry>
						</row>
						<row>
							<entry><parameter>shadowBackgroundColor</parameter></entry>
							<entry><literal>#000000</literal></entry>
						</row>
						<row>
							<entry><parameter>shadowOpacity</parameter></entry>
							<entry><literal>1</literal></entry>
						</row>
						<row>
							<entry><parameter>panelBorderColor</parameter></entry>
							<entry><literal>#BED6F8</literal></entry>
						</row>
						<row>
							<entry><parameter>subBorderColor</parameter></entry>
							<entry><literal>#FFFFFF</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarWeekBackgroundColor</parameter></entry>
							<entry><literal>#F5F5F5</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarHolidaysBackgroundColor</parameter></entry>
							<entry><literal>#FFEBDA</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarHolidaysTextColor</parameter></entry>
							<entry><literal>#FF7800</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarCurrentBackgroundColor</parameter></entry>
							<entry><literal>#FF7800</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarCurrentTextColor</parameter></entry>
							<entry><literal>#FFEBDA</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarSpecBackgroundColor</parameter></entry>
							<entry><literal>#E4F5E2</literal></entry>
						</row>
						<row>
							<entry><parameter>calendarSpecTextColor</parameter></entry>
							<entry><literal>#000000</literal></entry>
						</row>
						<row>
							<entry><parameter>editorBackgroundColor</parameter></entry>
							<entry><literal>#F1F1F1</literal></entry>
						</row>
						<row>
							<entry><parameter>editBackgroundColor</parameter></entry>
							<entry><literal>#FEFFDA</literal></entry>
						</row>
						<row>
							<entry><parameter>errorColor</parameter></entry>
							<entry><literal>#FF0000</literal></entry>
						</row>
						<row>
							<entry><parameter>gradientType</parameter></entry>
							<entry><literal>plain</literal></entry>
						</row>
						<row>
							<entry><parameter>tabBackgroundColor</parameter></entry>
							<entry><literal>#C6DEFF</literal></entry>
						</row>
						<row>
							<entry><parameter>tabDisabledTextColor</parameter></entry>
							<entry><literal>#8DB7F3</literal></entry>
						</row>
						<row>
							<entry><parameter>tableHeaderBackgroundColor</parameter></entry>
							<entry><literal>#D6E6FB</literal></entry>
						</row>
						<row>
							<entry><parameter>tableSubHeaderBackgroundColor</parameter></entry>
							<entry><literal>#ECF4FE</literal></entry>
						</row>
						<row>
							<entry><parameter>tableBorderWidth</parameter></entry>
							<entry><literal>1px</literal></entry>
						</row>
						<row>
							<entry><parameter>tableHeaderTextColor</parameter></entry>
							<entry><literal>#0B356C</literal></entry>
						</row>
						<row>
							<entry><parameter>trimColor</parameter></entry>
							<entry><literal>#D6E6FB</literal></entry>
						</row>
						<row>
							<entry><parameter>tipBackgroundColor</parameter></entry>
							<entry><literal>#FAE6B0</literal></entry>
						</row>
						<row>
							<entry><parameter>tipBorderColor</parameter></entry>
							<entry><literal>#E5973E</literal></entry>
						</row>
						<row>
							<entry><parameter>selectControlColor</parameter></entry>
							<entry><literal>#E79A00</literal></entry>
						</row>
						<row>
							<entry><parameter>generalLinkColor</parameter></entry>
							<entry><literal>#0078D0</literal></entry>
						</row>
						<row>
							<entry><parameter>hoverLinkColor</parameter></entry>
							<entry><literal>#0090FF</literal></entry>
						</row>
						<row>
							<entry><parameter>visitedLinkColor</parameter></entry>
							<entry><literal>#0090FF</literal></entry>
						</row>
						<row>
							<entry><parameter>headerSizeFont</parameter></entry>
							<entry><literal>11px</literal></entry>
						</row>
						<row>
							<entry><parameter>headerFamilyFont</parameter></entry>
							<entry><literal>Arial, Verdana, sans-serif</literal></entry>
						</row>
						<row>
							<entry><parameter>tabSizeFont</parameter></entry>
							<entry><literal>11px</literal></entry>
						</row>
						<row>
							<entry><parameter>tabFamilyFont</parameter></entry>
							<entry><literal>Arial, Verdana, sans-serif</literal></entry>
						</row>
						<row>
							<entry><parameter>buttonSizeFont</parameter></entry>
							<entry><literal>11px</literal></entry>
						</row>
						<row>
							<entry><parameter>buttonFamilyFont</parameter></entry>
							<entry><literal>Arial, Verdana, sans-serif</literal></entry>
						</row>
						<row>
							<entry><parameter>tableBackgroundColor</parameter></entry>
							<entry><literal>#FFFFFF</literal></entry>
						</row>
						<row>
							<entry><parameter>tableFooterBackgroundColor</parameter></entry>
							<entry><literal>#CCCCCC</literal></entry>
						</row>
						<row>
							<entry><parameter>tableSubfooterBackgroundColor</parameter></entry>
							<entry><literal>#F1F1F1</literal></entry>
						</row>
						<row>
							<entry><parameter>tableBorderColor</parameter></entry>
							<entry><literal>#C0C0C0</literal></entry>
						</row>
						<row>
							<entry><parameter>warningColor</parameter></entry>
							<entry><literal>#FFE6E6</literal></entry>
						</row>
						<row>
							<entry><parameter>warningBackgroundColor</parameter></entry>
							<entry><literal>#FF0000</literal></entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>

        <section id="sect-Developer_Guide-Skinning_and_theming-Round_corners">
            <title>Support for round corners</title>
            <para>
                Support for round borders in your skins is available via the <literal>panelBorderRadius</literal> skin parameter.
                The value of this parameter maps to the CSS 3 <literal>border-radius</literal> property.  This CSS 3 property is
                ignored in older browsers, and the skin gracefully degrades to square corners.
            </para>
            <para>
                Units of the <literal>panelBorderRadius</literal> skin parameter must be either <literal>px</literal> (pixels).
                or <literal>%</literal> (a percentage).
            </para>
        </section>


		<section id="sect-Developer_Guide-Skinning_and_theming-ECSS_files">
			<title><acronym>ECSS</acronym> files</title>
			<para>
				RichFaces uses <acronym>ECSS</acronym> files to add extra functionality to the skinning process. ECSS files are CSS files which use Expression Language (<acronym>EL</acronym>) to connect styles with skin properties.
			</para>
			<example id="exam-Developer_Guide-Skinning_and_theming-ECSS_style_mappings">
				<title>ECSS style mappings</title>
				<para>
					The ECSS code for the <sgmltag>&lt;rich:panel&gt;</sgmltag> component contains styles for the panel and its body:
				</para>
				<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Developer_Guide-Skinning_and_theming-ECSS_style_mappings.css" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
				<variablelist>
					<varlistentry>
						<term><classname>.rf-p</classname> defines the panel styles</term>
						<listitem>
							<itemizedlist>
								<listitem>
									<para>
										The <property>background-color</property> CSS property maps to the <parameter>generalBackgroundColor</parameter> skin parameter.
									</para>
								</listitem>
								<listitem>
									<para>
										The <property>color</property> CSS property maps to the <parameter>panelBorderColor</parameter> skin parameter.
									</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><classname>.rf-p-b</classname> defines the panel body styles</term>
						<listitem>
							<itemizedlist>
								<listitem>
									<para>
										The <property>font-family</property> CSS property maps to the <parameter>generalFamilyFont</parameter> skin parameter.
									</para>
								</listitem>
								<listitem>
									<para>
										The <property>font-size</property> CSS property maps to the <parameter>generalSizeFont</parameter> skin parameter.
									</para>
								</listitem>
								<listitem>
									<para>
										The <property>color</property> CSS property maps to the <parameter>generalTextColor</parameter> skin parameter.
									</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</example>
		</section>
	</section>

	<section id="sect-Developer_Guide-Skinning_and_theming-Customizing_skins">
		<title>Customizing skins</title>
		<para>
			Skins in RichFaces can be customized on each of the three levels:
		</para>
		<variablelist>
			<varlistentry>
				<term>Skin property files</term>
				<listitem>
					<para>
						Application interfaces can be modified by altering the values of skin parameters in the skin itself. Edit the constant values defined in the <filename>skin.properties</filename> file to change the style of every component mapped to that skin property.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Component stylesheets</term>
				<listitem>
					<para>
						Mappings and other style attributes listed in a component's ECSS file can be edited. Edit the ECSS file to change the styles of all components of that type.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Custom components style classes</term>
				<listitem>
					<para>
						Individual components can use the <varname>styleClass</varname> attribute to use a unique style class. Add the new style class to the application CSS and reference it from an individual component with the <varname>styleClass</varname> attribute.
					</para>
				</listitem>
			</varlistentry>
            <varlistentry>
                <term>Overwriting stylesheets in application</term>
                <listitem>
                    <para>
                        You can load custom stylesheets using <code>&lt;h:outputStylesheet&gt;</code> which rewrites of extends styles defined for style classes of components.
                    </para>
                </listitem>
            </varlistentry>
		</variablelist>
        
        <note>
            <title>Customizing skins by rewriting/extending component style classes</title>
            <para>
                If you want to extend/overwrite style sheet definitions with own stylesheets, make sure you place definitions to be rendered in right order of occurence (see <link linkend="sect-Developer_Guide-RichFaces_overview-Restrictions">Restrictions</link> section for details).
            </para>
        </note>
	
		<example id="exam-Developer_Guide-Using_skins-Simple_skinning_example">
			<title>Simple skinning example</title>
			<para>
				Using any component, such as a panel, without specifying a <varname>styleClass</varname> will use the default skin parameters for that component.
			</para>
	
	<programlisting language="XML" role="XML">&lt;rich:panel&gt;This is a panel without a header&lt;/rich:panel&gt;</programlisting>
			<para>
				When rendered for display, the panel consists of two HTML elements: a wrapper <sgmltag>&lt;div&gt;</sgmltag> element and a <sgmltag>&lt;div&gt;</sgmltag> element for the body of the panel. The wrapper element for a panel without a specified <varname>styleClass</varname> is rendered as follows:
			</para>
			<programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Using_skins-Rendered_panel.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			<para>
				To customize the panel appearance according to the three-level scheme, adjust the styles according to the following approach:
			</para>
			<procedure>
				<step>
					<para>
						Change the definitions for the <parameter>generalBackgroundColor</parameter> or <parameter>panelBorderColor</parameter> parameters in the skin. This will cause all panels in the application to change to the new settings.
					</para>
				</step>
				<step>
					<para>
						Redefine the <classname>rf-p</classname> class in the application CSS. This will also cause all panels in the application to change to the new settings, though the skin itself has not been altered. Any properties not mapped to skin parameters should be redefined in this way.
					</para>
				</step>
				<step>
					<para>
						Specify a different <varname>styleClass</varname> attribute to style the individual component. If a <varname>styleClass</varname> attribute is used, the specified style class is applied to the component, which could extend or override the default styles.
					</para>
					<programlisting language="XML" role="XML">&lt;rich:panel styleClass="customClass"&gt;...&lt;/rich:panel&gt;</programlisting>
					<para>
						The <literal>customClass</literal> style is added to the CSS, and is applied to the component when it is rendered for display:
					</para>
					<programlisting language="XML" role="XML">&lt;div class="rf-p customClass"&gt;
   ...
&lt;/div&gt;</programlisting>
				</step>
			</procedure>

		</example>
		
		<section id="sect-Developer_Guide-Customizing_skins-Creating_a_new_skin">
			<title>Creating a new skin</title>
			<procedure>
				<step>
					<title>Create the skin file</title>
					<para>The name of the skin file should follow the format <filename><replaceable>new_skin_name</replaceable>.skin.properties</filename> and is placed in either the <filename>META-INF/skins/</filename> directory or the classpath directory of your project.</para>
				</step>
				<step>
					<title>Define the skin constants</title>
					<stepalternatives>
						<step>
							<title>Define all the skin constants</title>
							<para>Add skin parameter constants and values to the file. All the skin parameters listed in <xref linkend="tabl-Developer_Guide-Skin_parameter_tables_in_RichFaces-Parameter_settings_for_the_blueSky_skin" /> should be included in the skin file, with settings relevant to your new skin.</para>
							<example id="exam-Developer_Guide-Skinning_and_theming-blueSky.skin.properties_file">
								<title><filename>blueSky.skin.properties</filename> file</title>
								<para>
									Open the <filename>blueSky.skin.properties</filename> file from the <filename>/META-INF/skins</filename> directory in the <package>richfaces-impl-<replaceable>version</replaceable>.jar</package> package. The file lists all the skin parameter constants shown in <xref linkend="tabl-Developer_Guide-Skin_parameter_tables_in_RichFaces-Parameter_settings_for_the_blueSky_skin" />.
								</para>
								<para>
									You can use the <filename>blueSky.skin.properties</filename> file as a template for your new skin.
								</para>
							</example>
						</step>
						<step>
							<title>Extend a base skin</title>
							<para>
								Instead of redefining an entire new skin, your skin can use an existing skin as a base on which to build new parameters. Specify a base skin by using the <varname>baseSkin</varname> parameter in the skin file, as shown in <xref linkend="exam-Developer_Guide-Skinning_and_theming-Using_a_base_skin" />.
							</para>
							<example id="exam-Developer_Guide-Skinning_and_theming-Using_a_base_skin">
								<title>Using a base skin</title>
								<para>
									This example takes the <literal>blueSky</literal> skin as a base and only changes the <varname>generalSizeFont</varname> parameter.
								</para>
								<programlisting>baseSkin=blueSky
generalSizeFont=12pt</programlisting>
							</example>
						</step>
					</stepalternatives>
				</step>
				<step>
					<title>Reference the skin definition</title>
					<para>Add a skin definition <sgmltag>&lt;context-param&gt;</sgmltag> to the <filename>web.xml</filename> settings file of your application:</para>
					<programlisting language="XML" role="XML">&lt;context-param&gt;
   &lt;param-name&gt;org.richfaces.skin&lt;/param-name&gt;
   &lt;param-value&gt;<replaceable>new_skin_name</replaceable>&lt;/param-value&gt;
&lt;/context-param&gt;</programlisting>
				</step>
			</procedure>
		</section>
	</section>

	<section id="sect-Developer_Guide-Skinning_and_theming-Changing_skins_at_runtime">
		<title>Changing skins at runtime</title>
		<para>
			To allow users to change skins at runtime, use a managed bean to access the skin.
		</para>
		<procedure>
			<step>
				<title>Create the skin bean</title>
				<para>The skin bean is a simple interface to manage the skin:</para>
<programlisting language="Java" role="JAVA"><xi:include parse="text" href="extras/exam-Developer_Guide-Skinning_and_theming-Create_the_skin_bean.js" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
			</step>
			<step>
				<title>Reference the skin bean</title>
				<para>
					Add the <code>@ManagedBean</code> and <code>@SessionScoped</code> references to the class.
				</para>
				<stepalternatives>
					<step>
						<para>
							Alternatively, use <acronym>EL</acronym> (Expression Language) to reference the skin bean from the <filename>web.xml</filename> settings file.
						</para>
						<programlisting language="XML" role="XML">&lt;context-param&gt;
    &lt;param-name&gt;org.richfaces.skin&lt;/param-name&gt;
    &lt;param-value&gt;#{skinBean.skin}&lt;/param-value&gt;
&lt;/context-param&gt;</programlisting>
					</step>
				</stepalternatives>
			</step>
			<step>
				<title>Set initial skin</title>
				<para>
					The application needs an initial skin to display before the user chooses an alternative skin. Specify the skin in your class with <code>@ManagedProperty</code>.
				</para>
<programlisting language="Java" role="JAVA">@ManagedProperty(value="blueSky")
private String skin;</programlisting>
				<stepalternatives>
					<step>
						<para>
							Alternatively, specify the initial skin in the <filename>web.xml</filename> configuration file.
						</para>
<programlisting language="XML" role="XML">&lt;managed-bean&gt;
    &lt;managed-bean-name&gt;skinBean&lt;/managed-bean-name&gt;
    &lt;managed-bean-class&gt;SkinBean&lt;/managed-bean-class&gt;
    &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;
    &lt;managed-property&gt;
        &lt;property-name&gt;skin&lt;/property-name&gt;
        &lt;value&gt;blueSky&lt;/value&gt;
    &lt;/managed-property&gt;
&lt;/managed-bean&gt;</programlisting>
					</step>
				</stepalternatives>
			</step>
		</procedure>
	</section>
	
	<section id="sect-Developer_Guide-Skinning_and_theming-Skinning_standard_controls">
		<title>Skinning standard controls</title>
		<para>
			Standard HTML controls used alongside RichFaces components are also themed to create a cohesive user interface.
		</para>

		<section id="sect-Developer_Guide-Skinning_standard_controls-Automatic_skinning">
			<title>Automatic skinning</title>
			<para>
				The skinning style properties are automatically applied to controls based on their element names and attribute types. If the HTML elements are referenced in the standard skin stylesheets, the controls will be styled according to the mapped skin properties.
			</para>
			<para>
				Standard HTML controls are skinned in this way by default. To override this behavior, set the <literal>org.richfaces.enableControlSkinning</literal> context parameter in the <filename>web.xml</filename> configuration file to <literal>false</literal>:
			</para>
			<programlisting language="XML" role="XML">&lt;context-param&gt;
   &lt;param-name&gt;org.richfaces.enableControlSkinning&lt;/param-name&gt;
   &lt;param-value&gt;false&lt;/param-value&gt;
&lt;/context-param&gt;</programlisting>
		</section>

		<section id="sect-Developer_Guide-Skinning_standard_controls-Skinning_with_the_rfs-ctn_class">
			<title>Skinning with the <classname>rfs-ctn</classname> class</title>
				<para>
					The skinning style properties can be determined through a separate CSS class. This method is not available by default, but is enabled through the <literal>org.richfaces.enableControlSkinningClasses</literal> context parameter in the <filename>web.xml</filename> configuration file:
				</para>
				<programlisting language="XML" role="XML">&lt;context-param&gt;
   &lt;param-name&gt;org.richfaces.enableControlSkinningClasses&lt;/param-name&gt;
   &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/context-param&gt;</programlisting>
				<para>
					When enabled, a stylesheet with predefined classes offers a special CSS class named <classname>rfs-ctn</classname>. Reference the <classname>rfs-ctn</classname> class from any container element (such as a <sgmltag>&lt;div&gt;</sgmltag> element) to skin all the standard HTML controls in the container.
				</para>
				<para>
					Standard HTML controls can also be specifically defined in the CSS. Refer to the <filename>/core/impl/src/main/resources/META-INF/resources/skinning_both.ecss</filename> file in the <package>richfaces-ui.jar</package> package for examples of specially-defined CSS classes with skin parameters for HTML controls.
				</para>
		</section>
		
	</section>
	
</chapter>

