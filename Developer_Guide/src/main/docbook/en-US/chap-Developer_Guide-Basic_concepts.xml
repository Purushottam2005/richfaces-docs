<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Developer_Guide-Basic_concepts">
	<title>Basic concepts</title>
	<para>
		Read this chapter for the basic concepts of using RichFaces in conjunction with Ajax and JavaServer Faces.
	</para>
	<section id="sect-Developer_Guide-Basic_concepts-Sending_an_Ajax_request">
		<title>Sending an Ajax request</title>
		<para>
			Many of the tags in the <classname>a4j</classname> and <classname>rich</classname> tag libraries are capable of sending Ajax requests from a JavaServer Faces (JSF) page.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					The <sgmltag>&lt;a4j:commandButton&gt;</sgmltag> and <sgmltag>&lt;a4j:commandLink&gt;</sgmltag> tags are used to send an Ajax request on the <varname>click</varname> JavaScript event.
				</para>
			</listitem>
			<listitem>
				<para>
					The <sgmltag>&lt;a4j:poll&gt;</sgmltag> tag is used to send an Ajax request periodically using a timer.
				</para>
			</listitem>
			<listitem>
				<para>
					The <sgmltag>&lt;a4j:ajax&gt;</sgmltag> tag allows you to add Ajax functionality to standard JSF components and send Ajax request on a chosen JavaScript event, such as <varname>keyup</varname> or <varname>mouseover</varname>, for example.
				</para>
			</listitem>
			<listitem>
				<para>
					Most components in the <classname>rich</classname> tag library have built-in Ajax support. Refer to the <citetitle>RichFaces Component Reference</citetitle> for details on the use of each component.
				</para>
			</listitem>
		</itemizedlist>
	</section>
	
	<!--
	<section id="sect-Developer_Guide-Basic_concepts-Receiving_events_and_updates">
		<title>Receiving events and client-side updates</title>
		<para>
			Updates are made only to those regions specified using the <varname>execute</varname>. If no specific regions are declared, the whole page is updated when an Ajax response is received.
		</para>

		<section id="sect-Developer_Guide-Receiving_events_and_updates-Partial_page_updates">
			<title>Partial page updates</title>
			<para>
				Specific regions of a page can be defined through the use of container components such as <sgmltag>&lt;a4j:region&gt;</sgmltag>. These regions can then be specified with their <varname>id</varname> identifiers in the <varname>render</varname> attribute of a component so that when the component sends an Ajax request, only the specified regions are updated. In this way you can control which part of the JSF View is decoded on the server side when the Ajax request is sent. Multiple regions can be defined and sent, and regions can be nested inside other regions. Controls and components from third-party libraries contained in these regions are also updated.
			</para>
			<para>
				Additionally, regions can be wrapped with the <sgmltag>&lt;a4j:outputPanel ajaxRendered="true"&gt;</sgmltag> tag. This causes all contents of the region to be updated on every Ajax response, even if not explicitly listed in the requesting component's <varname>render</varname> attribute.
			</para>
			<para>
				Setting the <varname>limitRender</varname> attribute to <literal>true</literal> will cause <emphasis>only</emphasis> those regions listed in the requesting component's <varname>render</varname> attribute to be updated. This overrides any regions with the <sgmltag>&lt;a4j:outputPanel ajaxRendered="true"&gt;</sgmltag> tag.
			</para>
			<para>
				Refer to the <citetitle>RichFaces Component Reference</citetitle> for further details on the common Ajax attributes used for partial page updates.
			</para>
		</section>

	</section>
	-->

	<section id="sect-Developer_Guide-Basic_concepts-Partial_tree_processing">
		<title>Partial tree processing</title>
		<para>
			Use the <varname>execute</varname> attribute to specify which parts of the JSF tree to process during an Ajax request. The <varname>execute</varname> attribute can point to an <varname>id</varname> identifier of a specific component to process. Components can also be identified through the use of Expression Language (<acronym>EL</acronym>).
		</para>
		<para>
			Alternatively, the <varname>execute</varname> attribute accepts the following keywords:
		</para>
		<variablelist>
			<varlistentry>
				<term><code>@all</code></term>
				<listitem>
					<para>
						Every component is processed.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@none</code></term>
				<listitem>
					<para>
						No components are processed.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@this</code></term>
				<listitem>
					<para>
						The requesting component with the <varname>execute</varname> attribute is processed.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@form</code></term>
				<listitem>
					<para>
						The form that contains the requesting component is processed.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@region</code></term>
				<listitem>
					<para>
						The region that contains the requesting component is processed. Use the <sgmltag>&lt;a4j:region&gt;</sgmltag> component as a wrapper element to specify regions.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Some components make use of additional keywords. These are detailed under the relevant component entry in the <citetitle>RichFaces Component Reference</citetitle>.
		</para>
	</section>

	<section id="sect-Developer_Guide-Basic_concepts-Partial_view_updates">
		<title>Partial view updates</title>
		<para>
			Use the <varname>render</varname> attribute to specify which components to render for an Ajax update. The <varname>render</varname> attribute can point to an <varname>id</varname> identifier of a specific component to update. Components can also be identified through the use of Expression Language (<acronym>EL</acronym>).
		</para>
		<para>
			Alternatively, the <varname>render</varname> attribute accepts the following keywords:
		</para>
		<variablelist>
			<varlistentry>
				<term><code>@all</code></term>
				<listitem>
					<para>
						Every component is updated.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@none</code></term>
				<listitem>
					<para>
						No components are updated.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@this</code></term>
				<listitem>
					<para>
						The requesting component with the <varname>execute</varname> attribute is updated.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@form</code></term>
				<listitem>
					<para>
						The form that contains the requesting component is updated.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><code>@region</code></term>
				<listitem>
					<para>
						The region that contains the requesting component is updated. Use the <sgmltag>&lt;a4j:region&gt;</sgmltag> component as a wrapper element to specify regions.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Some components make use of additional keywords. These are detailed under the relevant component entry in the <citetitle>RichFaces Component Reference</citetitle>.
		</para>
		<para>
			Use the <sgmltag>&lt;a4j:outputPanel&gt;</sgmltag> component with the <code>ajaxRendered="true"</code> setting to always update a section irrespective of the requesting component's <varname>render</varname> attribute. The <sgmltag>&lt;rich:message&gt;</sgmltag> and <sgmltag>&lt;rich:messages&gt;</sgmltag> components are based on the <sgmltag>&lt;a4j:outputPanel&gt;</sgmltag> component, and as such will also always be updated. To override this behavior, use the <code>limitRender="true"</code> setting on the requesting component.
		</para>
	</section>
	
	<!--
	<section id="sect-Developer_Guide-Basic_concepts-Processing_data_on_the_server">
		<title>Processing data on the server</title>
		<para>
			Use the <varname>process</varname> attribute to list the <varname>id</varname> identifiers of components that need to be processed together with a requesting component. This can be useful if more than one component needs to be processed, but not the entire view. Alternatively if only one component needs to be processed instead of the entire view, <code>process="@this"</code> can be specified.
		</para>
	</section>
	-->
	
	<section id="sect-Developer_Guide-Basic_concepts-Component_overview">
		<title>Component overview</title>
		<para>
			The RichFaces framework is made up of two tag libraries: the <classname>a4j</classname> library and the <classname>rich</classname> library. The <classname>a4j</classname> tag library represents <emphasis>Ajax4jsf</emphasis>, which provides page-level Ajax support with core Ajax components. This allows developers to make use of custom Ajax behavior with existing components. The <classname>rich</classname> tag library provides Ajax support at the component level instead, and includes ready-made, self-contained components. These components don't require additional configuration in order to send requests or update.
		</para>
		<para>
			For details on the use of the various components, refer to <citetitle>RichFaces Component Reference</citetitle>.
		</para>
	</section>

</chapter>

