<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chap-Developer_Guide-RichFaces_overview">
	<title>RichFaces overview</title>
	<para>
		Read this chapter for technical details on the RichFaces framework.
	</para>
	<!--
	<para>
		The RichFaces framework is a component library which enhances JSF Ajax capabilities. RichFaces also enables page-wide Ajax support instead of the traditional component-wide support. Events can be defined on pages that invoke Ajax requests. After an Ajax request, the areas of a page that are synchronized with the JSF Component Tree can themselves change data on the server according to events fired on the client.
	</para>
	<para>
		<xref linkend="figu-Developer_Guide-RichFaces_overview-Request_processing_flow" /> illustrates how requests are processed in the RichFaces framework.
	</para>
	<figure id="figu-Developer_Guide-RichFaces_overview-Request_processing_flow">
		<title>Request processing flow</title>
		<mediaobject>
			<imageobject role="html">
				<imagedata contentwidth="660px" fileref="images/figu-Developer_Guide-RichFaces_overview-Request_processing_flow.png" format="PNG" width="444" />
			</imageobject>
			<imageobject role="fo">
				<imagedata contentwidth="150mm" fileref="images/figu-Developer_Guide-RichFaces_overview-Request_processing_flow.png" format="PNG" width="444" />
			</imageobject>
			<textobject>
				<para>
					The RichFaces request processing flow.
				</para>
			</textobject>
		</mediaobject>
	</figure>
	<para>
		Using JSF tags, RichFaces allows different parts of a JSF page to be updated with an Ajax request. JSF pages using RichFaces do not change from "regular" JSF pages, and additional JavaScript code is not required.
	</para>
	-->
	<section id="sect-Component_Reference-RichFaces_overview-Full_technical_requirements">
		<title>Full technical requirements</title>
		<para>
			RichFaces has been developed with an open architecture to be compatible with a wide variety of environments.
		</para>
		<section id="sect-Component_Reference-RichFaces_overview-Server_requirements">
			<title>Server requirements</title>
			<para>
				RichFaces 4 requires either of the following server technologies:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						An application server compliant with Java Platform, Enterprise Edition 5 or 6 (<acronym>JEE5</acronym> or <acronym>JEE6</acronym>), such as <productname>JBoss Application Server 6</productname>.
					</para>
				</listitem>
				<listitem>
					<para>
						A major servlet container, such as <productname>Jetty 6</productname> or <productname>Apache Tomcat 6</productname>.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="sect-Component_Reference-RichFaces_overview-Client_requirements">
			<title>Client requirements</title>
			<para>
				Clients accessing RichFaces applications require a web browser. Richfaces supports the following web browsers:
			</para>
			<itemizedlist id="item-Developer_Guide-Technical_Requirements-Linux_environments">
				<title>Linux environments</title>
				<listitem>
					<para>
						<productname>Firefox 3.0</productname> and higher
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Google Chrome</productname>
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Opera 9.5</productname> and higher
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist id="item-Developer_Guide-Technical_Requirements-Mac_OS_environments">
				<title>Mac OS environments</title>
				<listitem>
					<para>
						<productname>Firefox 3.5</productname> and higher
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Google Chrome</productname>
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Safari 3.0</productname> and higher
					</para>
				</listitem>
			</itemizedlist>
			<itemizedlist id="item-Developer_Guide-Technical_Requirements-Microsoft_Windows_environments">
				<title>Microsoft Windows environments</title>
				<listitem>
					<para>
						<productname>Firefox 3.0</productname> and higher
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Google Chrome</productname>
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Internet Explorer 7.0</productname> and higher
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Opera 9.5</productname> and higher
					</para>
				</listitem>
				<listitem>
					<para>
						<productname>Safari 4.0</productname> and higher
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section id="sect-Component_Reference-RichFaces_overview-Development_requirements">
			<title>Development requirements</title>
			<para>
				Developing applications with the RichFaces framework requires the Java Development Kit (<acronym>JDK</acronym>), an implementation of JavaServer Faces (<acronym>JSF</acronym>), and a development environment.
			</para>
			<variablelist>
				<varlistentry>
					<term>Java Development Kit (<acronym>JDK</acronym>)</term>
					<listitem>
						<para>
							RichFaces supports the following JDK versions: 
							<itemizedlist>
								<listitem>
									<para>
										JDK 1.5 and higher
									</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>JavaServer Faces (<acronym>JSF</acronym>)</term>
					<listitem>
						<para>
							RichFaces supports the following JSF implementations and frameworks: 
							<itemizedlist>
								<listitem>
									<para>
										<productname>MyFaces 2</productname> and higher
									</para>
								</listitem>
								<listitem>
									<para>
										<productname>Seam 3</productname> and higher
									</para>
								</listitem>
								<listitem>
									<para>
										<productname>Mojara 2</productname> and higher
									</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Development environment</term>
					<listitem>
						<para>
							RichFaces can be developed using most Java development environments. The following are recommended, and used for examples in this guide:
							<itemizedlist>
								<listitem>
									<para>
										<productname>JBoss Tools 3.1</productname> and higher
									</para>
								</listitem>
								<listitem>
									<para>
										<productname>Maven 2.0.9</productname> and higher (2.2.1 recommended)
									</para>
								</listitem>
							</itemizedlist>
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
	</section>
	
	<section id="sect-Developer_Guide-RichFaces_overview-Architecture">
		<title>Architecture</title>
		<para>
			The important elements of the RichFaces framework are as follows: 
			<itemizedlist>
				<listitem>
					<para>
						Ajax Action Components
					</para>
				</listitem>
				<listitem>
					<para>
						Ajax Containers
					</para>
				</listitem>
				<listitem>
					<para>
						Ajax Output
					</para>
				</listitem>
				<listitem>
					<para>
						Skins and Theming
					</para>
				</listitem>
				<listitem>
					<para>
						RichFaces Ajax Extensions
					</para>
				</listitem>
			</itemizedlist>
			 Read this section for details on each element.
		</para>
		<!--
		<section id="sect-Developer_Guide-Architecture-Ajax_Filter">
			<title>Ajax Filter</title>
			<para>
				To get all benefits of RichFaces, a filter should be registered in the <filename>web.xml</filename> file of your application. The filter recognizes multiple request types. Filter configuration is covered in detail in <xref linkend="sect-Developer_Guide-Advanced_features-Filters" />. <xref linkend="figu-Developer_Guide-Ajax_Filter-Request_processing_sequences" /> shows the difference between processing a regular JSF request and an Ajax request with a filter. With the regular JSF request, the whole JSF tree is encoded. With the Ajax request, the filter parses the content of an Ajax response before sending it to the client side, and encoding depends on the size of the Ajax region.
			</para>
			<figure id="figu-Developer_Guide-Ajax_Filter-Request_processing_sequences">
				<title>Request processing sequences</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata contentwidth="660px" fileref="images/figu-Developer_Guide-RichFaces_overview-Request_processing_sequences.png" format="PNG" width="444" />
					</imageobject>
					<imageobject role="fo">
						<imagedata contentwidth="150mm" fileref="images/figu-Developer_Guide-RichFaces_overview-Request_processing_sequences.png" format="PNG" width="444" />
					</imageobject>
					<textobject>
						<para>
							The difference between processing a regular JSF request and an Ajax request with a filter.
						</para>
					</textobject>
				</mediaobject>
			</figure>
			<para>
				Both with and without a filter, the required static or dynamic resources that your application requests are registered in the <classname>ResourseBuilder</classname> class. <xref linkend="figu-Developer_Guide-Ajax_Filter-Resource_request_sequence" /> shows the differences in resource requests for a regular JSF request and an Ajax request with a filter. When a request for a resource occurs, the RichFaces filter checks the <classname>ResourceCache</classname> for the resource. If the resource is in the cache, it is sent to the client. Otherwise, the filter searches for the resource among those that are registered by the <classname>ResourceBuilder</classname>. If the resource is registered, the RichFaces filter will send a request to the <classname>ResourceBuilder</classname> to deliver the resource.
			</para>
			<figure id="figu-Developer_Guide-Ajax_Filter-Resource_request_sequence">
				<title>Resource request sequence</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata contentwidth="660px" fileref="images/figu-Developer_Guide-RichFaces_overview-Resource_request_sequence.png" format="PNG" width="444" />
					</imageobject>
					<imageobject role="fo">
						<imagedata contentwidth="150mm" fileref="images/figu-Developer_Guide-RichFaces_overview-Resource_request_sequence.png" format="PNG" width="444" />
					</imageobject>
					<textobject>
						<para>
							The difference between resource requests for a regular JSF request and an Ajax request with a filter.
						</para>
					</textobject>
				</mediaobject>
			</figure>
		</section>
		-->
		
		<section id="sect-Developer_Guide-Architecture-Ajax_Action_Components">
			<title>Ajax Action Components</title>
			<para>
				The RichFaces framework includes several Ajax Action Components and Submitting Bahaviors: <sgmltag>&lt;a4j:commandButton&gt;</sgmltag>, <sgmltag>&lt;a4j:commandLink&gt;</sgmltag>, <sgmltag>&lt;a4j:poll&gt;</sgmltag>, <sgmltag>&lt;a4j:ajax&gt;</sgmltag>, and more. Use Ajax Action Components to send Ajax requests from the client side.
			</para>
		</section>
		
		<section id="sect-Developer_Guide-Architecture-Ajax_Containers">
			<title>Ajax Containers</title>
			<para>
				<classname>AjaxContainer</classname> is an interface that marks part of the JSF tree that is decoded during an Ajax request. It only marks the JSF tree if the component or behavior sending the request does not explicitly specify an alternative. <classname>AjaxRegion</classname> is an implementation of this interface.
			</para>
		</section>

		<section id="sect-Developer_Guide-Architecture-Ajax_Output">
			<title>Ajax Output</title>
			<para>
				<classname>AjaxContainer</classname> is an interface that marks part of the JSF tree that will be updated and rendered on the client for every Ajax request. It only marks the JSF tree if the component or behavior sending the request does not explicitly turn off automatic updates.
			</para>
		</section>
		
		<section id="sect-Developer_Guide-Architecture-Skins_and_theming">
			<title>Skins and theming</title>
			<para>
				RichFaces includes extensive support for application skinning. Skinning is a high-level extension to traditional <acronym>CSS</acronym> (Cascading Style Sheets) which allows the color scheme and appearance of an application to be easily managed. The skins simplify look-and-feel design by allowing multiple elements of the interface to be handled as manageable features, which have associated color palettes and styling. Application skins can additionally be changed on the fly during run-time, allowing user experiences to be personalized and customized.
			</para>
			<para>
				For full details on skinning and how to create skins for the components in your application, refer to <xref linkend="chap-Developer_Guide-Skinning_and_theming" />.
			</para>
		</section>
		
		<section id="sect-Developer_Guide-Architecture-RichFaces_Ajax_Extensions">
			<title>RichFaces Ajax Extensions</title>
			<para>
				The RichFaces Ajax Extensions plug in to the standard JSF 2 Ajax script facility. They extend the script facility with new features and options.
			</para>
		</section>

	</section>
	
	<section id="sect-Developer_Guide-RichFaces_overview-Technologies">
		<title>Technologies</title>
		<para>
			RichFaces 4 features full JSF 2 integration and uses standard web application technologies such as JavaScript, <acronym>XML</acronym> (Extensible Markup Language), and <acronym>XHTML</acronym> (Extensible Hypertext Markup Language).
		</para>
	</section>
	
	<section id="sect-Developer_Guide-RichFaces_overview-Differences_between_JSF_and_RichFaces_mechanisms">
		<title>Differences between <acronym>JSF</acronym> and RichFaces mechanisms</title>
		<para>
			JavaServer Faces 2 evaluates Ajax options, such as <code>execute</code> and <code>render</code>, while rendering a page. This allows any parameters to be sent directly from the client side.
		</para>
		<para>
			RichFaces evaluates the options when the current request is sent. This increases both the security of the data and the convenience for evaluating parameters.
		</para>
		<para>
			For example, binding Ajax options to Java Bean properties in RichFaces allows you to evaluate the options dynamically for the current request, such as defining additional zones to render. Parameters changed manually on the client side will not influence the request processing. With JSF 2, the options have evaluated during the previous page rendering would need to be used.
		</para>
	</section>
	
	<section id="sect-Developer_Guide-RichFaces_overview-Restrictions">
		<title>Restrictions</title>
		<para>
			The following restrictions apply to applications implementing the RichFaces framework: 
			<itemizedlist>
				<listitem>
					<para>
						As with most Ajax frameworks, you should not attempt to append or delete elements on a page using RichFaces Ajax, but should instead replace them. As such, elements that are rendered conditionally should not be targeted in the <varname>render</varname> attributes for Ajax controls. For successful updates, an element with the same identifier as in the response must exist on the page. If it is necessary to append code to a page, include a placeholder for it (an empty element).
					</para>
				</listitem>
				<listitem>
					<para>
						JSF 2 does not allow resources such as JavaScript or Cascading Style Sheets (<acronym>CSS</acronym>) to be added if the element requiring the resource is not initially present in the JSF tree. As such, components added to the tree via Ajax must have any required resources already loaded. In RichFaces, any components added to the JSF tree should have components with corresponding resources included on the main page initially. To facilitate this, components can use the <code>rendered="false"</code> setting to not be rendered on the page.
					</para>
				</listitem>
				<listitem>
					<para>
						Switching RichFaces skins via Ajax during runtime should be avoided, as this requires all the stylesheets to be reloaded.
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	
	<section id="sect-Component_Reference-RichFaces_overview-Compiling_from_source_code">
		<title>Compiling from source code</title>
		<para>
			The source code for the RichFaces framework can be compiled manually rather than using the pre-compiled binaries.
		</para>
		<procedure>
			<step>
				<title>Acquiring the source code</title>
				<stepalternatives>
					<step>
						<title>JBoss RichFaces Downloads area</title>
						<para>
							Download the RichFaces distribution as described in <xref linkend="sect-Developer_Guide-Getting_started_with_RichFaces-Setting_up_RichFaces" />. The distribution bundles contain the full RichFaces source code.
						</para>
					</step>
					<step>
						<title>Anonymous SVN repository</title>
						<para>
							Alternatively, the source files can be checked out from the anonymous SVN repository at <ulink url="http://anonsvn.jboss.org/repos/richfaces/branches/4.0.X/">http://anonsvn.jboss.org/repos/richfaces/branches/4.0.X/</ulink> using the following command:
						</para>
						<screen>svn co http://anonsvn.jboss.org/repos/richfaces/branches/4.0.X/</screen>
					</step>
				</stepalternatives>
			</step>
			<step>
				<title>Unzip archive</title>
				<para>
					If using the downloaded distribution, create a new directory named <filename>RichFaces</filename>, then unzip the archive containing the source code there.
				</para>
			</step>
			<step>
				<title>Configure <productname>Maven</productname> for RichFaces</title>
				<para>
					To compile the RichFaces source code, <productname>Maven</productname> requires access to the JBoss repositories. Refer to <xref linkend="step-Developer_Guide-Using_RichFaces_with_Maven-Add_required_repositories" /> of the procedure in <xref linkend="sect-Component_Reference-Using_RichFaces_with_Maven-Using_the_RichFaces_project_archetype" /> to configure the required repositories.
				</para>
			</step>
			<step>
				<title>Compile using <productname>Maven</productname></title>
				<para>
					In the root directory of the unzipped source code, enter the following command to compile and build the RichFaces framework:
				</para>
				<screen>mvn clean install</screen>
				<para>
					Add any of the following options after the command to customize the build:
				</para>
				<variablelist>
					<varlistentry>
						<term><command>-P release,docs</command></term>
						<listitem>
							<para>
								Maven additionally builds the documentation and release artifacts.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><command>-D skipTests=true</command></term>
						<listitem>
							<para>
								Maven skips the unit and functional tests, which completes the build faster.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><command>-D checkstyle.skip=true</command></term>
						<listitem>
							<para>
								Maven skips the scans for checking style, which completes the build faster.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><command>-D skip-source</command></term>
						<listitem>
							<para>
								Maven does not produce any source <filename>jar</filename> files from the build.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><command>-D skip-enforce</command></term>
						<listitem>
							<para>
								Maven does not check for the correct JDK version, Maven version, and <literal>SNAPSHOT</literal> plug-in, and forces the build.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><command>-D jsf-profile=<replaceable>implementation</replaceable></command></term>
						<listitem>
							<para>
								Maven tests builds and tests against the specified JSF implementation. The <replaceable>implementation</replaceable> value can be any of the following:
							</para>
							<itemizedlist>
								<listitem>
									<para>
										<literal>jsf_ri</literal>: The latest release of <productname>JSF RI (Mojarra)</productname>. This is the default implemenation.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>jsf_ri_javax</literal>: The latest release of <productname>javax.faces</productname>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>jsf_ri_snapshot</literal>: The latest snapshot version of <productname>JSF RI (Mojarra)</productname>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>myfaces</literal>: The latest release of <productname>MyFaces</productname>.
									</para>
								</listitem>
								<listitem>
									<para>
										<literal>myfaces</literal>: The latest snapshot version of <productname>MyFaces</productname>.
									</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</varlistentry>
				</variablelist>
			</step>
			<step>
				<title>Access compiled binaries</title>
				<para>
					The compiled libraries are located in the following sub-directories of the root RichFaces directory:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<filename>/ui/dist/richfaces-components-api/target/richfaces-components-api-<replaceable>version</replaceable>-SNAPSHOT.jar</filename>
						</para>
					</listitem>
					<listitem>
						<para>
							<filename>/ui/dist/richfaces-components-ui/target/richfaces-components-ui-<replaceable>version</replaceable>-SNAPSHOT.jar</filename>
						</para>
					</listitem>
					<listitem>
						<para>
							<filename>/core/api/target/richfaces-core-api-<replaceable>version</replaceable>-SNAPSHOT.jar</filename>
						</para>
					</listitem>
					<listitem>
						<para>
							<filename>/core/impl/target/richfaces-core-impl-<replaceable>version</replaceable>-SNAPSHOT.jar</filename>
						</para>
					</listitem>
				</itemizedlist>
				<!-- TODO check build location
				<para>
					If Maven built the framework using the <command>-P release</command> option, the distribution package containing all three compiled libraries and reference documentation is located at <filename>ui/assembly/target/dist/richfaces-ui-<replaceable>version</replaceable>-SNAPSHOT-bin.zip</filename>.
				</para>
				-->
			</step>
		</procedure>
		<para>
			You can now add the compiled libraries to your project as described in <xref linkend="step-Developer_Guide-Creating_a_project-Add_the_RichFaces_libraries_to_the_project" /> of <xref linkend="sect-Developer_Guide-Getting_started_with_RichFaces-Creating_a_project_with_JBoss_Tools" />.
		</para>
						
	</section>

</chapter>

