<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<!--
Many sections in this document have been commented-out and marked as TODO as they refer to features not yet included. Some of these features may eventually function differently than described.
-->

<chapter id="chap-Developer_Guide-Advanced_features">
	<title>Advanced features</title>
	<para>
		Read this chapter for details on some of the advanced features and configuration possibilities for the RichFaces framework.
	</para>
	<section id="sect-Developer_Guide-Advanced_features-JSF2_integration">
		<title>JSF 2 integration</title>
		<para>
			JavaServer Faces (<acronym>JSF</acronym>) is the Java-based web application framework upon which the RichFaces framework has been built. RichFaces is now integrated with JSF 2, which features several improvements to the framework.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					The standard display technology used by JSF 1 was JavaServer Pages (<acronym>JSP</acronym>). With JSF 2, the standard display technology has been changed to Facelets, which is a more powerful and more efficient View Declaration Language (<acronym>VLD</acronym>) than JSP.
				</para>
			</listitem>
		</itemizedlist>
	</section>

	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Performance_optimization">
		<title>Performance optimization</title>
		<para>
			The RichFaces framework includes several components designed to improve application performance. Script and style management can be optimized with resource-loading components such as <sgmltag>&lt;a4j:loadBundle&gt;</sgmltag>, <sgmltag>&lt;a4j:loadScript&gt;</sgmltag>, and <sgmltag>&lt;a4j:loadStyle&gt;</sgmltag>.
		</para>
		<para>
			For further details on optimizing the performance of RichFaces applications, refer to the <citetitle pubwork="chapter">Resources</citetitle> and <citetitle pubwork="chapter">Processing management</citetitle> chapters in the <citetitle>Component Reference Guide</citetitle>.
		</para>
	</section>
	-->
	
	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Filters">
		<title>Filters</title>
		<para>
			RichFaces uses a filter to correct the code received on an Ajax request. During a regular JSF request, a browser makes corrections independently. For Ajax requests, a filter is needed to prevent layout destruction. This is because a received code could differ from a code validated by a browser, and a browser does not make any corrections. Refer to <xref linkend="sect-Developer_Guide-Architecture-Ajax_Filter" /> for further details on how the Ajax filter works.
		</para>
		<para>
			<xref linkend="exam-Developer_Guide-Filters-Example_filter" /> shows how to set a filter in the <filename>web.xml</filename> file of an application.
		</para>
		<example id="exam-Developer_Guide-Filters-Example_filter">
			<title>Example filter</title>
			
<programlisting language="XML" role="XML"><xi:include href="extras/exam-Developer_Guide-Advanced_features-Example_filter.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		</example>
		<para>
			Different types of filters can be configured for pages in the same application. There are three filter types: 
			<variablelist>
				<varlistentry>
					<term><literal>TIDY</literal></term>
					<listitem>
						<para>
							The <literal>TIDY</literal> filter type is based on the <emphasis>Tidy</emphasis> parser. It is recommended for applications with complicated or non-standard markup. All necessary code corrections are made by the filter when a response comes from the server.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>NEKO</literal></term>
					<listitem>
						<para>
							The <literal>NEKO</literal> filter type replaces the "Fast Filter", and is based on the <emphasis>Neko</emphasis> parser. This filter considerably accelerates all Ajax request processing. However, the filter code is not strictly verified: if it is used with application markup that is non-standard or incorrect, it may cause errors and corrupt the application layout.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>NONE</literal></term>
					<listitem>
						<para>
							No correction is performed.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			<xref linkend="exam-Developer_Guide-Filters-Example_filter_configuration" /> shows how to configure a filter through the <filename>web.xml</filename> file.
		</para>
		<example id="exam-Developer_Guide-Filters-Example_filter_configuration">
			<title>Example filter configuration</title>
			
<programlisting language="XML" role="XML"><xi:include href="extras/exam-Developer_Guide-Advanced_features-Example_filter_configuration.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		</example>
		<para>
			The <parameter>ORDER</parameter> parameter specifies the order in which particular filter types are used for code correction: first <literal>NONE</literal>, then <literal>NEKO</literal>, then <literal>TIDY</literal>. Two sets of pages are specified as using specific filter types: 
			<variablelist>
				<varlistentry>
					<term><code>/pages/performance\.xhtml,/pages/default.*\.xhtml</code></term>
					<listitem>
						<para>
							These pages do not use a filter for correction, as they are specified as using <literal>NONE</literal>. If a page is not covered by this set, it is checked against the next set (the set using the <literal>NEKO</literal> filter).
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code>/pages/repeat\.xhtml</code></term>
					<listitem>
						<para>
							These pages use the <literal>NEKO</literal> filter for correction. If a page is not covered by this set, it uses the <literal>TIDY</literal> filter for code correction as specified with the <parameter>ORDER</parameter> parameter.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
	</section>
	-->

	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Script_and_style_loading">
		<title>Script and style loading</title>
		<para>
			Scripts and styles are normally loaded into a RichFaces application on demand. The default loading strategy can be altered to suit certain applications by specifying the strategy in the <filename>web.xml</filename> file.
		</para>
		<section id="sect-Developer_Guide-Script_and_style_loading-org.richfaces.LoadScriptStrategy">
			<title><code>org.richfaces.LoadScriptStrategy</code></title>
			<para>
				The script-loading strategy is specified as follows:
			</para>
			
<programlisting language="XML" role="XML">&lt;context-param&gt;
    &lt;param-name&gt;org.richfaces.LoadScriptStrategy&lt;/param-name&gt;
    &lt;param-value&gt;ALL&lt;/param-value&gt;
&lt;/context-param&gt;
</programlisting>
			<para>
				The <sgmltag>&lt;param-value&gt;</sgmltag> element can be set to one of three values: 
				<variablelist>
					<varlistentry>
						<term><literal>ALL</literal></term>
						<listitem>
							<para>
								All scripts are loaded when the application starts.
							</para>
							<note>
								<title>JavaScript file compression</title>
								<para>
									When <code>org.richfaces.LoadScriptStrategy</code> is set to <literal>ALL</literal>, JavaScript file compression is turned off.
								</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>DEFAULT</literal></term>
						<listitem>
							<para>
								Scripts are loaded as required. If not otherwise specified, this is the normal script-loading behavior.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>NONE</literal></term>
						<listitem>
							<para>
								No scripts are loaded. This can be useful for including scripts manually.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>
		-->

		<!-- TODO
		<section id="sect-Developer_Guide-Script_and_style_loading-org.richfaces.LoadStyleStrategy">
			<title><code>org.richfaces.LoadStyleStrategy</code></title>
			<para>
				The style-loading strategy is specified as follows:
			</para>
			
<programlisting language="XML" role="XML">&lt;context-param&gt;
    &lt;param-name&gt;org.richfaces.LoadStyleStrategy&lt;/param-name&gt;
    &lt;param-value&gt;ALL&lt;/param-value&gt;
&lt;/context-param&gt;
</programlisting>
			<para>
				The <sgmltag>&lt;param-value&gt;</sgmltag> element can be set to one of three values: 
				<variablelist>
					<varlistentry>
						<term><literal>ALL</literal></term>
						<listitem>
							<para>
								All styles from a single integrated style sheet are loaded when the application starts.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>DEFAULT</literal></term>
						<listitem>
							<para>
								Styles are loaded as required. If not otherwise specified, this is the normal style-loading behavior.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>NONE</literal></term>
						<listitem>
							<para>
								No styles are loaded. The default plain skin resets all color and font parameters to <literal>null</literal>. Any pre-defined styles for RichFaces are not used.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>

	</section>
	-->
	
	<section id="sect-Developer_Guide-Advanced_features-Error_handling">
		<title>Error handling</title>
		<para>
			RichFaces allows standard handlers to be defined for processing different application exceptions. Custom JavaScript can be executed when these exceptions occur.
		</para>

		<section id="sect-Developer_Guide-Advanced_features-Client-side_errors">
			<title>Client-side errors</title>
			<para>
				JSF provides a global <code>onError</code> handler on the client. The handler provides the relevant error code and other associated data. The RichFaces Ajax components provide the <varname>error</varname> attribute if extra functionality needs to be defined.
			</para>
			<para>
				Additional processing is available through a number of components, such as the following:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <sgmltag>&lt;a4j:status&gt;</sgmltag> component has an additional error state.
					</para>
				</listitem>
				<listitem>
					<para>
						The <sgmltag>&lt;a4j:queue&gt;</sgmltag> component can be used to process errors.
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Developer_Guide-Advanced_features-Server-side_errors">
			<title>Server-side errors</title>
			<para>
				 Use the JSF 2 <classname>ExceptionHandler</classname> class to handle server-side errors such as session expiration.
			</para>
		</section>

	</section>

	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Managing_states" status="draft">
		<title>Managing states</title>
		<para>
			JavaServer Faces (<acronym>JSF</acronym>) has an advanced navigation mechanism that allows you to define navigation from one view to another. Navigation typically happens in a web application when a user moves from one page to another, but there is no switch mechanism between certain logical states in the same view. The RichFaces State API allows sets of states to be defined for the views, as well as any properties associated with these states.
		</para>
		<para>
			Actually States is a map where the entry key is a name of the State and the value is a State map. Particular State map has entries with some names as keys and any objects as values that are used after the state activation. Thus, in the State map you could define any values, method bindings, or just some simple state variables (constants) which have different values for every State.
		</para>
	</section>
	-->
	
	<section id="sect-Developer_Guide-Advanced_features-Other_functions">
		<title>Other functions</title>
		<para>
			RichFaces provides a number of advanced functions, such as managing user roles and identifying elements. Refer to the <citetitle pubwork="chapter">Functions</citetitle> chapter in the <citetitle pubwork="book">RichFaces Component Reference</citetitle> for further details.
		</para>
	</section>
    
    <section id="sect-Developer_Guide-Advanced_features-Resource_loading">
		<title>Resource loading</title>
		<para>
            The RichFaces improves a standard JSF resource handling in order to achieve following features:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    resource optimization - serves optimized component resource dependencies (JavaScript, CSS)
                </para>
            </listitem>
            <listitem>
                <para>
                    resource mapping - re-routes resource requests (maps an one resource to an another resource)
                </para>
            </listitem>
        </itemizedlist>
        
        <section id="sect-Developer_Guide-Advanced_features-Configuring_ResourceServlet">
            <title>Configuring ResourceServlet</title>
            <para>
                For leveraging RichFaces resource loading improvements, the <sgmltag>ResourceServlet</sgmltag> needs to be registered. 
            </para>
            <para>
                <sgmltag>ResourceServlet</sgmltag> is automatically registered in the Servlet 3.0 and higher environments.
            </para>
            <para>
                In the Servlet 2.5 and lower environments, it is necessary to register the <sgmltag>ResourceServlet</sgmltag> manually in the <sgmltag>WEB-INF/web.xml</sgmltag> configuration file:
            </para>
            <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Configuring_ResourceServlet.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
        </section>
        
        <section id="sect-Developer_Guide-Advanced_features-Resource_optimization">
            <title>Resource optimization</title>
            <para>
                The resource optimization feature provides optimized component dependencies - JavaScript, CSS - which are compressed and aggregated to resource packages.
            </para>
            <para>
                The loading of compressed resource packages may lead into significant client performance boost, since many small files are aggregated into one big file - the number of HTTP connections necessary to download application resources is significantly decreased.
            </para>
            <example>
                <title>Enabling resource optimization</title>
                <para>
                    To enable the resource optimization, add a following configuration to <code>web.xml</code>:
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Resource_optimization-Enabling.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
            
            <example>
                <title>Resource optimization in development JSF project stage</title>
                <para>
                    Resource optimization is influenced by a project stage:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            resources are not compressed in a development and during an unit-test to enable a client-side debugging
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            resources are compressed in a production and during a system-test to minimize a network bandwidth 
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Switch to the development project stage during a development:
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Resource_optimization-Switching_to_development.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            </example>
        </section>
        
        <section id="sect-Developer_Guide-Advanced_features-Resource_mapping">
            <title>Resource mapping</title>
            <para>
                The resource mapping feature maps an existing JSF resource (determined by library and name) to a another resource. 
            </para>
            <para>
                This feature can help to solve of following cases:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        providing alternative versions of a resource
                    </para>
                </listitem>
                <listitem>
                    <para>
                        map several resources to one
                    </para>
                </listitem>
                <listitem>
                    <para>
                        using external resources
                    </para>
                </listitem>
                <listitem>
                    <para>
                        moving resources to servers with static content
                    </para>
                </listitem>
            </itemizedlist>
            
            <section>
                <title>Resource mapping configuration file</title>
                <para>
                    Configuring the resource mapping means adding new records to the class-path file <code>META-INF/richfaces/static-resource-mappings.properties</code>.
                </para>
                <para>
                    Each line in the configuration file represents one relocation.
                </para>
                <para>
                    A following sample shows a JSF resource with name <code>resourceLibrary:resourceName</code> relocated to a resource <code>anotherResourceLibrary:anotherResourceName</code>:
                </para>
                <programlisting>resourceLibrary\:resourceName=anotherResourceLibrary/anotherResourceName</programlisting>
                <note>
                    <title>Mapping resource name to relative URL</title>
                    <para>
                        The definition above contains a JSF resource name on the left side of the expression and a relative path on the right side.
                    </para>
                    <para>
                        The expression on the right side represents a path relative to a JSF resource root, thus resource path <code>anotherResourceLibrary/anotherResourceName</code> actually maps to a JSF resource with name <code>anotherResourceLibrary:anotherResourceName</code>.
                    </para>
                </note>
                <note>
                    <title>Additional mapping files</title>
                    <para>
                        It is possible to define additional resource mapping configuration files using a contextual parameter identifying class-path locations where files resides: <code>org.richfaces.resourceMapping.mappingFile</code> (a comma-separated list of class-path files).
                    </para>
                </note>
            </section>
            
            <section>
                <title>Examples of resource mapping</title>
                
                <example>
                    <title>Providing alternative file</title>
                    <para>
                        All requests for <code>jquery.js</code> are served as requests for <code>jquery-alternative-version.js</code>:
                    </para>
                    <programlisting>jquery.js=jquery-alternative-version.js</programlisting>
                </example>
                
                <example>
                    <title>Mapping several resources to one</title>
                    <para>
                        Both <code>some:jquery.js</code> and <code>another:jquery.js</code> are mapped to <code>final:jquery.js</code>:
                    </para>
                    <programlisting><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Resource_mapping-Mapping_several_resources_to_one.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                </example>
                
                <example>
                    <title>Using external resources</title>
                    <para>
                        Mappings with a resource path starting with <code>http://</code> or <code>https://</code> are served as absolute resource locations:
                    </para>
                    <para>
                        A following sample instructs to load <code>jquery.js</code> from CDN:
                    </para>
                    <programlisting>jquery.js=http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js</programlisting>
                </example>
            </section>
        </section>
    </section>

</chapter>

