<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<!--
Many sections in this document have been commented-out and marked as TODO as they refer to features not yet included. Some of these features may eventually function differently than described.
-->

<chapter id="chap-Developer_Guide-Advanced_features">
	<title>Advanced features</title>
	<para>
		Read this chapter for details on some of the advanced features and configuration possibilities for the RichFaces framework.
	</para>
	<section id="sect-Developer_Guide-Advanced_features-JSF2_integration">
		<title>JSF 2 integration</title>
		<para>
			JavaServer Faces (<acronym>JSF</acronym>) is the Java-based web application framework upon which the RichFaces framework has been built. RichFaces is now integrated with JSF 2, which features several improvements to the framework.
		</para>
		<itemizedlist>
			<listitem>
				<para>
					The standard display technology used by JSF 1 was JavaServer Pages (<acronym>JSP</acronym>). With JSF 2, the standard display technology has been changed to Facelets, which is a more powerful and more efficient View Declaration Language (<acronym>VLD</acronym>) than JSP.
				</para>
			</listitem>
		</itemizedlist>
	</section>

	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Performance_optimization">
		<title>Performance optimization</title>
		<para>
			The RichFaces framework includes several components designed to improve application performance. Script and style management can be optimized with resource-loading components such as <sgmltag>&lt;a4j:loadBundle&gt;</sgmltag>, <sgmltag>&lt;a4j:loadScript&gt;</sgmltag>, and <sgmltag>&lt;a4j:loadStyle&gt;</sgmltag>.
		</para>
		<para>
			For further details on optimizing the performance of RichFaces applications, refer to the <citetitle pubwork="chapter">Resources</citetitle> and <citetitle pubwork="chapter">Processing management</citetitle> chapters in the <citetitle>Component Reference Guide</citetitle>.
		</para>
	</section>
	-->
	
	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Filters">
		<title>Filters</title>
		<para>
			RichFaces uses a filter to correct the code received on an Ajax request. During a regular JSF request, a browser makes corrections independently. For Ajax requests, a filter is needed to prevent layout destruction. This is because a received code could differ from a code validated by a browser, and a browser does not make any corrections. Refer to <xref linkend="sect-Developer_Guide-Architecture-Ajax_Filter" /> for further details on how the Ajax filter works.
		</para>
		<para>
			<xref linkend="exam-Developer_Guide-Filters-Example_filter" /> shows how to set a filter in the <filename>web.xml</filename> file of an application.
		</para>
		<example id="exam-Developer_Guide-Filters-Example_filter">
			<title>Example filter</title>
			
<programlisting language="XML" role="XML"><xi:include href="extras/exam-Developer_Guide-Advanced_features-Example_filter.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		</example>
		<para>
			Different types of filters can be configured for pages in the same application. There are three filter types: 
			<variablelist>
				<varlistentry>
					<term><literal>TIDY</literal></term>
					<listitem>
						<para>
							The <literal>TIDY</literal> filter type is based on the <emphasis>Tidy</emphasis> parser. It is recommended for applications with complicated or non-standard markup. All necessary code corrections are made by the filter when a response comes from the server.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>NEKO</literal></term>
					<listitem>
						<para>
							The <literal>NEKO</literal> filter type replaces the "Fast Filter", and is based on the <emphasis>Neko</emphasis> parser. This filter considerably accelerates all Ajax request processing. However, the filter code is not strictly verified: if it is used with application markup that is non-standard or incorrect, it may cause errors and corrupt the application layout.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>NONE</literal></term>
					<listitem>
						<para>
							No correction is performed.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			<xref linkend="exam-Developer_Guide-Filters-Example_filter_configuration" /> shows how to configure a filter through the <filename>web.xml</filename> file.
		</para>
		<example id="exam-Developer_Guide-Filters-Example_filter_configuration">
			<title>Example filter configuration</title>
			
<programlisting language="XML" role="XML"><xi:include href="extras/exam-Developer_Guide-Advanced_features-Example_filter_configuration.xml_sample" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		</example>
		<para>
			The <parameter>ORDER</parameter> parameter specifies the order in which particular filter types are used for code correction: first <literal>NONE</literal>, then <literal>NEKO</literal>, then <literal>TIDY</literal>. Two sets of pages are specified as using specific filter types: 
			<variablelist>
				<varlistentry>
					<term><code>/pages/performance\.xhtml,/pages/default.*\.xhtml</code></term>
					<listitem>
						<para>
							These pages do not use a filter for correction, as they are specified as using <literal>NONE</literal>. If a page is not covered by this set, it is checked against the next set (the set using the <literal>NEKO</literal> filter).
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><code>/pages/repeat\.xhtml</code></term>
					<listitem>
						<para>
							These pages use the <literal>NEKO</literal> filter for correction. If a page is not covered by this set, it uses the <literal>TIDY</literal> filter for code correction as specified with the <parameter>ORDER</parameter> parameter.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
	</section>
	-->

	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Script_and_style_loading">
		<title>Script and style loading</title>
		<para>
			Scripts and styles are normally loaded into a RichFaces application on demand. The default loading strategy can be altered to suit certain applications by specifying the strategy in the <filename>web.xml</filename> file.
		</para>
		<section id="sect-Developer_Guide-Script_and_style_loading-org.richfaces.LoadScriptStrategy">
			<title><code>org.richfaces.LoadScriptStrategy</code></title>
			<para>
				The script-loading strategy is specified as follows:
			</para>
			
<programlisting language="XML" role="XML">&lt;context-param&gt;
    &lt;param-name&gt;org.richfaces.LoadScriptStrategy&lt;/param-name&gt;
    &lt;param-value&gt;ALL&lt;/param-value&gt;
&lt;/context-param&gt;
</programlisting>
			<para>
				The <sgmltag>&lt;param-value&gt;</sgmltag> element can be set to one of three values: 
				<variablelist>
					<varlistentry>
						<term><literal>ALL</literal></term>
						<listitem>
							<para>
								All scripts are loaded when the application starts.
							</para>
							<note>
								<title>JavaScript file compression</title>
								<para>
									When <code>org.richfaces.LoadScriptStrategy</code> is set to <literal>ALL</literal>, JavaScript file compression is turned off.
								</para>
							</note>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>DEFAULT</literal></term>
						<listitem>
							<para>
								Scripts are loaded as required. If not otherwise specified, this is the normal script-loading behavior.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>NONE</literal></term>
						<listitem>
							<para>
								No scripts are loaded. This can be useful for including scripts manually.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>
		-->

		<!-- TODO
		<section id="sect-Developer_Guide-Script_and_style_loading-org.richfaces.LoadStyleStrategy">
			<title><code>org.richfaces.LoadStyleStrategy</code></title>
			<para>
				The style-loading strategy is specified as follows:
			</para>
			
<programlisting language="XML" role="XML">&lt;context-param&gt;
    &lt;param-name&gt;org.richfaces.LoadStyleStrategy&lt;/param-name&gt;
    &lt;param-value&gt;ALL&lt;/param-value&gt;
&lt;/context-param&gt;
</programlisting>
			<para>
				The <sgmltag>&lt;param-value&gt;</sgmltag> element can be set to one of three values: 
				<variablelist>
					<varlistentry>
						<term><literal>ALL</literal></term>
						<listitem>
							<para>
								All styles from a single integrated style sheet are loaded when the application starts.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>DEFAULT</literal></term>
						<listitem>
							<para>
								Styles are loaded as required. If not otherwise specified, this is the normal style-loading behavior.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><literal>NONE</literal></term>
						<listitem>
							<para>
								No styles are loaded. The default plain skin resets all color and font parameters to <literal>null</literal>. Any pre-defined styles for RichFaces are not used.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</para>
		</section>

	</section>
	-->
	
	<section id="sect-Developer_Guide-Advanced_features-Error_handling">
		<title>Error handling</title>
		<para>
			RichFaces allows standard handlers to be defined for processing different application exceptions. Custom JavaScript can be executed when these exceptions occur.
		</para>

		<section id="sect-Developer_Guide-Advanced_features-Client-side_errors">
			<title>Client-side errors</title>
			<para>
				JSF provides a global <code>onError</code> handler on the client. The handler provides the relevant error code and other associated data. The RichFaces Ajax components provide the <varname>error</varname> attribute if extra functionality needs to be defined.
			</para>
			<para>
				Additional processing is available through a number of components, such as the following:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The <sgmltag>&lt;a4j:status&gt;</sgmltag> component has an additional error state.
					</para>
				</listitem>
				<listitem>
					<para>
						The <sgmltag>&lt;a4j:queue&gt;</sgmltag> component can be used to process errors.
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section id="sect-Developer_Guide-Advanced_features-Server-side_errors">
			<title>Server-side errors</title>
			<para>
				 Use the JSF 2 <classname>ExceptionHandler</classname> class to handle server-side errors such as session expiration.
			</para>
		</section>

	</section>

	<!-- TODO
	<section id="sect-Developer_Guide-Advanced_features-Managing_states" status="draft">
		<title>Managing states</title>
		<para>
			JavaServer Faces (<acronym>JSF</acronym>) has an advanced navigation mechanism that allows you to define navigation from one view to another. Navigation typically happens in a web application when a user moves from one page to another, but there is no switch mechanism between certain logical states in the same view. The RichFaces State API allows sets of states to be defined for the views, as well as any properties associated with these states.
		</para>
		<para>
			Actually States is a map where the entry key is a name of the State and the value is a State map. Particular State map has entries with some names as keys and any objects as values that are used after the state activation. Thus, in the State map you could define any values, method bindings, or just some simple state variables (constants) which have different values for every State.
		</para>
	</section>
	-->
	
	<section id="sect-Developer_Guide-Advanced_features-Other_functions">
		<title>Other functions</title>
		<para>
			RichFaces provides a number of advanced functions, such as managing user roles and identifying elements. Refer to the <citetitle pubwork="chapter">Functions</citetitle> chapter in the <citetitle pubwork="book">RichFaces Component Reference</citetitle> for further details.
		</para>
	</section>
    
    <section id="sect-Developer_Guide-Advanced_features-Resource_loading">
		<title>Resource loading</title>
		<para>
			Resources which RichFaces uses in components, like style sheets, JavaScript code or images are handled by standard JSF resource handling. 
		</para>
        <para>
            However JSF resource handling feature falls short when using static resources which refers to each other (style sheets refering to images, JavaScript refering to style sheets).
            These resources does not know about Faces servlet mapping and thus it cannot be referenced by JSF resource handling feature.
        </para>
        <para>
            RichFaces provides <sgmltag>ResourceServlet</sgmltag> which handles framework static resources:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    third-party JavaScript libraries or style sheets
                </para>
            </listitem>
            <listitem>
                <para>
                    pre-generated dynamic resources (ECSS, dynamic images)
                </para>
            </listitem>
        </itemizedlist>
        
        <section id="sect-Developer_Guide-Advanced_features-Configuring_ResourceServlet">
            <title>Configuring ResourceServlet</title>
            <para>
                <sgmltag>ResourceServlet</sgmltag> is automatically registered in Servlet 3.0 and higher environments.
            </para>
            <para>
                In Servlet 2.5 environment, it is necessary to register <sgmltag>ResourceServlet</sgmltag> manually in <sgmltag>WEB-INF/web.xml</sgmltag> configuration file:
            </para>
            <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Configuring_ResourceServlet.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
            <para>
                This servlet is strictly limited in what can be processed to the RichFaces resource libraries only.
            </para>
        </section>
        
        <section id="sect-Developer_Guide-Advanced_features-Resource_mapping">
            <title>Resource mapping</title>
            <para>
                RichFaces resources are determined by notion of resource libraries and load by standard JSF resource handling mechanism.
            </para>
            <para>
                There are situations where it may be favourable to use alternative resource location:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        loading modified resource (either patched version, alternative version, compressed resource)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        loading resource from external location (HTTP server, Content Delivery Network)
                    </para>
                </listitem>
            </itemizedlist>
            <section id="sect-Developer_Guide-Advanced_features-Configuring_resource_mapping">
                <title>Configuring resource mapping</title>
                <para>
                    Resource mapping feature is in default state disabled. You can enable it with contextual parameter <code>org.richfaces.resourceMapping.enabled</code>.
                </para>
                <para>
                    Resource mapping consist of properties file with records in format:
                </para>
                <programlisting>resourceLibrary:resourceName=resourceLocation</programlisting>
                <para>
                    It is possible to define custom resource mapping configuration file using contextual parameter identifying class-path location where file resides: <code>org.richfaces.resourceMapping.mappingFile</code>
                </para>
                <para>
                    Location of resources is determined by resource location root and <code>resourceLocation</code> configured in file.
                    Since <code>resourceLocation</code> can point to external locations, you can point it to completely other server, these locations are determined
                    In other cases resource location root can be configured using contextual parameter <code>org.richfaces.resourceMapping.location</code> and it can contain EL expressions.
                </para>
                <para>
                    By default, resource mapping file and location root are determined by current resource loading strategy.
                </para>
                <para>
                    Following sample shows usage of <code>web.xml</code> and <code>META-INF/custom-mapping.properties</code> configurations:
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Configuring_resource_mapping_web_xml.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    First <code>context-param</code> is enabling resource mapping. Both other context-params are configuring the behavior.
                </para>
                <para>
                    Second <code>context-param</code> instructs RichFaces to look for <code>META-INF/custom-mapping.properties</code> file on class-path (either in your WAR: <code>WEB-INF/classes/META-INF/custom-mapping.properties</code> or any JAR on class-path in <code>META-INF/custom-mapping.properties</code>).
                </para>
                <para>
                    Last <code>context-param</code> configures the root resource location and uses expressions <code>#{facesContext.externalContext.requestContextPath}</code> to retrieve context path and <code>#{resourceLocation}</code> to retrieve location of specific resource (as provided from resource mapping configuration file).
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Configuring_resource_mapping_custom_mappping_properties.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    First property in the <code>META-INF/custom-mapping.properties</code> specifies resource mapping for resource with qualifier <code>javax.faces:jsf.js</code> which stands for Java Server Faces 2.0 JavaScript implementation. It instructs resource handler to look for <code>patched-jsf.js</code> source file.
                    Using the resource location root, it will specifically look for <code>#{facesContext.externalContext.requestContextPath}/resources/com.acme/patched-jsf.js</code>
                </para>
                <para>
                    Second property defines mapping for <code>jquery.js</code> resource. This line instructs resource handler to locate this resource on external URL, specifically from CDN.
                </para>
                <para>
                    Note that several resources can point to one location, which will in turn cause browser to load only one resource which should contain all resources. 
                </para>
            </section>
        </section>
        
        <section id="sect-Developer_Guide-Advanced_features-Resource_loading_strategies">
            <title>Resource loading strategies</title>
            <para>
                Resource loading strategies are special configuration of resource mapping suitable in lot of cases.
            </para>
            <para>
                RichFaces framework bundles static versions of all components' resources which are processed to optimize performance in certain scenarios:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis>static resources</emphasis> - suitable for environments, where dynamic generation is not enough performant or can't be processed at all 
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>compression</emphasis> - suitable as network bandwidth and client performance optimization and client side code obfuscation 
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis>packing</emphasis> - suitable for providing dependencies for all components in one package, limiting number of requests to one per resource type
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                Previous features aren't configured directly, it is necessary to choose project stages in which given feature will be applied.
            </para>
            <para>
                It is necessary to choose stages, where compression is applied and where packed resource will be used. If both compression and packing are disable, simple static resources will be served. 
            </para>
            <section id="sect-Developer_Guide-Advanced_features-Configuring_resource_loading_strategies">
                <title>Configuring resource loading strategies</title>
                <para>
                    It is possible to provide following options for project stages: <code>None, Development, UnitTest, SystemTest, Production, All</code>.
                </para>
                <para>
                    For configuration, you can use any combination of project stages (separated by commas) or keywords None (for feature turned off in all stages) or All (for feature turned off in all stages).
                </para>
                <para>
                    Compression is configured in <code>web.xml</code> using <code>context-param</code> <code>org.richfaces.resourceMapping.compressedStages</code>.
                    Compression is set to <code>Production,SystemTest</code>, enabling this feature for production and system testing.
                </para>
                <para>
                    Packing is configured in <code>web.xml</code> using <code>context-param</code> <code>org.richfaces.resourceMapping.packedStages</code>.
                    Packing is set to <code>All</code>, enabling this feature in all stages.
                </para>
                <para>
                    It specifically means that with resource mapping enabled, packed resources are served and compression is turned off in development and unit tests and turned on in production and for system tests.
                </para>
                <para>
                    Following sample turns off packing, so only compression will be applied.
                </para>
                <programlisting language="XML" role="XML"><xi:include parse="text" href="extras/prog-Developer_Guide-Advanced_features-Configuring_resource_loading_strategies.xml_sample" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
                <para>
                    Notice that resource mapping needs to be enabled for serving static resources
                </para>
                <para>
                    For serving static resources, you will need to turn off both compression and packing.
                </para>
                <para>
                    Note that resource loading strategies are just special case of resource mapping, thus once you will provide custom resource mapping configuration or location, bundled default resources won't be referenced correctly. For using compressed/packed resources you will need to copy properties from one of files located in <code>richfaces-components-ui.jar:/META-INF/richfaces/staticResourceMapping/</code>.
                </para>
            </section>
        </section>
	</section>

</chapter>

